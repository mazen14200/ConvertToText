@using Bnan.Core.Extensions;
@using Bnan.Ui.ViewModels.BS;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.EntityFrameworkCore;
@using Newtonsoft.Json;
@model BSLayoutVM
@inject UserManager<CrMasUserInformation> userManager
@inject SignInManager<CrMasUserInformation> signinManager
@inject IViewLocalizer localizer
@{
    var user = await userManager.GetUserAsync(User);
    var requestCulture = Context.Features.Get<IRequestCultureFeature>();
    ViewData["returnUrl"] = string.IsNullOrEmpty(Context.Request.Path) ? "~/" : $"~{Context.Request.Path.Value}";
    var userInfo = await userManager.Users
          .Include(l => l.CrMasUserMainValidations)
          .Include(l => l.CrMasUserSubValidations)
          .Include(l => l.CrMasUserInformationLessorNavigation)
          .Include(l => l.CrMasUserContractValidity)
          .FirstOrDefaultAsync(l => l.UserName == user.UserName);
}
<link href="~/BranchSys/CreateContract/sb-admin-2.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
<link href="~/BranchSys/CreateContract/contract.css" rel="styleSheet">
<link rel="stylesheet" href="~/css/toastr.css" />

@if (requestCulture?.RequestCulture.UICulture.Name == "en-US")
{
    <link href="~/BranchSys/CreateContract/english-style.css" rel="styleSheet">
}
<style>
    .hideElement {
        display: none !important;
    }

    .selected {
        border: 3px solid #39629C; /* Add your desired border style for selected rows */
    }
</style>
@if (requestCulture?.RequestCulture.UICulture.Name == "en-US")
{
    <style>
        .form-control {
            text-align: left !important;
        }
    </style>
}
else
{
    <style>
        .form-control {
            text-align: right !important;
        }
    </style>
}

<div class="container-fluid mt-0" id="grad1">
    <section class="section-mainCard" style="font-weight: 600;">
        <div class="row justify-content-center w-100 h-100">
            <div class="col-11 col-sm-10 col-md-11 col-lg-11 col-xl-10 text-center p-0 ">
                <div class="card main-card ">
                    <div class="row pt-2">
                        <a asp-action="Index" asp-area="BS" asp-controller="Home" style="width: fit-content;">
                            <img src="~/BranchSys/CreateContract/img/cancel.png" alt="cancle_icon" class="cancle-icon">
                        </a>
                    </div>
                    <div class="row" style="flex-direction: row-reverse;">
                        <div class="col justify-content-center d-flex title-row">
                            <span class="card-title">
                                @localizer["CreateContract"]
                            </span>
                        </div>
                    </div>
                    <div class="row justify-content-center h-100 content-row">
                        <div class="col-md-11 mx-0">
                            <form asp-area="BS" asp-action="CreateContract" asp-controller="Contract" id="msform" novalidate class="needs-validation">
                                <div class=" pe-4">
                                    <!-- progressbar -->
                                    <ul id="progressbar">
                                        <li class="active" id="tenant">@localizer["Renterr"]</li>
                                        <li id="car">@localizer["Car"]</li>
                                        <li id="driver">@localizer["Driver"]</li>
                                        <li id="add-driver">@localizer["AdditionalDriver"]</li>
                                        <li id="options">@localizer["AdditionalAndChoices"]</li>
                                        <li id="check">@localizer["CheckUp"]</li>
                                        <li id="payment">@localizer["Payment"]</li>

                                    </ul>
                                </div>
                                <fieldset>
                                    <div class="form-card form-card1 h-100">
                                        <input hidden asp-for="SelectedBranch" />
                                        <div class="row row-step1 ">
                                            <div class="col-auto">
                                                <label for="national-number-step1"
                                                       class="col-form-label">
                                                    @localizer["RenterId"]
                                                </label>
                                            </div>
                                            <div class="col-sm-3 col-md-3 col-lg-3">
                                                <input type="text" class="form-control" style="margin-left: -4px;" asp-for="Contract.RenterId" oninput="this.value=this.value.replace(/[^0-9]/g,'')" maxlength="10" autofocus>
                                                <div class="row requird-field-row">
                                                    <span class="requird-field" id="requird-field_RenterID" asp-validation-for="@Model.Contract.RenterId"></span>
                                                </div>
                                            </div>
                                            <div class="col-auto seacrh_icon_Renter" id="seacrh_icon_Renter">
                                                <img src="~/BranchSys/CreateContract/img/seacrh-icon.png" alt="seacrh-icon Image"
                                                     id="hover-image">
                                                <div class="dropdown-content" id="dropdown_content_Renter">
                                                    <div class="row dropdown-content-row pt-2">
                                                        <div class="col-7 ">
                                                            <p>@localizer["LastVisit"]</p>
                                                        </div>
                                                        <div class="col personal-data-dropdown">
                                                            <p id="lastVisit"></p>
                                                        </div>

                                                    </div>
                                                    <div class="row dropdown-content-row">
                                                        <div class="col-7 ">
                                                            <p>@localizer["LastContract"]</p>
                                                        </div>
                                                        <div class="col personal-data-dropdown">
                                                            <p id="LastContract"></p>
                                                        </div>

                                                    </div>
                                                    <div class="row dropdown-content-row">
                                                        <div class="col-7 ">
                                                            <p>@localizer["ContractCountt"]</p>
                                                        </div>
                                                        <div class="col personal-data-dropdown">
                                                            <p id="ContractCountt">0</p>
                                                        </div>

                                                    </div>
                                                    <div class="row dropdown-content-row">
                                                        <div class="col-7 ">
                                                            <p> @localizer["RentalDays"] </p>
                                                        </div>
                                                        <div class="col personal-data-dropdown">
                                                            <p id="RentalDays">0</p>
                                                        </div>

                                                    </div>
                                                    <div class="row dropdown-content-row">
                                                        <div class="col-7 ">
                                                            <p> @localizer["KilometersCut"] </p>
                                                        </div>
                                                        <div class="col personal-data-dropdown">
                                                            <p id="KMCut">0.00</p>
                                                        </div>

                                                    </div>
                                                    <div class="row dropdown-content-row">
                                                        <div class="col-7 ">
                                                            <p>@localizer["AmountsTraded"]</p>
                                                        </div>
                                                        <div class="col personal-data-dropdown">
                                                            <p id="AmountsTraded">0.00</p>
                                                        </div>

                                                    </div>
                                                    <div class="row dropdown-content-row">
                                                        <div class="col-7 ">
                                                            <p> @localizer["Balance"] </p>
                                                        </div>
                                                        <div class="col personal-data-dropdown">
                                                            <p id="BalanceRenter">0.00</p>
                                                        </div>

                                                    </div>
                                                    <div class="row dropdown-content-row">
                                                        <div class="col-7 ">
                                                            <p> @localizer["Evaluation"] </p>
                                                        </div>
                                                        <div class="col personal-data-dropdown">
                                                            <p id="Evaluation">0.00</p>
                                                        </div>

                                                    </div>
                                                    <div class="row dropdown-content-row">
                                                        <div class="col-7 ">
                                                            <p> @localizer["DealingMechanism"]</p>
                                                        </div>
                                                        <div class="col personal-data-dropdown">
                                                            <p id="DealingMechanism"></p>
                                                        </div>
                                                    </div>
                                                    <div class="row dropdown-content-row">
                                                        <div class="col-7 ">
                                                            <p>@localizer["Membership"]</p>
                                                        </div>
                                                        <div class="col personal-data-dropdown">
                                                            <p id="Membership"></p>
                                                        </div>

                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row row-step1 align-items-center">
                                            <div class="col-auto" style="padding-bottom: 30px;">
                                                <label for="birth-date-step1"
                                                       class=" col-form-label">
                                                    @localizer["Birthdate"]
                                                </label>

                                            </div>
                                            <div class="col-sm-3 col-md-3 col-lg-3">
                                                <input type="date" class="form-control"
                                                       id="birth-date-step1" name="birth-date-step1" readonly>
                                                <div class="row requird-field-row">
                                                    <p class="requird-field" id="requird_field_Birthdate"></p>
                                                </div>
                                            </div>

                                            <div class="col-auto" style="margin-bottom: 32px;">
                                                <button type="button" class="check-btn" data-bs-toggle="modal" id="RenterCheckBtn" onclick="TimerFunctionRenter(true)">
                                                    @localizer["Verification"]
                                                </button>
                                            </div>

                                            <div class="col-sm-auto col-md-auto col-lg-auto radio-style" id="radioDriverRenter">
                                                <div class="form-check" id="RenterIsdriverDiv">
                                                    <label class="form-check-label" for="RenterIsdriver">
                                                        @localizer["TheRenterIsAdriver"]
                                                    </label>
                                                    <input class="form-check-input" type="checkbox" name="RenterIsdriver" id="RenterIsdriver">
                                                </div>
                                                <div class="form-check form-check2" id="PrivateDriverDiv">
                                                    <label class="form-check-label" for="PrivateDriver">
                                                        @localizer["PrivateDriver"]
                                                    </label>
                                                    <input class="form-check-input" type="checkbox" name="PrivateDriver" id="PrivateDriver">
                                                </div>
                                            </div>

                                            <div id="dropdown-container" class="col-auto" style="display:none">
                                                <div class="offset">
                                                    @if (requestCulture?.RequestCulture.UICulture.Name == "en-US")
                                                    {
                                                        <select class="form-select" id="driver-dropdown" asp-for="Contract.PrivateDriverId">
                                                            <option selected disabled>@localizer["ChooseYourDriver"]</option>
                                                            @foreach (var driver in Model.Drivers)
                                                            {
                                                                <option value="@driver.CrCasRenterPrivateDriverInformationId">@driver.CrCasRenterPrivateDriverInformationEnName</option>
                                                            }
                                                        </select>
                                                    }
                                                    else
                                                    {
                                                        <select class="form-select text-right" id="driver-dropdown" asp-for="Contract.PrivateDriverId">
                                                            <option selected disabled>@localizer["ChooseYourDriver"]</option>
                                                            @foreach (var driver in Model.Drivers)
                                                            {
                                                                <option value="@driver.CrCasRenterPrivateDriverInformationId">@driver.CrCasRenterPrivateDriverInformationArName</option>
                                                            }
                                                        </select>
                                                    }
                                                </div>
                                                <div class="row requird-field-row">
                                                    <p class="requird-field" id="PrivateDriverRequired"></p>
                                                </div>
                                            </div>

                                        </div>
                                        <div class="row row-step1 mb-3 ">
                                            <div class="col-auto">
                                                <p id="name"> @localizer["Name"] </p>
                                            </div>
                                            <div class="col-auto personal-data">
                                                <p id="RenterName"></p>
                                            </div>

                                        </div>
                                        <div class="row row-step1 mb-3">
                                            <div class="col-auto">
                                                <p id="email">@localizer["Email"]</p>
                                            </div>
                                            <div class="col-auto personal-data">
                                                <p id="RenterEmail"></p>
                                            </div>

                                        </div>
                                        <div class="row row-step1 mb-3">
                                            <div class="col-auto">
                                                <p id="adress">@localizer["Address"]</p>
                                            </div>
                                            <div class="col-auto personal-data">
                                                <p id="RenterAddress"></p>
                                            </div>

                                        </div>
                                        <div class="row row-step1 ">
                                            <div class="col-auto">
                                                <label for="FormControlTextarea1">@localizer["reasons"]</label>
                                            </div>
                                            <div class="col-sm-7 col-md-7 col-lg-7">
                                                <input class="form-control text-right" asp-for="Contract.RenterReasons" rows="1" maxlength="100" type="text">
                                            </div>

                                        </div>
                                    </div>
                                    <div class="row button-row" style="text-align: left;">
                                        <div class="button-card">
                                            <img src="~/BranchSys/CreateContract/Group.png" alt="Button Image" class="next action-button" style="vertical-align: middle; ">
                                            <input type="button" name="next" class="next action-button" value="@localizer["Next"]" />
                                        </div>
                                    </div>

                                </fieldset>
                                <!--Car Field-->
                                <fieldset>
                                    <div class="form-card">
                                        <div class="row" style="flex-direction: row-reverse;">
                                            <!--Car Category-->
                                            <div class="col-sm-4 col-md-4 col-lg-3 car-catogeries " id="scrollContainer">
                                                <input asp-for="Contract.SerialNo" hidden />
                                                <input asp-for="Contract.PriceNo" hidden />
                                                <div class="d-flex " style="flex-direction:column; gap:4px">
                                                    <button type="button" class="btn customized-button" onclick="GetCodeCategory(`3400000000`)">@localizer["All"]</button>
                                                    @foreach (var category in Model.CarCategories)
                                                    {
                                                        @if (requestCulture?.RequestCulture.UICulture.Name == "en-US")
                                                        {
                                                            <button type="button" class="btn customized-button" onclick="GetCodeCategory(`@category.CrMasSupCarCategoryCode`)">@category.CrMasSupCarCategoryEnName</button>
                                                        }
                                                        else
                                                        {
                                                            <button type="button" class="btn customized-button" onclick="GetCodeCategory(`@category.CrMasSupCarCategoryCode`)">@category.CrMasSupCarCategoryArName</button>
                                                        }
                                                    }
                                                </div>
                                            </div>
                                            <!--Cars Informations-->
                                            <div class="col-sm-8 col-md-8 col-lg-9 scrollable-content p-0">
                                                <table width="100%" class="table table-hover" id="ListCars">
                                                    <tbody>
                                                        <partial name="_CarsList" />
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row button-row">
                                        <div class="button-card">
                                        </div>
                                        <div class="button-card">
                                            <input type="button" name="previous" class="previous action-button-previous" value="@localizer["Previous"]" />
                                            <img src="~/BranchSys/CreateContract/Vector.png" alt="Button Image" class="previous action-button-previous" style="vertical-align: middle; ">
                                        </div>
                                    </div>

                                </fieldset>
                                <!--Driver-->
                                <fieldset>
                                    <div class="form-card form-card3">
                                        <div class="row row-step3 ">
                                            <div class="col-auto">
                                                <label for="national-number-driver" class="col-form-label">@localizer["RenterId"]</label>
                                            </div>
                                            <div class="col-sm-3 col-md-3 col-lg-3">
                                                <input type="tel" class="form-control" asp-for="Contract.DriverId" style="margin-left: -4px;" oninput="this.value=this.value.replace(/[^0-9]/g,'')" maxlength="10" required>
                                                <div class="row requird-field-row">
                                                    <span class="requird-field" id="requird_field_DriverID" asp-validation-for="@Model.Contract.DriverId"></span>
                                                </div>
                                            </div>
                                            <div class="col-auto" id="seacrh_icon_Driver">
                                                <img src="~/BranchSys/CreateContract/img/seacrh-icon.png" alt="seacrh-icon Image"
                                                     id="hover-image-driver">
                                                <div class="dropdown-content"
                                                     id="dropdown_content_Driver">
                                                    <div class="row dropdown-content-row pt-2">
                                                        <div class="col-7 ">
                                                            <p>@localizer["LastVisit"]</p>
                                                        </div>
                                                        <div class="col personal-data-dropdown">
                                                            <p id="LastVisitDriver"></p>
                                                        </div>

                                                    </div>
                                                    <div class="row dropdown-content-row">
                                                        <div class="col-7 ">
                                                            <p>@localizer["LastContract"] </p>
                                                        </div>
                                                        <div class="col personal-data-dropdown">
                                                            <p id="LastContractDriver"></p>
                                                        </div>

                                                    </div>
                                                    <div class="row dropdown-content-row">
                                                        <div class="col-7 ">
                                                            <p> @localizer["ContractsCount"] </p>
                                                        </div>
                                                        <div class="col personal-data-dropdown">
                                                            <p id="ContractCounttDriver">0</p>
                                                        </div>

                                                    </div>
                                                    <div class="row dropdown-content-row">
                                                        <div class="col-7 ">
                                                            <p>@localizer["RentalDays"] </p>
                                                        </div>
                                                        <div class="col personal-data-dropdown">
                                                            <p id="RentalDaysDriver">0</p>
                                                        </div>

                                                    </div>
                                                    <div class="row dropdown-content-row">
                                                        <div class="col-7 ">
                                                            <p> @localizer["Kilotraveled"] </p>
                                                        </div>
                                                        <div class="col personal-data-dropdown">
                                                            <p id="KMCutDriver">0.00</p>
                                                        </div>

                                                    </div>
                                                    <div class="row dropdown-content-row">
                                                        <div class="col-7 ">
                                                            <p> @localizer["Amountstraded"]</p>
                                                        </div>
                                                        <div class="col personal-data-dropdown">
                                                            <p id="AmountsTradedDriver">0.00</p>
                                                        </div>

                                                    </div>
                                                    <div class="row dropdown-content-row">
                                                        <div class="col-7 ">
                                                            <p> @localizer["Balance"] </p>
                                                        </div>
                                                        <div class="col personal-data-dropdown">
                                                            <p id="BalanceDriver">0.00</p>
                                                        </div>

                                                    </div>
                                                    <div class="row dropdown-content-row">
                                                        <div class="col-7 ">
                                                            <p> @localizer["Evaluation"] </p>
                                                        </div>
                                                        <div class="col personal-data-dropdown">
                                                            <p id="EvaluationDriver">0.00</p>
                                                        </div>

                                                    </div>
                                                    <div class="row dropdown-content-row">
                                                        <div class="col-7 ">
                                                            <p> @localizer["DealingMechanism"]</p>
                                                        </div>
                                                        <div class="col personal-data-dropdown">
                                                            <p id="DealingMechanismDriver">جيد</p>
                                                        </div>

                                                    </div>
                                                    <div class="row dropdown-content-row">
                                                        <div class="col-7 ">
                                                            <p> @localizer["MemberShip"]</p>
                                                        </div>
                                                        <div class="col personal-data-dropdown">
                                                            <p id="MembershipDriver"></p>
                                                        </div>

                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row row-step3 align-items-center">
                                            <div class="col-auto" style="padding-bottom: 30px;">
                                                <label for="birth-date-driver" class="col-form-label">@localizer["Birthdate"]</label>
                                            </div>
                                            <div class="col-sm-3 col-md-3 col-lg-3">
                                                <input type="date" class="form-control" id="birth-date-driver" name="birth-date-driver" readonly>
                                                <div class="row requird-field-row">
                                                    <p class="requird-field" id="requird_field_Birthdate_driver"></p>
                                                </div>
                                            </div>

                                            <div class="col-auto" style="margin-bottom: 32px;">
                                                <button type="button" class="check-btn" data-bs-toggle="modal" id="DriverCheckBtn" onclick="TimerFunctionDriver(true)">@localizer["Verification"] </button>
                                            </div>
                                        </div>
                                        <div class="row row-step3 align-items-center">
                                            <div class="col-md-6">
                                                <div class="row " style="justify-content: flex-end;">
                                                    <div class="col-auto personal-data">
                                                        <p id="DriverName"></p>

                                                    </div>
                                                    <div class="col-auto">
                                                        <p> @localizer["Name"] </p>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-6" style="    display: flex;
                                                                justify-content: flex-end;">
                                                <div class="addational-driver d-flex gap-3" id="addationalDriverDiv">
                                                    <label class="addational-driver-label"
                                                           for="addational-driver">
                                                        @localizer["AdditionalDriverr"]
                                                    </label>
                                                    <input class="addational-driver-input" type="checkbox" name='addtional-driver-add' value="checked" id="addational-driver">
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row row-step3 ">
                                            <div class="col-md-4">
                                                <div class="row " style="justify-content: flex-start;flex-direction: row-reverse;">
                                                    <div class="col-auto">
                                                        <p id="driver-nationality">@localizer["Nationality"]</p>
                                                    </div>
                                                    <div class="col-auto personal-data">
                                                        <p id="DriverNationality"></p>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="row " style="justify-content: flex-start;
                                                                flex-direction: row-reverse;">
                                                    <div class="col-auto">
                                                        <p id="driver-type">@localizer["Gender"] </p>
                                                    </div>
                                                    <div class="col-auto personal-data">
                                                        <p id="DriverGender"></p>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="row " style="justify-content: flex-start;
                                                                flex-direction: row-reverse;">
                                                    <div class="col-auto">
                                                        <p id="driver-jop"> @localizer["Professions"] </p>
                                                    </div>
                                                    <div class="col-auto personal-data">
                                                        <p id="DriverProffessions"></p>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row row-step3 "
                                             style="flex-direction: row-reverse;">
                                            <div class="col-md-4">
                                                <div class="row " style="justify-content: flex-start;
                                                                flex-direction: row-reverse;">
                                                    <div class="col-auto">
                                                        <p id="driver-licence-type">@localizer["Typeoflicense"]</p>
                                                    </div>
                                                    <div class="col-auto personal-data">
                                                        <p id="DriverLicenseType"></p>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="row " style="justify-content: flex-start;
                                                                flex-direction: row-reverse;">
                                                    <div class="col-auto">
                                                        <p id="driver-licence-date"> @localizer["Issuingit"] </p>
                                                    </div>
                                                    <div class="col-auto personal-data">
                                                        <p id="DriverLicenseIssued"></p>
                                                    </div>

                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="row " style="justify-content: flex-start;
                                                                flex-direction: row-reverse;">
                                                    <div class="col-auto">
                                                        <p id="driver-licence-end"> @localizer["Expirationdate"] </p>
                                                    </div>
                                                    <div class="col-auto personal-data">
                                                        <p id="DriverLicenseExpiration"></p>
                                                        <div class="row requird-field-row">
                                                            <span class="requird-field" id="DriverLicenseExpirationMessage"></span>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row row-step3 ">
                                            <div class="col-md-8">
                                                <div class="row " style="justify-content: flex-start;flex-direction: row-reverse;">
                                                    <div class="col-auto">
                                                        <p id="driver-email">@localizer["Email"]</p>

                                                    </div>
                                                    <div class="col-auto personal-data">
                                                        <p id="DriverEmail"></p>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="row " style="justify-content: flex-start;
                                                                flex-direction: row-reverse;">
                                                    <div class="col-auto p-0">
                                                        <p id="workplace">
                                                            @localizer["Employer"]
                                                        </p>

                                                    </div>
                                                    <div class="col-auto personal-data">
                                                        <p id="DriverEmployer"></p>

                                                    </div>

                                                </div>
                                            </div>
                                        </div>
                                        <div class="row row-step3 ">
                                            <div class="col-auto">
                                                <p id="additionalDriver-adress">@localizer["Address"]</p>
                                            </div>
                                            <div class="col-auto personal-data">
                                                <p id="DriverAddress">
                                                </p>
                                            </div>
                                        </div>
                                        <div class="row row-step3">
                                            <div class="col-auto">
                                                <label for="FormControlTextarea2">@localizer["reasons"]</label>
                                            </div>
                                            <div class="col-sm-7 col-md-7 col-lg-7">
                                                <input class="form-control text-right" asp-for="Contract.DriverReasons" maxlength="100">
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row button-row">
                                        <div class="button-card">
                                            <img src="~/BranchSys/CreateContract/Group.png" alt="Button Image"
                                                 class="next action-button"
                                                 style="vertical-align: middle; ">
                                            <input type="button" name="next" class="next action-button" value="@localizer["Next"]" />
                                        </div>
                                        <div class="button-card">
                                            <input type="button" name="previous" class="previous action-button-previous" value="@localizer["Previous"]" />
                                            <img src="~/BranchSys/CreateContract/Vector.png" alt="Button Image" class="previous action-button-previous" style="vertical-align: middle; ">
                                        </div>
                                    </div>
                                </fieldset>
                                <!--AddDriver-->
                                <fieldset>
                                    <div class="form-card form-card4">
                                        <div class="row row-step4 ">
                                            <div class="col-auto">
                                                <label for="national-number-additionalDriver"
                                                       class="col-form-label">
                                                    @localizer["RenterId"]
                                                </label>
                                            </div>
                                            <div class="col-sm-3 col-md-3 col-lg-3">
                                                <input type="tel" class="form-control" style="margin-left: -4px;" required asp-for="Contract.AdditionalDriverId" oninput="this.value=this.value.replace(/[^0-9]/g,'')" maxlength="10">
                                                <div class="row requird-field-row">
                                                    <span class="requird-field" id="requird_field_AdditionalDriverId" asp-validation-for="@Model.Contract.AdditionalDriverId"></span>
                                                </div>
                                            </div>
                                            <div class="col-auto seacrh-icon-col" id="seacrh_icon_AddDriver">
                                                <img src="~/BranchSys/CreateContract/img/seacrh-icon.png" alt="seacrh-icon Image"
                                                     id="hover-image-Add-driver">
                                                <div class="dropdown-content"
                                                     id="dropdown_content_AddDriver">
                                                    <div class="row dropdown-content-row pt-2">
                                                        <div class="col-7 ">
                                                            <p>@localizer["LastVisit"]</p>
                                                        </div>
                                                        <div class="col personal-data-dropdown">
                                                            <p id="LastVisitAddDriver"></p>
                                                        </div>

                                                    </div>
                                                    <div class="row dropdown-content-row">
                                                        <div class="col-7 ">
                                                            <p>@localizer["LastContract"] </p>
                                                        </div>
                                                        <div class="col personal-data-dropdown">
                                                            <p id="LastContractAddDriver"></p>
                                                        </div>

                                                    </div>
                                                    <div class="row dropdown-content-row">
                                                        <div class="col-7 ">
                                                            <p> @localizer["ContractsCount"] </p>
                                                        </div>
                                                        <div class="col personal-data-dropdown">
                                                            <p id="ContractCounttAddDriver">0</p>
                                                        </div>

                                                    </div>
                                                    <div class="row dropdown-content-row">
                                                        <div class="col-7 ">
                                                            <p>@localizer["RentalDays"] </p>
                                                        </div>
                                                        <div class="col personal-data-dropdown">
                                                            <p id="RentalDaysDriver">0</p>
                                                        </div>

                                                    </div>
                                                    <div class="row dropdown-content-row">
                                                        <div class="col-7 ">
                                                            <p> @localizer["Kilotraveled"] </p>
                                                        </div>
                                                        <div class="col personal-data-dropdown">
                                                            <p id="KMCutAddDriver">0.00</p>
                                                        </div>

                                                    </div>
                                                    <div class="row dropdown-content-row">
                                                        <div class="col-7 ">
                                                            <p> @localizer["Amountstraded"]</p>
                                                        </div>
                                                        <div class="col personal-data-dropdown">
                                                            <p id="AmountsTradedAddDriver">0.00</p>
                                                        </div>

                                                    </div>
                                                    <div class="row dropdown-content-row">
                                                        <div class="col-7 ">
                                                            <p> @localizer["Balance"] </p>
                                                        </div>
                                                        <div class="col personal-data-dropdown">
                                                            <p id="BalanceAddDriver">0.00</p>
                                                        </div>

                                                    </div>
                                                    <div class="row dropdown-content-row">
                                                        <div class="col-7 ">
                                                            <p> @localizer["Evaluation"] </p>
                                                        </div>
                                                        <div class="col personal-data-dropdown">
                                                            <p id="EvaluationAddDriver">0.00</p>
                                                        </div>

                                                    </div>
                                                    <div class="row dropdown-content-row">
                                                        <div class="col-7 ">
                                                            <p> @localizer["DealingMechanism"]</p>
                                                        </div>
                                                        <div class="col personal-data-dropdown">
                                                            <p id="DealingMechanismAddDriver">جيد</p>
                                                        </div>

                                                    </div>
                                                    <div class="row dropdown-content-row">
                                                        <div class="col-7 ">
                                                            <p> @localizer["MemberShip"]</p>
                                                        </div>
                                                        <div class="col personal-data-dropdown">
                                                            <p id="MembershipAddDriver"></p>
                                                        </div>

                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row row-step4 align-items-center">
                                            <div class="col-auto" style="padding-bottom: 30px;">
                                                <label for="birth-date-additionalDriver"
                                                       class=" col-form-label">
                                                    @localizer["Birthdate"]
                                                </label>

                                            </div>
                                            <div class="col-sm-3 col-md-3 col-lg-3">
                                                <input type="date" class="form-control"
                                                       id="birth-date-additionalDriver"
                                                       name="birth-date-additionalDriver" readonly>
                                                <div class="row requird-field-row">
                                                    <p class="requird_field_BirthDate_AddDriver"></p>
                                                </div>
                                            </div>

                                            <div class="col-auto" style="margin-bottom: 32px;">
                                                <button type="button" class="check-btn" data-bs-toggle="modal" id="AddDriverCheckBtn" onclick="TimerFunctionAddDriver(true)">@localizer["Verification"]</button>
                                            </div>
                                        </div>
                                        <div class="row row-step4">
                                            <div class="col-auto">
                                                <p id="additionalDriver-name">@localizer["Name"] </p>

                                            </div>
                                            <div class="col-auto personal-data">
                                                <p id="AddDriverName"></p>
                                            </div>
                                        </div>
                                        <div class="row row-step4 ">
                                            <div class="col-md-4">
                                                <div class="row " style="justify-content: flex-start;flex-direction: row-reverse;">
                                                    <div class="col-auto">
                                                        <p id="additionalDriver-nationality">
                                                            @localizer["Nationality"]
                                                        </p>

                                                    </div>
                                                    <div class="col-auto personal-data">
                                                        <p id="AddDriverNationality"></p>
                                                    </div>

                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="row " style="justify-content: flex-start;flex-direction: row-reverse;">
                                                    <div class="col-auto">
                                                        <p id="additionalDriver-type">@localizer["Gender"]</p>
                                                    </div>
                                                    <div class="col-auto personal-data">
                                                        <p id="AddDriverGender"></p>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="row " style="justify-content: flex-start;flex-direction: row-reverse;">
                                                    <div class="col-auto">
                                                        <p id="additionalDriver-jop">@localizer["Professions"]</p>
                                                    </div>
                                                    <div class="col-auto personal-data">
                                                        <p id="AddDriverProffessions"></p>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row row-step4 "
                                             style="flex-direction: row-reverse;">
                                            <div class="col-md-4">
                                                <div class="row " style="justify-content: flex-start;flex-direction: row-reverse;">
                                                    <div class="col-auto">
                                                        <p id="additionalDriver-licence-type">@localizer["Typeoflicense"]</p>
                                                    </div>
                                                    <div class="col-auto personal-data">
                                                        <p id="AddDriverLicenseType"></p>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="row " style="justify-content: flex-start;flex-direction: row-reverse;">
                                                    <div class="col-auto">
                                                        <p id="additionalDriver-licence-date">
                                                            @localizer["Issuingit"]
                                                        </p>

                                                    </div>
                                                    <div class="col-auto personal-data">
                                                        <p id="AddDriverLicenseIssued"></p>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="row " style="justify-content: flex-start;flex-direction: row-reverse;">
                                                    <div class="col-auto">
                                                        <p id="additionalDriver-licence-end">
                                                            @localizer["Expirationdate"]
                                                        </p>
                                                    </div>
                                                    <div class="col-auto personal-data">
                                                        <p id="AddDriverLicenseExpiration"></p>
                                                        <div class="row requird-field-row">
                                                            <span class="requird-field" id="AddDriverLicenseExpirationMessage"></span>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row row-step4 ">
                                            <div class="col-md-8">
                                                <div class="row " style="justify-content: flex-start;flex-direction: row-reverse;">
                                                    <div class="col-auto">
                                                        <p id="additionalDriver-email">@localizer["Email"]</p>

                                                    </div>
                                                    <div class="col-auto personal-data">
                                                        <p id="AddDriverEmail"></p>

                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="row " style="justify-content: flex-start; flex-direction: row-reverse;">
                                                    <div class="col-auto p-0">
                                                        <p id="workplace">@localizer["Employer"]</p>
                                                    </div>
                                                    <div class="col-auto personal-data">
                                                        <p id="AddDriverEmployer"></p>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row row-step4 ">
                                            <div class="col-auto">
                                                <p id="additionalDriver-adress">@localizer["Address"]</p>
                                            </div>
                                            <div class="col-auto personal-data">
                                                <p id="AddDriverAddress"></p>
                                            </div>
                                        </div>
                                        <div class="row row-step4 ">
                                            <div class="col-auto">
                                                <label for="FormControlTextarea3">@localizer["reasons"]</label>
                                            </div>
                                            <div class="col-sm-5 col-md-5 col-lg-5">
                                                <input class="form-control text-right" asp-for="Contract.AddDriverReasons" maxlength="100">
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row button-row">
                                        <div class="button-card">
                                            <img src="~/BranchSys/CreateContract/Group.png" alt="Button Image"
                                                 class="next action-button"
                                                 style="vertical-align: middle; ">
                                            <input type="button" name="next" class="next action-button"
                                                   value="@localizer["Next"]" />
                                        </div>
                                        <div class="button-card">
                                            <input type="button" name="previous"
                                                   class="previous action-button-previous"
                                                   value="@localizer["Previous"]" />
                                            <img src="~/BranchSys/CreateContract/Vector.png" alt="Button Image"
                                                 class="previous action-button-previous"
                                                 style="vertical-align: middle; ">
                                        </div>
                                    </div>
                                </fieldset>
                                <!--Choices and Additional-->
                                <fieldset>
                                    <div class="form-card">
                                        <div class="row  table-field-row ">
                                            <!--Car Options-->
                                            <div class="col">
                                                <div class="table-scroll">
                                                    <table class="table table-bordered  table-hover table-scroll " id="AdditionalList">
                                                        <thead>
                                                            <tr>
                                                                <th scope="col" class="value-tabel-header">@localizer["TheValue"]</th>
                                                                <th scope="col" style='border-left: 1px solid #ff9626a3;'>@localizer["Additionals"]</th>
                                                            </tr>
                                                        </thead>

                                                        <tbody id="additionalBody">
                                                            <input hidden id="AdditionalsList" name="AdditionalsList" />
                                                            <input hidden asp-for="Contract.AdditionalTotal" />
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </div>
                                            <div class="col">
                                                <div class="table-scroll">
                                                    <table class="table table-bordered  table-hover" id="OptionsList">
                                                        <thead>
                                                            <tr>
                                                                <th scope="col"
                                                                    class="value-tabel-header">
                                                                    @localizer["TheValue"]
                                                                </th>
                                                                <th scope="col"
                                                                    style='border-left: 1px solid #ff9626a3; '>
                                                                    @localizer["Choices"]
                                                                </th>

                                                            </tr>
                                                        </thead>
                                                        <tbody id="optionsBody">
                                                            <input hidden id="ChoicesList" name="ChoicesList" />
                                                            <input hidden asp-for="Contract.OptionTotal" />
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row button-row">
                                        <div class="button-card">
                                            <img src="~/BranchSys/CreateContract/Group.png" alt="Button Image"
                                                 class="next action-button"
                                                 style="vertical-align: middle; margin-right: 10px;">
                                            <input type="button" name="next" class="next action-button"
                                                   value="التالي" />
                                        </div>
                                        <div class="button-card">
                                            <input type="button" name="previous"
                                                   class="previous action-button-previous"
                                                   value="السابق" />
                                            <img src="~/BranchSys/CreateContract/Vector.png" alt="Button Image"
                                                 class="previous action-button-previous"
                                                 style="vertical-align: middle; margin-right: 10px;">
                                        </div>
                                    </div>
                                </fieldset>
                                <!--CheckUP-->
                                <fieldset>
                                    <div class="form-card">
                                        <div class="row">
                                            <div class="col-md-8">
                                                <div class="row CurrentReadingg_row"
                                                     style="flex-direction: row-reverse;align-items: baseline;">
                                                    <div class="col-auto">
                                                        <label id="CurrentReadingg"
                                                               for="CurrentReadingg-input">
                                                            @localizer["CurrentMeter"]
                                                        </label>
                                                    </div>
                                                    <div class="col-auto">
                                                        <input type="tel" class="form-control1" style="width: 130px;" asp-for="Contract.CurrentMeter" required maxlength="7">
                                                        <div class="row requird-field-row">
                                                            <span class="requird-field" id="requird_field_CurrentMeter"></span>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="upload__box d-flex">
                                                    <div class="upload_img-wrap_inner" style="display: flex;flex-wrap: wrap;gap: 10px ">
                                                        <div class="upload__img-box" id="upload-img1">
                                                        </div>
                                                        <div class="upload__btn-box">
                                                            <label class="upload__btn">
                                                                <div class="upload-container-checking">
                                                                    <img class="upload-icon" src="~/BranchSys/CreateContract/Group (1).png" alt="Upload Icon">
                                                                    <input type="file" multiple accept="image/*" data-max_length="20" id="checking-img" class="upload__inputfile " onclick="HideFirstImg()">
                                                                </div>
                                                            </label>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <p style="color: red;" id="checkUpMessageRequired">

                                                    </p>
                                                </div>

                                            </div>

                                            <div class="col-md-4">
                                                <div class="table-scroll">
                                                    <table class="table table-bordered  table-hover">
                                                        <thead>
                                                            <tr>
                                                                <th scope="col"
                                                                    class="value-tabel-header">
                                                                    @localizer["reasons"]
                                                                </th>
                                                                <th scope="col"
                                                                    style='border-left: 1px solid #ff9626a3; '>
                                                                    @localizer["CheckUpNames"]
                                                                </th>

                                                            </tr>
                                                        </thead>
                                                        <tbody id="CheckBody">
                                                            <partial name="_CheckUpList" />
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </div>

                                        </div>
                                    </div>
                                    <div class="row button-row"
                                         style=" justify-content: space-between;">
                                        <div class="button-card">
                                            <img src="~/BranchSys/CreateContract/Group.png" alt="Button Image"
                                                 class="next action-button"
                                                 style="vertical-align: middle; margin-right: 10px;">
                                            <input type="button" name="next" class="next action-button"
                                                   value="@localizer["Next"]" />
                                        </div>
                                        <div class="button-card">
                                            <input type="button" name="previous"
                                                   class="previous action-button-previous"
                                                   value="@localizer["Previous"]" />
                                            <img src="~/BranchSys/CreateContract/Vector.png" alt="Button Image"
                                                 class="previous action-button-previous"
                                                 style="vertical-align: middle; margin-right: 10px;">
                                        </div>
                                    </div>

                                </fieldset>


                                <fieldset>
                                    <div class="form-card form-card7">
                                        <div class="row flex-row-reverse">
                                            <div class="col-md-6 col-lg-4 d-flex payment-col">
                                                <div class="col-auto">
                                                    <p id="contract-number">@localizer["ContractNo"]</p>
                                                </div>
                                                <div class="col-auto personal-data">
                                                    <input name="ContractNo" id="ContractNo" value="@ViewBag.ContractNo" hidden />
                                                    <p>@ViewBag.ContractNo</p>
                                                </div>
                                            </div>
                                            <div class="col-md-6 col-lg-4 d-flex  payment-col">
                                                <div class="col-auto">
                                                    <p id="start-date">@localizer["StartDate"]</p>
                                                </div>
                                                <div class="col-auto personal-data">
                                                    <p id="StartDate">@ViewBag.StartDate</p>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row flex-row-reverse ">
                                            <div class="col-md-6 col-lg-4 d-flex payment-col align-items-baseline">
                                                <div class="col-auto">
                                                    <label id="days-number" for="days-number-input">
                                                        @localizer["DaysNo"]
                                                    </label>
                                                </div>
                                                <div class="col-auto">
                                                    <input type="text" class="form-control1" asp-for="Contract.DaysNo" id="dayNo" oninput="this.value=this.value.replace(/[^0-9]/g,'');if(parseInt(this.value)> 365) this.value = '365';" onfocusout="CalculateContract()" maxlength="3" autocomplete="off" autofocus required>                                                <div class="row requird-field-row-last">
                                                        <span class="requird-field" id="requird_field_DaysNo" asp-validation-for="@Model.Contract.DaysNo"></span>
                                                    </div>
                                                </div>

                                            </div>
                                            <div class="col-md-6 col-lg-4 d-flex  payment-col">
                                                <div class="col-auto">
                                                    <p id="end-date">@localizer["EndDate"]</p>

                                                </div>
                                                <div class="col-auto personal-data">
                                                    <p id="EndDate"> </p>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row flex-row-reverse align-items-baseline">
                                            <div class="col-md-6 col-lg-4 d-flex payment-col align-items-baseline">
                                                <div class="col-auto">
                                                    <p id="renting-price"> @localizer["ContractValue"]</p>
                                                    <input hidden asp-for="Contract.ContractValueBeforeDiscount" />
                                                </div>
                                                <div class="col-auto personal-data">
                                                    <p id="contractValue">0.00</p>
                                                </div>
                                                <div class="col-auto">
                                                    <img src="~/BranchSys/CreateContract/img/seacrh-icon.png" alt="icon button to display more data" id="payment-extra-details">
                                                    <div class="dropdown-content payment-dropdown-content" id="dropdown-content-payment">
                                                        <div class="title-container">
                                                            <img src="~/BranchSys/CreateContract/img/cancel.png" alt="cancle_icon" class="cancle-icon-dropdowen" id="close">
                                                            <p style="display: inline;">تفاصيل قيمة العقد</p>

                                                        </div>
                                                        <div class="data-container">
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-auto ">
                                                                    <p>: @localizer["RentalValue"]</p>
                                                                </div>
                                                                <div class="col personal-data-dropdown">
                                                                    <p id="RentValue">0</p>
                                                                </div>

                                                            </div>
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-auto ">
                                                                    <p>: @localizer["AdvantagesValue"] </p>
                                                                </div>
                                                                <div class="col personal-data-dropdown">
                                                                    <p id="AdvatagesValue">0</p>
                                                                    <input hidden asp-for="Contract.AdvantagesTotalValue" />
                                                                </div>

                                                            </div>
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-auto ">
                                                                    <p>: @localizer["ChoicesValue"] </p>
                                                                </div>
                                                                <div class="col personal-data-dropdown">
                                                                    <p id="ChoicesValue">0</p>
                                                                </div>

                                                            </div>
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-auto ">
                                                                    <p>:@localizer["AdditionalValue"] </p>
                                                                </div>
                                                                <div class="col personal-data-dropdown">
                                                                    <p id="AdditionalValue">0</p>
                                                                </div>

                                                            </div>
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-auto ">
                                                                    <p>: @localizer["AddDriverValue"] </p>
                                                                </div>
                                                                <div class="col personal-data-dropdown">
                                                                    <p id="AddDriverValue">0</p>
                                                                </div>

                                                            </div>
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-auto ">
                                                                    <p>: @localizer["PrivateDriverValue"]</p>
                                                                </div>
                                                                <div class="col personal-data-dropdown">
                                                                    <p id="PrivateDriverValue">0</p>
                                                                </div>
                                                            </div>
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-auto ">
                                                                    <p>: @localizer["DelegationValue"]</p>
                                                                </div>
                                                                <div class="col personal-data-dropdown">
                                                                    <p id="InFeesTammValue">0</p>
                                                                    <input hidden asp-for="Contract.FeesTmmValue" />
                                                                </div>

                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>

                                            </div>
                                            <div class="col-md-6 col-lg-4 d-flex  payment-col ">
                                                <div class="col-auto personal-data">
                                                    <input class="Delegate-out-input" type="checkbox" name="Contract_OutFeesTmm" id="Delegate-out" value="checked">
                                                    <input hidden asp-for="Contract.OutFeesTmm" />
                                                </div>
                                                <div class="col-auto">
                                                    <label class="Delegate-out-label" for="Delegate-out" name="Delegate-out">
                                                        @localizer["ExternalDelegation"]
                                                    </label>
                                                </div>

                                            </div>
                                        </div>
                                        <div class="row flex-row-reverse align-items-baseline">
                                            <div class="col-md-6 col-lg-4 d-flex payment-col align-items-baseline">

                                                <div class="col-auto">
                                                    <label id="discount-percentage" for="discount-percentage-input">@localizer["DiscountRate"]</label>
                                                </div>
                                                <div class="col-auto">
                                                    <input type="text" class="form-control1" asp-for="Contract.UserDiscount" id="Discount_Input" oninput="handleDiscountInput(this)" onfocusout="CalculateDiscount()" min="0" max="100" value="0" maxlength="5" autocomplete="off">
                                                    <input hidden asp-for="Contract.DiscountValue" />
                                                    <div class="row requird-field-row-last">
                                                        <p class="requird_field_Discount"></p>
                                                    </div>
                                                </div>

                                            </div>
                                            <div class="col-md-6 col-lg-4 d-flex  payment-col align-items-baseline">
                                                <div class="col-auto">
                                                    <label id="addational-hours" for="AdditionalHours"> @localizer["AdditionalHours"] </label>
                                                </div>
                                                <div class="col-auto">
                                                    <input type="tel" class="form-control1" asp-for="Contract.UserAddHours" id="AdditionalHours" maxlength="2" oninput="handleAdditionalHoursInput(this)" min="0" max="99" value="0" autocomplete="off">
                                                    <div class="row requird-field-row-last">
                                                        <p class="requird-field"></p>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-6 col-lg-4 d-flex  payment-col align-items-baseline">
                                                <div class="col-auto">
                                                    <label id="addational-kilos"
                                                           for="AdditionalKilos">
                                                        @localizer["AdditionalKm"]
                                                    </label>
                                                </div>
                                                <div class="col-auto">
                                                    <input type="tel" class="form-control1" asp-for="Contract.UserAddKm" id="AdditionalKilos" maxlength="3" oninput="handleAdditionalKilosInput(this)" min="0" max="999" value="0" autocomplete="off">
                                                    <div class="row requird-field-row-last">
                                                        <p class="requird-field"></p>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row flex-row-reverse">
                                            <div class="col-md-6 col-lg-4 d-flex payment-col">
                                                <div class="col-auto">
                                                    <p id="Total contract">@localizer["TotalContract"]</p>
                                                </div>
                                                <div class="col-auto personal-data">
                                                    <p id="totalContract">0.00</p>
                                                    <input hidden asp-for="Contract.ContractValueAfterDiscount" />
                                                </div>
                                            </div>
                                            <div class="col-md-6 col-lg-4 d-flex  payment-col">
                                                <div class="col-auto">
                                                    <p id="Tax-value"> @localizer["TaxValue"]</p>
                                                </div>
                                                <div class="col-auto personal-data">
                                                    <p id="Taxvalue">0.00</p>
                                                    <input hidden asp-for="Contract.TaxValue" />
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row flex-row-reverse">
                                            <div class="col-md-6 col-lg-4 d-flex payment-col">
                                                <div class="col-auto">
                                                    <p id="Total_Contract"> @localizer["NetContract"]</p>
                                                </div>
                                                <div class="col-auto personal-data">
                                                    <p id="TotalActualContract">0</p>
                                                    <input hidden asp-for="Contract.TotalContractAmount" />
                                                </div>
                                            </div>
                                            <div class="col-md-6 col-lg-4 d-flex  payment-col">
                                                <div class="col-auto">
                                                    <p id="previous-balance"> @localizer["PreviousBalance"]</p>
                                                </div>
                                                <div class="col-auto personal-data">
                                                    <p id="Balance">0.00</p>

                                                </div>
                                            </div>
                                            <div class="col-md-6 col-lg-4 d-flex  payment-col">
                                                <div class="col-auto">
                                                    <p id="price"> @localizer["AmountRequired"]</p>
                                                </div>
                                                <div class="col-auto personal-data">
                                                    <p id="TotalAmount">0.00</p>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row flex-row-reverse">
                                            <div class="col-md-6 col-lg-4 d-flex payment-col">
                                                <div class="col-auto">
                                                    <label id="amount-paid" for="AmountPayed">@localizer["AmountPaid"]</label>
                                                </div>
                                                <div class="col-auto personal-data">
                                                    <input type="text" class="form-control1" asp-for="Contract.AmountPayed" style="width: 110px!important" id="AmountPayed" oninput="handleAmountPayed(this)" autocomplete="off" readonly>
                                                    <div class="row requird-field-row-last">
                                                        <p class="requird_field_AmountPayed"></p>
                                                    </div>
                                                </div>
                                            </div>
                                            @{
                                                if (Model?.AccountBanks?.FindAll(x => x.CrCasAccountBankNo != "00").Count() == 0)
                                                {
                                                    Model.PaymentMethods = Model?.PaymentMethods?.FindAll(x => x.CrMasSupAccountPaymentMethodClassification == "1");
                                                }
                                                else if (Model?.AccountBanks?.FindAll(x => x.CrCasAccountBankNo != "00").Count() > 0 && Model?.SalesPoint?.FindAll(x => x.CrCasAccountSalesPointBank != "00").Count() == 0)
                                                {
                                                    Model.PaymentMethods = Model?.PaymentMethods?.FindAll(x => x.CrMasSupAccountPaymentMethodClassification == "3" || x.CrMasSupAccountPaymentMethodClassification == "1");
                                                }
                                                else if (Model?.AccountBanks?.FindAll(x => x.CrCasAccountBankNo != "00").Count() > 0 && Model?.SalesPoint?.FindAll(x => x.CrCasAccountSalesPointBank != "00").Count() > 0)
                                                {
                                                    Model.PaymentMethods = Model?.PaymentMethods?.FindAll(x => x.CrMasSupAccountPaymentMethodClassification == "2" || x.CrMasSupAccountPaymentMethodClassification == "3" || x.CrMasSupAccountPaymentMethodClassification == "1");
                                                }
                                            }
                                            <div class="col-md-6 col-lg-4 d-flex  payment-col">
                                                <div class="col-auto">
                                                    <p id="payment-method">@localizer["PaymentMethod"]</p>
                                                </div>
                                                <div class="col-auto personal-data">
                                                    <div class="offset">
                                                        <select class="form-select-last" asp-for="Contract.PaymentMethod" style="font-size:14px;" disabled>
                                                            <option selected disabled></option>
                                                            @foreach (var payment in Model.PaymentMethods)
                                                            {
                                                                @if ("@requestCulture?.RequestCulture.UICulture.Name" != "en-US")
                                                                {
                                                                    <option value="@payment.CrMasSupAccountPaymentMethodCode" class="text-right">@payment.CrMasSupAccountPaymentMethodArName</option>
                                                                }
                                                                else
                                                                {
                                                                    <option value="@payment.CrMasSupAccountPaymentMethodCode">@payment.CrMasSupAccountPaymentMethodEnName</option>
                                                                }
                                                            }
                                                        </select>
                                                    </div>
                                                    <span class="requird-field" id="requird_field_PaymentMethod" asp-validation-for="@Model.Contract.PaymentMethod"></span>
                                                </div>
                                            </div>
                                            <div class="col-md-6 col-lg-4 d-flex  payment-col">
                                                <div class="col-auto">
                                                    <p id="selling-point"> @localizer["SalesPoint"] </p>
                                                </div>
                                                <div class="col-auto personal-data">
                                                    <div class="offset">
                                                        <select class="form-select-last" asp-for="Contract.SalesPoint" style="font-size:14px;width:240px!important" disabled>
                                                        </select>
                                                    </div>
                                                    <span class="requird-field" id="requird_field_SalesPoint" asp-validation-for="@Model.Contract.SalesPoint"></span>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row p-2 row-step1 ">
                                            <div class="col-auto">
                                                <p id="notes">@localizer["reasons"]</p>
                                            </div>
                                            <div class="col-sm-7 col-md-7 col-lg-7">
                                                <textarea class="form-control text-right" id="FormControl-last-Textarea" asp-for="Contract.PaymentReasons" rows="1" maxlength="100"></textarea>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row button-row align-items-center"
                                         style="padding: 6px 7px 0px 20px;">
                                        <div class="button-card  gap-2">
                                            <input id="submitForm" type="button" class=" check-btn payment-button" value="@localizer["Save"]">
                                            @*                                         <button type="submit" class=" check-btn payment-button">@localizer["Save"]</button>
                                            *@                                        <button type="button" class=" check-btn payment-button"
                                                                                              data-bs-toggle="modal" href="#paymentPopupModal">
                                                @localizer["Delegation"]
                                            </button>
                                            <button type="button" class=" check-btn payment-button"
                                                    data-bs-toggle="modal" href="#signaturePopupModal">
                                                @localizer["SignatureTenant"]
                                            </button>
                                        </div>
                                        <div class="button-card">
                                            <input type="button" name="previous" class="previous action-button-previous" value="@localizer["Previous"]" />
                                            <img src="~/BranchSys/CreateContract/img/vector.png" alt="Button Image" class="previous action-button-previous" style="vertical-align: middle; margin-right: 10px;">
                                        </div>
                                    </div>

                                </fieldset>
                            </form>
                        </div>
                    </div>
                </div>
                <!-- Renter -->
                <div class="modal fade" id="checkModalToggle" aria-hidden="true" aria-labelledby="checkModalToggleLabel" tabindex="-1" data-bs-backdrop="static" data-bs-keyboard="false">
                    <div class="modal-dialog modal-dialog-centered">
                        <div class="modal-content">
                            <div class="modal-header text-center">
                                <p class="modal-title w-100">
                                    رمز التحقق تنتهي صلاحيته بعد <span id="RenterTimerDiv">01:30</span>
                                </p>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>

                            </div>
                            <div class="modal-body">
                                <form class="otc" name="one-time-code" id="otc">
                                    <legend>
                                        @localizer["PleaseShowMobile"]<p id="MobileNumber"></p>
                                    </legend>
                                    <div>
                                        <input type="number" pattern="[0-9]*" value=""
                                               inputtype="numeric" autocomplete="one-time-code" id="otc1"
                                               name="otc1" required>
                                        <!-- Autocomplete not to put on other input -->
                                        <input type="number" pattern="[0-9]*" min="0" max="9"
                                               maxlength="1" value="" inputtype="numeric" id="otc2"
                                               name="otc2" required>
                                        <input type="number" pattern="[0-9]*" min="0" max="9"
                                               maxlength="1" value="" inputtype="numeric" id="otc3"
                                               name="otc3" required>
                                        <input type="number" pattern="[0-9]*" min="0" max="9"
                                               maxlength="1" value="" inputtype="numeric" id="otc4"
                                               name="otc4" required>
                                        <input type="number" pattern="[0-9]*" min="0" max="9"
                                               maxlength="1" value="" inputtype="numeric" id="otc5"
                                               name="otc5" required>
                                        <input type="number" pattern="[0-9]*" min="0" max="9"
                                               maxlength="1" value="" inputtype="numeric" id="otc6"
                                               name="otc6" required>
                                    </div>
                                    <p style="color: red;" id="WrongCodeMessage"></p>
                                    <button type="button" class=" check-btn ModalButtons resend">
                                        @localizer["SendAnotherCode"]
                                    </button>

                                    <button type="submit" class="check-btn check">
                                        @localizer["Submit"]
                                    </button>

                                </form>

                            </div>

                        </div>
                    </div>
                </div>
                <!-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
                <!-- Driver -->
                <div class="modal fade" id="checkModalToggleDriver" aria-hidden="true" aria-labelledby="checkModalToggleLabel" tabindex="-1" data-bs-backdrop="static" data-bs-keyboard="false">
                    <div class="modal-dialog modal-dialog-centered">
                        <div class="modal-content">
                            <div class="modal-header text-center">
                                <p class="modal-title w-100">
                                    رمز التحقق تنتهي صلاحيته بعد <span id="DriverTimerDiv">01:30</span>
                                </p>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <form class="otc" name="one-time-code" id="otc00">
                                    <legend>
                                        @localizer["PleaseShowMobile"]<p id="MobileNumberDriver"></p>
                                    </legend>
                                    <div>
                                        <input type="number" pattern="[0-9]*" value=""
                                               inputtype="numeric" autocomplete="one-time-code" id="otc11"
                                               name="otc11" required>
                                        <!-- Autocomplete not to put on other input -->
                                        <input type="number" pattern="[0-9]*" min="0" max="9"
                                               maxlength="1" value="" inputtype="numeric" id="otc22"
                                               name="otc22" required>
                                        <input type="number" pattern="[0-9]*" min="0" max="9"
                                               maxlength="1" value="" inputtype="numeric" id="otc33"
                                               name="otc33" required>
                                        <input type="number" pattern="[0-9]*" min="0" max="9"
                                               maxlength="1" value="" inputtype="numeric" id="otc44"
                                               name="otc44" required>
                                        <input type="number" pattern="[0-9]*" min="0" max="9"
                                               maxlength="1" value="" inputtype="numeric" id="otc55"
                                               name="otc55" required>
                                        <input type="number" pattern="[0-9]*" min="0" max="9"
                                               maxlength="1" value="" inputtype="numeric" id="otc66"
                                               name="otc66" required>
                                    </div>
                                    <p style="color: red;" id="WrongCodeMessageDriver"></p>
                                    <button type="button"
                                            class=" check-btn ModalButtons resend">
                                        @localizer["SendAnotherCode"]
                                    </button>

                                    <button type="submit" class="check-btn check">
                                        @localizer["Submit"]
                                    </button>

                                </form>

                            </div>

                        </div>
                    </div>
                </div>
                <!-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
                <!--Additional Driver -->
                <div class="modal fade" id="checkModalToggleAddDriver" aria-hidden="true" aria-labelledby="checkModalToggleLabel" tabindex="-1" data-bs-backdrop="static" data-bs-keyboard="false">
                    <div class="modal-dialog modal-dialog-centered">
                        <div class="modal-content">
                            <div class="modal-header text-center">
                                <p class="modal-title w-100">
                                    رمز التحقق تنتهي صلاحيته بعد <span id="AddDriverTimerDiv"></span>
                                </p>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>

                            </div>
                            <div class="modal-body">
                                <form class="otc" name="one-time-code" id="otc000">
                                    <legend>
                                        @localizer["PleaseShowMobile"]<p id="MobileNumberAddDriver"></p>
                                    </legend>
                                    <div>
                                        <input type="number" pattern="[0-9]*" value=""
                                               inputtype="numeric" autocomplete="one-time-code" id="otc111"
                                               name="otc111" required>
                                        <!-- Autocomplete not to put on other input -->
                                        <input type="number" pattern="[0-9]*" min="0" max="9"
                                               maxlength="1" value="" inputtype="numeric" id="otc222"
                                               name="otc222" required>
                                        <input type="number" pattern="[0-9]*" min="0" max="9"
                                               maxlength="1" value="" inputtype="numeric" id="otc333"
                                               name="otc333" required>
                                        <input type="number" pattern="[0-9]*" min="0" max="9"
                                               maxlength="1" value="" inputtype="numeric" id="otc444"
                                               name="otc444" required>
                                        <input type="number" pattern="[0-9]*" min="0" max="9"
                                               maxlength="1" value="" inputtype="numeric" id="otc555"
                                               name="otc555" required>
                                        <input type="number" pattern="[0-9]*" min="0" max="9"
                                               maxlength="1" value="" inputtype="numeric" id="otc666"
                                               name="otc666" required>
                                    </div>
                                    <p style="color: red;" id="WrongCodeMessageAddDriver"></p>
                                    <button type="button"
                                            class=" check-btn ModalButtons resend">
                                        @localizer["SendAnotherCode"]
                                    </button>

                                    <button type="submit" class="check-btn check">
                                        @localizer["Submit"]
                                    </button>

                                </form>

                            </div>

                        </div>
                    </div>
                </div>
                <!-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
                <div class="modal fade" id="thirdPopupModal" tabindex="-1" data-bs-backdrop="static"
                     aria-labelledby="thirdPopupModalLabel" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered d-flex justify-content-center">
                        <div class="modal-content spinner-modal-content">

                            <div class="modal-body spinner-modal">
                                <svg class="spinner" width="65px" height="65px" viewBox="0 0 66 66"
                                     xmlns="http://www.w3.org/2000/svg">
                                    <circle class="path" fill="none" stroke-width="6"
                                            stroke-linecap="round" cx="33" cy="33" r="30"> </circle>
                                </svg>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
                <div class="modal fade" id="paymentPopupModal" tabindex="-1"
                     aria-labelledby="payPopupModalLabel" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered d-flex justify-content-center">
                        <div class="modal-content authorization-modal-content pt-5">
                            <div class="modal-body authorization">
                                <form id="AuthorizationForm">
                                    <div class="mb-5">

                                        <input type="tel" name="days-number-of-authorization"
                                               class="form-control1" value=""
                                               id="days-number-of-authorization"
                                               style="background-color: rgba(247, 247, 247, 1);" required>
                                        <label for="days-number-of-authorization" style="font-weight: 600;font-size: 15px;
                                                ">عدد ايام التفويض</label>
                                    </div>
                                    <button type="submit" class="check-btn check-btn2 ">
                                        ارسال رمز
                                        التحقق
                                    </button>

                                </form>

                            </div>
                        </div>
                    </div>
                </div>
                <!-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
                <div class="modal fade" id="signaturePopupModal" tabindex="-1"
                     aria-labelledby="signaturePopupModalLabel" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered d-flex justify-content-center">
                        <div class="modal-content signature-modal-content pt-5 pb-5">
                            <div class="modal-body signature">
                                <div style="  display: flex; flex-direction: column ;gap: 30px;">
                                    <button type="button" class="check-btn"
                                            onclick="OpenHandSignPopup()">
                                        باستخدام الجهاز
                                        اللوحي(التابلت)
                                    </button>
                                    <button type="button" class="check-btn"
                                            onclick="OpenPicSignPopup()">
                                        رفع صورة التوقيع
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
                <div class="modal fade" id="handsignatureModal" tabindex="-1"
                     aria-labelledby="handsignaturPopupModalLabel" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered d-flex justify-content-center">
                        <div class="modal-content handsignature-modal-content pt-5 pb-5">
                            <div class="modal-body handsignature">
                                <canvas id="canvas" width="200" height="200"></canvas>
                                <br>
                                <!-- <button id="clear">Clear</button> -->
                                <button id="save" class="check-btn" style="width: 200px;">
                                    قبول
                                    التوقيع
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
                <div class="modal fade" id="PicsignatureModal" tabindex="-1"
                     aria-labelledby="PicignaturPopupModalLabel" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered d-flex justify-content-center">
                        <div class="modal-content Picsignature-modal-content pt-5 pb-5">
                            <div class="modal-body Picsignature">
                                <form>
                                    <div class="upload-container">
                                        <img class="upload-icon" src="~/BranchSys/CreateContract/img/Rectangle 144.png"
                                             alt="Upload Icon">
                                        <p>ارفق صورة التوقيع</p>
                                        <input type="file" id="imageUpload" accept="image/*"
                                               style="display: none;">
                                    </div>
                                    <br>
                                    <button id="image-submit-Btn" class="check-btn"
                                            style="width: 200px;">
                                        قبول التوقيع
                                    </button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
</div>
<footer class="fixed-bottom-xl">
    <div class="before-footer-widget">
        <svg width: 100%; height:auto viewbox="0 0 2444 132">
            <path fill="rgba(254, 248, 232, 1)" fill-rule="evenodd"
                  d="M1222 0h1222c-444.13 88-852.127 132-1223.993 132C849.253 132 442.585 88.263 0 .789V0h1222z">
            </path>
        </svg>
    </div>
</footer>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <!--makes bootsrab animation works-->
    @*     <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
     *@    <script src="https://cdn.jsdelivr.net/npm/@@popperjs/core@2.9.2/dist/umd/popper.min.js"
                       integrity="sha384-IQsoLXl5PILFhosVNubq5LC7Qb9DXgDA9i+tQ8Zj3iwWAwPtgFTxbJ8NT4GN1R8p"
                       crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.min.js"
            integrity="sha384-cVKIPhGWiC2Al4u+LWgxfKTRIcfu0JTxR+EQDz/bgldoEyl4H0zUF0QKbrJ0EcQF"
            crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js"></script>
    <script src="~/BranchSys/CreateContract/contract.js"></script>
    <script src="~/BranchSys/CreateContract/contract2.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.3/jspdf.umd.min.js"></script>

    <script>


        // //////////////////////choose-adriver-display////////////////
        document.addEventListener("DOMContentLoaded", function () {
            $(".seacrh_icon_Renter").hide();
            $("#seacrh_icon_Driver").hide();
            $("#seacrh_icon_AddDriver").hide();
            $("#PrivateDriverDiv").hide();
            $("#RenterIsdriverDiv").hide();
            // Check if have driver or not
            var driverRadio1 = document.getElementById("RenterIsdriver");
            var driverRadio2 = document.getElementById("PrivateDriver");
            var dropdownContainer = document.getElementById("dropdown-container");

            driverRadio1.addEventListener("click", function () {
                dropdownContainer.style.display = "none";
                driverRadio2.checked = false;
                $('#driver-dropdown option:first').prop('selected', true);
            });

            driverRadio2.addEventListener("click", function () {
                if (this.checked) {
                    dropdownContainer.style.display = "block";
                    driverRadio1.checked = false;
                } else {
                    dropdownContainer.style.display = "none";
                }
            });
        });

    </script>
    <script>
        var CheckIfRenterIdExist = false;
        var CheckIfDriverIdExist = false;
        var CheckIfAddDriverIdExist = false;
        var RenterInformation;
        var DriverInformation;
        var AddDriverInformation;
        var SerialNumberOfCar;
        var PriceNumberOfCar;
        var CarInformation;
        var CarChoices;
        var CarAdditionals;
        var CarCheckUp;
        var AdvantagesValue;
        var RenterBalance;

        // For Renter
        async function GetRenterInformation(RenterId) {
            try {
                var data = await $.ajax({
                    url: "/BS/Contract/GetRenter",
                    type: "GET",
                    data: { RenterId: RenterId },
                });

                RenterInformation = data;
                console.log(data);
                if (data != null) {
                    return true; // Renter exists
                }
            } catch (error) {
                toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                toastr.error('@localizer["SomethingWrongPleaseCallAdmin"]');
                return false; // Error occurred or Renter doesn't exist
            }
            return false; // Renter doesn't exist
        }
        //Restart All informations
        $(document).ready(function () {
            var initialRenterID = $('#Contract_RenterId').val();
            $('#Contract_RenterId').on('change', function () {
                // Check if the value has changed
                if ($(this).val() !== initialRenterID) {
                    // Clear previous data and style
                    $("#RenterAddress").text('').css("color", "");
                    $("#RenterEmail").text('').css("color", "");
                    $("#requird_field_Birthdate").text('').css("color", "");
                    $("#RenterName").text('');
                    $("#birth-date-step1").val('');
                    document.getElementById("PrivateDriver").checked = false;
                    document.getElementById("RenterIsdriver").checked = false;
                    document.getElementById("dropdown-container").style.display = "none";
                    $("#PrivateDriverDiv").hide();
                    $("#RenterIsdriverDiv").hide();
                    var CheckIfRenterIdExist = false;
                    var CheckIfDriverIdExist = false;
                    var CheckIfAddDriverIdExist = false;
                    var RenterInformation = null;
                    var DriverInformation = null;
                    var AddDriverInformation = null;
                    clearPaymentData();
                    // Update the initial value of RenterID
                    initialRenterID = $(this).val();
                }
            });
        });
        // Example usage
        var randomNumberRenter;
        var randomNumberDriver;
        var randomNumberAddDriver;
        function generateRandomNumber() {
            // Generate a random number between 0 and 999999
            const randomNumber = Math.floor(Math.random() * 1000000);
            // Convert it to a string and pad with zeros to ensure length is 6
            return randomNumber.toString().padStart(6, '0');
        }
        // Function to send a message to WhatsApp
        async function sendMessageToWhatsApp(randomNumber, numberPhone) {
            const toNumber = numberPhone; // The recipient's phone number
            const fromNumber = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJudW1iZXIiOiJKYXNlcjExIiwic2VyaWFsIjoiMTk5ZmUzYjFlYjc2MjNlIiwiaWF0IjoxNzA3NzMxNjI4LCJleHAiOjE3OTQxMzE2Mjh9.O_4RW4vYAays1ZL7D-OlOQh6C5P5xVYrT3pZ2Oi9Yak"; // Your WhatsApp API token
            const messageText = '@localizer["VerificationCode"]' + randomNumber; // The message text with the random code
            const url = `https://business.enjazatik.com/api/v1/send-message?number=${encodeURIComponent(toNumber)}&message=${encodeURIComponent(messageText)}&token=${encodeURIComponent(fromNumber)}`;
            try {
                const response = await fetch(url, { method: 'GET' });
                const result = await response.json();
                console.log("result Whatsup", result); // Log the result of the API call
            } catch (error) {
                console.error('Error sending message:', error);
            }
        }

        //For Renter Modal
        document.addEventListener('DOMContentLoaded', function () {
            var RenterCheckBtn = document.getElementById('RenterCheckBtn');
            var FieldRequiredRenterID = document.getElementById('requird-field_RenterID');
            document.getElementById('otc1').value = '';
            document.getElementById('otc2').value = '';
            document.getElementById('otc3').value = '';
            document.getElementById('otc4').value = '';
            document.getElementById('otc5').value = '';
            document.getElementById('otc6').value = '';
            RenterCheckBtn.addEventListener('click', async function () {
                var RenterID = $('#Contract_RenterId').val();
                if ($("#msform").valid()) {
                    CheckIfRenterIdExist = await GetRenterInformation(RenterID);
                    if (CheckIfRenterIdExist) {
                        $('#checkModalToggle').modal('show');
                        setTimeout(function () { $('#otc1').focus(); }, 500);
                        // get mobile number
                        var countryKey = RenterInformation.keyCountry;
                        var mobileNumber = RenterInformation.mobileNumber;
                        // Extract the last three digits of the mobile number
                        var lastThreeDigits = mobileNumber.slice(-3);
                        // Display the result as: +966 ######369
                        var formattedMobileNumber = "+" + countryKey + " " + "########" + lastThreeDigits;
                        $("#MobileNumber").text(formattedMobileNumber);
                        // Send the message to WhatsApp
                        // Phone number For test
                        randomNumberRenter = generateRandomNumber();
                        console.log("randomNumber", randomNumberRenter);
                        var phoneNumber = '@user.CrMasUserInformationCallingKey' + '@user.CrMasUserInformationMobileNo';
                        console.log("phoneNumber", phoneNumber);
                        await sendMessageToWhatsApp(randomNumberRenter, phoneNumber);
                    } else {
                        $('#requird-field_RenterID').text('@localizer["RenterIdWrong"]');
                    }
                }
            });
        });
        // Modal Submit Code from Mobile
        ///////////////////////////////////////////////the-Modal-6-digit-vaildation/////////////////////
        function openThirdPopup() {
            // Clear previous data and style
            $("#RenterAddress").text('').css("color", "");
            $("#RenterEmail").text('').css("color", "");
            $("#requird_field_Birthdate").text('').css("color", "");
            $("#RenterName").text('');
            $("#birth-date-step1").val('');
            ////////////////////////////////
            $('#checkModalToggle').modal('hide');
            $('#thirdPopupModal').modal('show');
            $('#WrongCodeMessage').text('');
            setTimeout(function () {
                $('#thirdPopupModal').modal('hide');
                console.log(RenterInformation);
                var firstCharacterFromID = RenterInformation.renterID.charAt(0);
                var currentDate = new Date();
                var ExpiryIdDate = new Date(RenterInformation.expiryIdDate);
                var driverCount = "@Model.Drivers.Count()";

                // Assuming RenterInformation is an object with properties lastVisit and lastContract
                var lastVisitDate = new Date(RenterInformation.lastVisit);
                var lastContractDate = new Date(RenterInformation.lastContract);

                // Format the dates as "yyyy/MM/dd"
                var formattedLastVisit = lastVisitDate.getFullYear() + '/' + (lastVisitDate.getMonth() + 1).toString().padStart(2, '0') + '/' + lastVisitDate.getDate().toString().padStart(2, '0');
                var formattedLastContract = lastContractDate.getFullYear() + '/' + (lastContractDate.getMonth() + 1).toString().padStart(2, '0') + '/' + lastContractDate.getDate().toString().padStart(2, '0');

                setTimeout(function () {
                    var birthdate = RenterInformation.birthDate.split('T')[0];
                    if ("@requestCulture?.RequestCulture.UICulture.Name" == "en-US") {
                        if (RenterInformation.postEnNameConcenate != "" && RenterInformation.postEnNameConcenate != null && RenterInformation.postEnNameConcenate != undefined) {
                            $("#RenterAddress").text(RenterInformation.postEnNameConcenate);
                        }
                        else {
                            $("#RenterAddress").text('@localizer["notfound"]').css("color", "red");
                        }
                        if (RenterInformation.personalEmail != "" && RenterInformation.personalEmail != null && RenterInformation.personalEmail != undefined) {
                            $("#RenterEmail").text(RenterInformation.personalEmail);
                        }
                        else {
                            $("#RenterEmail").text('@localizer["notfound"]').css("color", "red");
                        }
                        if (ExpiryIdDate < currentDate) {
                            $("#requird_field_Birthdate").text('@localizer["IdIsExpire"]').css("color", "red");
                        }
                        if (firstCharacterFromID !== "7") {
                            $("#RenterIsdriverDiv").show();
                        }
                        if (parseInt(driverCount) > 0) {
                            $("#PrivateDriverDiv").show();
                        }
                        $("#RenterName").text(RenterInformation.personalEnName);



                        if (RenterInformation.countContracts > 0) {
                            $(".seacrh_icon_Renter").show();

                            $("#DealingMechanism").text(RenterInformation.enDealingMechanism);
                            $("#Membership").text(RenterInformation.enMembership);
                            $("#lastVisit").text(formattedLastVisit);
                            $("#LastContract").text(formattedLastContract);
                            $("#ContractCountt").text(RenterInformation.countContracts);
                            $("#RentalDays").text(RenterInformation.rentalDays);
                            $("#KMCut").text(RenterInformation.kMCut);
                            $("#AmountsTraded").text(RenterInformation.amountsTraded.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
                            $("#BalanceRenter").text(RenterInformation.balance.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
                            $("#Evaluation").text(RenterInformation.evaluation.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
                        }

                        $("#birth-date-step1").val(birthdate);

                    }
                    else {

                        if (RenterInformation.postArNameConcenate != "" && RenterInformation.postArNameConcenate != null && RenterInformation.postArNameConcenate != undefined) {
                            $("#RenterAddress").text(RenterInformation.postArNameConcenate);
                        }
                        else {
                            $("#RenterAddress").text('@localizer["notfound"]').css("color", "red");
                        }
                        if (RenterInformation.personalEmail != "" && RenterInformation.personalEmail != null && RenterInformation.personalEmail != undefined) {
                            $("#RenterEmail").text(RenterInformation.personalEmail);
                        }
                        else {
                            $("#RenterEmail").text('@localizer["notfound"]');
                        }
                        if (ExpiryIdDate < currentDate) {
                            $("#requird_field_Birthdate").text('@localizer["IdIsExpire"]').css("color", "red");
                        }
                        if (firstCharacterFromID !== "7") {
                            $("#RenterIsdriverDiv").show();
                        }
                        if (parseInt(driverCount) > 0) {
                            $("#PrivateDriverDiv").show();
                        }
                        $("#RenterName").text(RenterInformation.personalArName);

                        if (RenterInformation.countContracts > 0) {
                            $(".seacrh_icon_Renter").show();

                            $("#DealingMechanism").text(RenterInformation.arDealingMechanism);
                            $("#Membership").text(RenterInformation.arMembership);
                            $("#lastVisit").text(formattedLastVisit);
                            $("#LastContract").text(formattedLastContract);
                            $("#ContractCountt").text(RenterInformation.countContracts);
                            $("#RentalDays").text(RenterInformation.rentalDays);
                            $("#KMCut").text(RenterInformation.kMCut);
                            $("#AmountsTraded").text(RenterInformation.amountsTraded.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
                            $("#BalanceRenter").text(RenterInformation.balance.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
                            $("#Evaluation").text(RenterInformation.evaluation.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
                        }

                        $("#birth-date-step1").val(birthdate);
                    }
                }, 1000);
            }, 1000); // Adjust the duration as needed (in milliseconds)
        }
        document.addEventListener('DOMContentLoaded', function () {
            document.querySelector('#otc').addEventListener('submit', function (event) {
                event.preventDefault();
                var inputFieldValue = document.getElementById('otc1');
                var numericValue = parseInt(inputFieldValue.value);

                if (isNaN(numericValue)) {
                    // Input value is not a number or is empty
                    console.log('Input value:', numericValue);
                    return;
                }
                // Gather values from input fields
                var otc1 = $("#otc1").val();
                var otc2 = $("#otc2").val();
                var otc3 = $("#otc3").val();
                var otc4 = $("#otc4").val();
                var otc5 = $("#otc5").val();
                var otc6 = $("#otc6").val();

                // Concatenate values into a single string
                var concatenatedCode = otc1 + otc2 + otc3 + otc4 + otc5 + otc6;
                console.log('Input value:', concatenatedCode);
                if (concatenatedCode === randomNumberRenter || concatenatedCode === '111111') {
                    openThirdPopup();
                }
                else {
                    $('#WrongCodeMessage').text('الرمز المدخل غير صحيح');
                }
                document.getElementById('otc1').value = '';
                document.getElementById('otc2').value = '';
                document.getElementById('otc3').value = '';
                document.getElementById('otc4').value = '';
                document.getElementById('otc5').value = '';
                document.getElementById('otc6').value = '';
            });
        });

        var interval1;
        function TimerFunctionRenter(reset) {
            if (reset || !interval1) {
                if (interval1) {
                    clearInterval(interval1);
                }

                var display = document.querySelector('#RenterTimerDiv');
                var timer = 90, minutes, seconds;

                interval1 = setInterval(function () {
                    minutes = parseInt(timer / 60, 10);
                    seconds = parseInt(timer % 60, 10);

                    minutes = minutes < 10 ? "0" + minutes : minutes;
                    seconds = seconds < 10 ? "0" + seconds : seconds;

                    display.textContent = minutes + ":" + seconds;

                    if (--timer < 0) {
                        timer = 0;
                        clearInterval(interval1);
                        $('#checkModalToggle').modal('hide');
                        $('#WrongCodeMessage').text('');
                    }
                }, 1000);
            }
        }



        // For Driver///////////////////////
        async function GetDriverInformation(DriverId) {
            try {
                var data = await $.ajax({
                    url: "/BS/Contract/GetRenter",
                    type: "GET",
                    data: { RenterId: DriverId },
                });

                DriverInformation = data;
                console.log("data", data)
                console.log("DriverInformation", DriverInformation)
                if (data != null) {
                    return true; // Renter exists
                }
            } catch (error) {
                toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                toastr.error('@localizer["SomethingWrongPleaseCallAdmin"]');
                return false; // Error occurred or Renter doesn't exist
            }
            return false; // Renter doesn't exist
        }
        $(document).ready(function () {
            // Store the initial value of RenterID
            var initialDriver = $('#Contract_DriverId').val();
            // Event handler for the change event on #Contract_RenterId
            $('#Contract_DriverId').on('change', function () {
                // Check if the value has changed
                if ($(this).val() !== initialDriver) {
                    // Clear previous data and style
                    $("#requird_field_Birthdate_driver").text('').css("color", "");
                    $("#birth-date-driver").val(null);
                    $("#DriverAddress").text("");
                    $("#DriverEmail").text("");
                    $("#DriverName").text("");
                    $("#DriverNationality").text("");
                    $("#DriverGender").text("");
                    $("#DriverProffessions").text("");
                    $("#DriverLicenseType").text("");
                    $("#DriverLicenseIssued").text("");
                    $("#DriverLicenseExpiration").text("");
                    $("#DriverLicenseExpirationMessage").text("").css("color", "");
                    $("#DriverEmployer").text("");
                    CheckIfDriverIdExist = false;
                    DriverInformation = null;
                    AddDriverInformation = null;
                    clearDataAddDriver();
                    // Update the initial value of RenterID
                    initialDriver = $(this).val();
                }
            });
        });
        //For Renter Modal
        document.addEventListener('DOMContentLoaded', function () {
            var DriverCheckBtn = document.getElementById('DriverCheckBtn');
            DriverCheckBtn.addEventListener('click', async function () {
                var DriverId = $('#Contract_DriverId').val();
                var RenterId = $('#Contract_RenterId').val();
                if ($("#msform").valid()) {
                    CheckIfDriverIdExist = await GetDriverInformation(DriverId);
                    console.log(DriverInformation)
                    console.log(CheckIfDriverIdExist)
                    //Check Renter ID Is Not the same ID Driver
                    if (CheckIfDriverIdExist) {
                        if (DriverId != RenterId) {
                            $('#checkModalToggleDriver').modal('show');
                            setTimeout(function () { $('#otc11').focus(); }, 500);

                            // get mobile number
                            var countryKey = DriverInformation.keyCountry;
                            var mobileNumber = DriverInformation.mobileNumber;
                            // Extract the last three digits of the mobile number
                            var lastThreeDigits = mobileNumber.slice(-3);
                            // Display the result as: +966 ######369
                            var formattedMobileNumber = "+" + countryKey + " " + "########" + lastThreeDigits;
                            $("#MobileNumberDriver").text(formattedMobileNumber);
                            // Send the message to WhatsApp
                            // Phone number For test
                            randomNumberDriver = generateRandomNumber();
                            console.log("randomNumberDriver", randomNumberDriver);
                            var phoneNumber = '@user.CrMasUserInformationCallingKey' + '@user.CrMasUserInformationMobileNo';
                            console.log("phoneNumber", phoneNumber);
                            await sendMessageToWhatsApp(randomNumberDriver, phoneNumber);
                        }
                        else {
                            $('#requird_field_DriverID').text('@localizer["DriverIdExistRenter"]');
                        }

                    } else {
                        $('#requird_field_DriverID').text('@localizer["RenterIdWrong"]');
                    }
                }
            });
        });
        // Modal Submit Code from Mobile
        ///////////////////////////////////////////////the-Modal-6-digit-vaildation///////////////////
        function openThirdPopupDriver() {
            var currentDate = new Date();
            var ExpiryIdDate = new Date(DriverInformation.expiryIdDate);
            $('#checkModalToggleDriver').modal('hide');
            $('#thirdPopupModal').modal('show');
            setTimeout(function () {
                $('#thirdPopupModal').modal('hide');

                console.log(DriverInformation);

                 // Assuming RenterInformation is an object with properties lastVisit and lastContract
                var lastVisitDate = new Date(DriverInformation.lastVisit);
                var lastContractDate = new Date(DriverInformation.lastContract);

                // Format the dates as "yyyy/MM/dd"
                var formattedLastVisit = lastVisitDate.getFullYear() + '/' + (lastVisitDate.getMonth() + 1).toString().padStart(2, '0') + '/' + lastVisitDate.getDate().toString().padStart(2, '0');
                var formattedLastContract = lastContractDate.getFullYear() + '/' + (lastContractDate.getMonth() + 1).toString().padStart(2, '0') + '/' + lastContractDate.getDate().toString().padStart(2, '0');

                setTimeout(function () {
                    var birthdate = DriverInformation.birthDate ? DriverInformation.birthDate.split('T')[0] : null;
                    var licenseExpiryDate = DriverInformation.licenseExpiryDate ? DriverInformation.licenseExpiryDate.split('T')[0] : null;
                    var licenseIssuedDate = DriverInformation.licenseIssuedDate ? DriverInformation.licenseIssuedDate.split('T')[0] : null;
                    if ("@requestCulture?.RequestCulture.UICulture.Name" == "en-US") {
                        if (DriverInformation.postEnNameConcenate != "" && DriverInformation.postEnNameConcenate != null && DriverInformation.postEnNameConcenate != undefined) {
                            $("#DriverAddress").text(DriverInformation.postEnNameConcenate);
                        }
                        else {
                            $("#DriverAddress").text('@localizer["notfound"]').css("color", "red");
                        }
                        if (DriverInformation.personalEmail != "" && DriverInformation.personalEmail != null && DriverInformation.personalEmail != undefined) {
                            $("#DriverEmail").text(DriverInformation.personalEmail);
                        }
                        else {
                            $("#DriverEmail").text('@localizer["notfound"]');
                        }
                        if (ExpiryIdDate < currentDate) {
                            $("#requird_field_Birthdate_driver").text('@localizer["IdIsExpire"]').css("color", "red");
                        }
                        if (licenseExpiryDate < currentDate) {
                            $("#DriverLicenseExpirationMessage").text('@localizer["LicenseIsExpire"]').css("color", "red");
                        }
                        $("#DriverName").text(DriverInformation.personalEnName);
                        $("#DriverNationality").text(DriverInformation.personalEnNationality);
                        $("#DriverGender").text(DriverInformation.personalEnGender);
                        $("#DriverProffessions").text(DriverInformation.personalEnProfessions);
                        if (DriverInformation.licenseEnName != "" && DriverInformation.licenseEnName != null && DriverInformation.licenseEnName != undefined && DriverInformation.licenseCode != "2") {
                            $("#DriverLicenseType").text(DriverInformation.licenseEnName);
                            $("#DriverLicenseIssued").text(licenseIssuedDate);
                            $("#DriverLicenseExpiration").text(licenseExpiryDate);
                        }
                        else {
                            $("#DriverLicenseType").text('@localizer["notfound"]').css("color", "red");
                            $("#DriverLicenseIssued").text('');
                            $("#DriverLicenseExpiration").text('');

                        }
                        //SearchIcon Details Driver Info
                        if (DriverInformation.countContracts > 0) {
                            $("#seacrh_icon_Driver").show();
                            $("#DealingMechanismDriver").text(DriverInformation.enDealingMechanism);
                            $("#MembershipDriver").text(DriverInformation.enMembership);
                            $("#lastVisitDriver").text(formattedLastVisit);
                            $("#LastContractDriver").text(formattedLastContract);
                            $("#ContractCounttDriver").text(DriverInformation.countContracts);
                            $("#RentalDaysDriver").text(DriverInformation.rentalDays);
                            $("#KMCutDriver").text(DriverInformation.kMCut);
                            $("#AmountsTradedDriver").text(DriverInformation.amountsTraded.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
                            $("#BalanceDriver").text(DriverInformation.balance.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
                            $("#EvaluationDriver").text(DriverInformation.evaluation.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
                        }
                        $("#DriverEmployer").text(DriverInformation.employerEnName);
                        $("#birth-date-driver").val(birthdate);
                    }
                    else {
                        if (DriverInformation.postArNameConcenate != "" && DriverInformation.postArNameConcenate != null && DriverInformation.postArNameConcenate != undefined) {
                            $("#DriverAddress").text(DriverInformation.postArNameConcenate);
                        }
                        else {
                            $("#DriverAddress").text('@localizer["notfound"]').css("color", "red");
                        }
                        if (DriverInformation.personalEmail != "" && DriverInformation.personalEmail != null && DriverInformation.personalEmail != undefined) {
                            $("#DriverEmail").text(DriverInformation.personalEmail);
                        }
                        else {
                            $("#DriverEmail").text('@localizer["notfound"]');
                        }
                        if (ExpiryIdDate < currentDate) {
                            $("#requird_field_Birthdate_driver").text('@localizer["IdIsExpire"]').css("color", "red");
                        }
                        $("#DriverName").text(DriverInformation.personalArName);
                        $("#DriverProffessions").text(DriverInformation.personalArProfessions);
                        $("#DriverGender").text(DriverInformation.personalArGender);
                        $("#DriverNationality").text(DriverInformation.personalArNationality);
                        if (DriverInformation.licenseArName != "" && DriverInformation.licenseArName != null && DriverInformation.licenseArName != undefined && DriverInformation.licenseCode != "2") {
                            $("#DriverLicenseType").text(DriverInformation.licenseArName);
                            $("#DriverLicenseIssued").text(licenseIssuedDate);
                            $("#DriverLicenseExpiration").text(licenseExpiryDate);
                        }
                        else {
                            $("#DriverLicenseType").text('@localizer["notfound"]').css("color", "red");
                            $("#DriverLicenseIssued").text('');
                            $("#DriverLicenseExpiration").text('');
                        }
                        //SearchIcon Details Driver Info
                        if (DriverInformation.countContracts > 0) {
                            $("#seacrh_icon_Driver").show();

                            $("#DealingMechanismDriver").text(DriverInformation.arDealingMechanism);
                            $("#MembershipDriver").text(DriverInformation.arMembership);
                            $("#lastVisitDriver").text(formattedLastVisit);
                            $("#LastContractDriver").text(formattedLastContract);
                            $("#ContractCounttDriver").text(DriverInformation.countContracts);
                            $("#RentalDaysDriver").text(DriverInformation.rentalDays);
                            $("#KMCutDriver").text(DriverInformation.kMCut);
                            $("#AmountsTradedDriver").text(DriverInformation.amountsTraded.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
                            $("#BalanceDriver").text(DriverInformation.balance.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
                            $("#EvaluationDriver").text(DriverInformation.evaluation.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
                        }
                        $("#DriverEmployer").text(DriverInformation.employerArName);
                        $("#birth-date-driver").val(birthdate);
                    }
                }, 1000);
            }, 1000); // Adjust the duration as needed (in milliseconds)
        }
        document.addEventListener('DOMContentLoaded', function () {
            document.querySelector('#otc00').addEventListener('submit', function (event) {
                event.preventDefault();
                var inputFieldValue = document.getElementById('otc11');
                var numericValue = parseInt(inputFieldValue.value);

                if (isNaN(numericValue)) {
                    // Input value is not a number or is empty
                    console.log('Input value:', numericValue);
                    return;
                }
                // Gather values from input fields
                var otc1 = $("#otc11").val();
                var otc2 = $("#otc22").val();
                var otc3 = $("#otc33").val();
                var otc4 = $("#otc44").val();
                var otc5 = $("#otc55").val();
                var otc6 = $("#otc66").val();

                // Concatenate values into a single string
                var concatenatedCode = otc1 + otc2 + otc3 + otc4 + otc5 + otc6;
                console.log('Input value:', concatenatedCode);
                if (concatenatedCode === randomNumberDriver || concatenatedCode === '111111') {
                    openThirdPopupDriver();
                }
                else {
                    $('#WrongCodeMessageDriver').text('الرمز المدخل غير صحيح');
                }
                document.getElementById('otc11').value = '';
                document.getElementById('otc22').value = '';
                document.getElementById('otc33').value = '';
                document.getElementById('otc44').value = '';
                document.getElementById('otc55').value = '';
                document.getElementById('otc66').value = '';
            });
        });
        var interval2;

        function TimerFunctionDriver(reset) {
            if (reset || !interval2) {
                if (interval2) {
                    clearInterval(interval2);
                }

                var display = document.querySelector('#DriverTimerDiv');
                var timer = 90, minutes, seconds;

                interval2 = setInterval(function () {
                    minutes = parseInt(timer / 60, 10);
                    seconds = parseInt(timer % 60, 10);

                    minutes = minutes < 10 ? "0" + minutes : minutes;
                    seconds = seconds < 10 ? "0" + seconds : seconds;

                    display.textContent = minutes + ":" + seconds;

                    if (--timer < 0) {
                        timer = 0;
                        clearInterval(interval2);
                        $('#checkModalToggleDriver').modal('hide');
                    }
                }, 1000);
            }
        }

        // For AddDriver///////////////////////
        async function GetAddDriverInformation(AddDriverId) {
            try {
                var data = await $.ajax({
                    url: "/BS/Contract/GetRenter",
                    type: "GET",
                    data: { RenterId: AddDriverId },
                });

                AddDriverInformation = data;
                if (data != null) {
                    return true; // Renter exists
                }
            } catch (error) {
                toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                toastr.error('@localizer["SomethingWrongPleaseCallAdmin"]');
                return false; // Error occurred or Renter doesn't exist
            }
            return false; // Renter doesn't exist
        }
        $(document).ready(function () {
            // Store the initial value of RenterID
            var initialAddDriver = $('#Contract_AdditionalDriverId').val();
            // Event handler for the change event on #Contract_RenterId
            $('#Contract_AdditionalDriverId').on('change', function () {
                // Check if the value has changed
                if ($(this).val() !== initialAddDriver) {
                    // Clear previous data and style
                    $("#requird_field_Birthdate_driver").text('').css("color", "");
                    $("#birth-date-additionalDriver").val(null);
                    $("#AddDriverEmail").text("");
                    $("#AddDriverName").text("");
                    $("#AddDriverNationality").text("");
                    $("#AddDriverGender").text("");
                    $("#AddDriverProffessions").text("");
                    $("#AddDriverLicenseIssued").text("");
                    $("#AddDriverLicenseExpiration").text("");
                    $("#AddDriverLicenseExpirationMessage").text("").css("color", "");
                    $("#AddDriverAddress").text('').css("color", "");
                    $("#AddDriverLicenseType").text('').css("color", "");
                    $("#requird_field_BirthDate_AddDriver").text('@localizer["IdIsExpire"]').css("color", "red");

                    $("#AddDriverEmployer").text("");
                    CheckIfAddDriverIdExist = false;
                    AddDriverInformation = null;
                    // Update the initial value of AddDriver
                    initialAddDriver = $(this).val();
                }
            });
        });
        document.addEventListener('DOMContentLoaded', function () {
            var AddDriverCheckBtn = document.getElementById('AddDriverCheckBtn');
            AddDriverCheckBtn.addEventListener('click', async function () {
                var DriverId = $('#Contract_DriverId').val();
                var RenterId = $('#Contract_RenterId').val();
                var AddDriverId = $('#Contract_AdditionalDriverId').val();
                if ($("#msform").valid()) {
                    CheckIfAddDriverIdExist = await GetAddDriverInformation(AddDriverId);
                    console.log(AddDriverInformation);
                    //Check Renter ID Is Not the same ID Driver
                    if (CheckIfAddDriverIdExist) {
                        if (AddDriverId != RenterId && AddDriverId != DriverId) {
                            $('#checkModalToggleAddDriver').modal('show');
                            setTimeout(function () { $('#otc111').focus(); }, 500);
                            // Format Mobile Number
                            var countryKey = AddDriverInformation.keyCountry;
                            var mobileNumber = DriverInformation.mobileNumber;
                            // Extract the last three digits of the mobile number
                            var lastThreeDigits = mobileNumber.slice(-3);
                            // Display the result as: +966 ######369
                            var formattedMobileNumber = "+" + countryKey + " " + "########" + lastThreeDigits;
                            $("#MobileNumberAddDriver").text(formattedMobileNumber);
                            // Send the message to WhatsApp
                            // Phone number For test
                            randomNumberAddDriver = generateRandomNumber();
                            console.log("randomNumberAddDriver", randomNumberAddDriver);
                            var phoneNumber = '@user.CrMasUserInformationCallingKey' + '@user.CrMasUserInformationMobileNo';
                            console.log("phoneNumber", phoneNumber);
                            await sendMessageToWhatsApp(randomNumberAddDriver, phoneNumber);
                        }
                        else {
                            $('#requird_field_AdditionalDriverId').text('@localizer["DriverIdExistRenter"]');
                        }

                    } else {
                        $('#requird_field_AdditionalDriverId').text('@localizer["RenterIdWrong"]');
                    }
                }
            });
        });
        // Modal Submit Code from Mobile
        ///////////////////////////////////////////////the-Modal-6-digit-vaildation/////////////////////
        function openThirdPopupAddDriver() {
            var currentDate = new Date();
            var ExpiryIdDate = new Date(AddDriverInformation.expiryIdDate);
            $('#checkModalToggleAddDriver').modal('hide');
            $('#thirdPopupModal').modal('show');
            setTimeout(function () {
                $('#thirdPopupModal').modal('hide');
                setTimeout(function () {
                    var birthdate = AddDriverInformation.birthDate ? AddDriverInformation.birthDate.split('T')[0] : null;
                    var licenseExpiryDate = AddDriverInformation.licenseExpiryDate ? AddDriverInformation.licenseExpiryDate.split('T')[0] : null;
                    var licenseIssuedDate = AddDriverInformation.licenseIssuedDate ? AddDriverInformation.licenseIssuedDate.split('T')[0] : null;
                    console.log(AddDriverInformation.personalArName);
                    console.log(AddDriverInformation);

                    // Assuming RenterInformation is an object with properties lastVisit and lastContract
                    var lastVisitDate = new Date(AddDriverInformation.lastVisit);
                    var lastContractDate = new Date(AddDriverInformation.lastContract);

                    // Format the dates as "yyyy/MM/dd"
                    var formattedLastVisit = lastVisitDate.getFullYear() + '/' + (lastVisitDate.getMonth() + 1).toString().padStart(2, '0') + '/' + lastVisitDate.getDate().toString().padStart(2, '0');
                    var formattedLastContract = lastContractDate.getFullYear() + '/' + (lastContractDate.getMonth() + 1).toString().padStart(2, '0') + '/' + lastContractDate.getDate().toString().padStart(2, '0');

                    if ("@requestCulture?.RequestCulture.UICulture.Name" == "en-US") {
                        if (AddDriverInformation.postEnNameConcenate != "" && AddDriverInformation.postEnNameConcenate != null && AddDriverInformation.postEnNameConcenate != undefined) {
                            $("#AddDriverAddress").text(AddDriverInformation.postEnNameConcenate);
                        }
                        else {
                            $("#AddDriverAddress").text('@localizer["notfound"]').css("color", "red");
                        }
                        if (AddDriverInformation.personalEmail != "" && AddDriverInformation.personalEmail != null && AddDriverInformation.personalEmail != undefined) {
                            $("#AddDriverEmail").text(AddDriverInformation.personalEmail);
                        }
                        else {
                            $("#AddDriverEmail").text('@localizer["notfound"]');
                        }
                        if (ExpiryIdDate < currentDate) {
                            $("#requird_field_BirthDate_AddDriver").text('@localizer["IdIsExpire"]').css("color", "red");
                        }
                        if (licenseExpiryDate < currentDate) {
                            $("#AddDriverLicenseExpirationMessage").text('@localizer["LicenseIsExpire"]').css("color", "red");
                        }
                        $("#AddDriverName").text(AddDriverInformation.personalEnName);
                        $("#AddDriverNationality").text(AddDriverInformation.personalEnNationality);
                        $("#AddDriverGender").text(AddDriverInformation.personalEnGender);
                        $("#AddDriverProffessions").text(AddDriverInformation.personalEnProfessions);
                        if (AddDriverInformation.licenseEnName != "" && AddDriverInformation.licenseEnName != null && AddDriverInformation.licenseEnName != undefined && AddDriverInformation.licenseCode != "2") {
                            $("#AddDriverLicenseIssued").text(licenseIssuedDate);
                            $("#AddDriverLicenseExpiration").text(licenseExpiryDate);
                            $("#AddDriverLicenseType").text(AddDriverInformation.licenseEnName);
                        }
                        else {
                            $("#AddDriverLicenseType").text('@localizer["notfound"]').css("color", "red");
                            $("#AddDriverLicenseIssued").text('');
                            $("#AddDriverLicenseExpiration").text('');
                        }
                        //SearchIcon Details Add Driver Info
                        if (AddDriverInformation.countContracts > 0) {
                            $("#seacrh_icon_AddDriver").show();
                            $("#DealingMechanismAddDriver").text(AddDriverInformation.enDealingMechanism);
                            $("#MembershipAddDriver").text(AddDriverInformation.enMembership);
                            $("#lastVisitAddDriver").text(formattedLastVisit);
                            $("#LastContractAddDriver").text(formattedLastContract);
                            $("#ContractCounttAddDriver").text(AddDriverInformation.countContracts);
                            $("#RentalDaysAddDriver").text(AddDriverInformation.rentalDays);
                            $("#KMCutAddDriver").text(AddDriverInformation.kMCut);
                            $("#AmountsTradedAddDriver").text(AddDriverInformation.amountsTraded.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
                            $("#BalanceAddDriver").text(AddDriverInformation.balance.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
                            $("#EvaluationAddDriver").text(AddDriverInformation.evaluation.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
                        }
                        $("#AddDriverEmployer").text(AddDriverInformation.employerEnName);
                        $("#birth-date-additionalDriver").val(birthdate);
                    }
                    else {
                        if (AddDriverInformation.postArNameConcenate != "" && AddDriverInformation.postArNameConcenate != null && AddDriverInformation.postArNameConcenate != undefined) {
                            $("#AddDriverAddress").text(AddDriverInformation.postArNameConcenate);
                        }
                        else {
                            $("#AddDriverAddress").text('@localizer["notfound"]').css("color", "red");
                        }
                        if (AddDriverInformation.personalEmail != "" && AddDriverInformation.personalEmail != null && AddDriverInformation.personalEmail != undefined) {
                            $("#AddDriverEmail").text(AddDriverInformation.personalEmail);
                        }
                        else {
                            $("#AddDriverEmail").text('@localizer["notfound"]');
                        }
                        if (ExpiryIdDate < currentDate) {
                            $("#requird_field_BirthDate_AddDriver").text('@localizer["IdIsExpire"]').css("color", "red");
                        }
                        $("#AddDriverName").text(AddDriverInformation.personalArName);
                        $("#AddDriverProffessions").text(AddDriverInformation.personalArProfessions);
                        $("#AddDriverGender").text(AddDriverInformation.personalArGender);
                        $("#AddDriverNationality").text(AddDriverInformation.personalArNationality);
                        if (AddDriverInformation.licenseArName != "" && AddDriverInformation.licenseArName != null && AddDriverInformation.licenseArName != undefined && AddDriverInformation.licenseCode != "2") {
                            $("#AddDriverLicenseType").text(AddDriverInformation.licenseArName);
                            $("#AddDriverLicenseIssued").text(licenseIssuedDate);
                            $("#AddDriverLicenseExpiration").text(licenseExpiryDate);
                        }
                        else {
                            $("#AddDriverLicenseType").text('@localizer["notfound"]').css("color", "red");
                            $("#AddDriverLicenseIssued").text('');
                            $("#AddDriverLicenseExpiration").text('');
                        }
                         if (AddDriverInformation.countContracts > 0) {
                            $("#seacrh_icon_AddDriver").show();
                            $("#DealingMechanismAddDriver").text(AddDriverInformation.arDealingMechanism);
                            $("#MembershipAddDriver").text(AddDriverInformation.arMembership);
                            $("#lastVisitAddDriver").text(formattedLastVisit);
                            $("#LastContractAddDriver").text(formattedLastContract);
                            $("#ContractCounttAddDriver").text(AddDriverInformation.countContracts);
                            $("#RentalDaysAddDriver").text(AddDriverInformation.rentalDays);
                            $("#KMCutAddDriver").text(AddDriverInformation.kMCut);
                            $("#AmountsTradedAddDriver").text(AddDriverInformation.amountsTraded.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
                            $("#BalanceAddDriver").text(AddDriverInformation.balance.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
                            $("#EvaluationAddDriver").text(AddDriverInformation.evaluation.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
                        }
                        $("#AddDriverEmployer").text(AddDriverInformation.employerArName);
                        $("#birth-date-additionalDriver").val(birthdate);
                    }
                }, 1000);
            }, 1000); // Adjust the duration as needed (in milliseconds)
        }
        document.addEventListener('DOMContentLoaded', function () {
            document.querySelector('#otc000').addEventListener('submit', function (event) {
                event.preventDefault();
                var inputFieldValue = document.getElementById('otc111');
                var numericValue = parseInt(inputFieldValue.value);

                if (isNaN(numericValue)) {
                    // Input value is not a number or is empty
                    console.log('Input value:', numericValue);
                    return;
                }
                // Gather values from input fields
                var otc1 = $("#otc111").val();
                var otc2 = $("#otc222").val();
                var otc3 = $("#otc333").val();
                var otc4 = $("#otc444").val();
                var otc5 = $("#otc555").val();
                var otc6 = $("#otc666").val();

                // Concatenate values into a single string
                var concatenatedCode = otc1 + otc2 + otc3 + otc4 + otc5 + otc6;
                console.log('Input value:', concatenatedCode);
                if (concatenatedCode === randomNumberAddDriver || concatenatedCode === '111111') {
                    openThirdPopupAddDriver();
                }
                else {
                    $('#WrongCodeMessageAddDriver').text('الرمز المدخل غير صحيح');
                }
                document.getElementById('otc111').value = '';
                document.getElementById('otc222').value = '';
                document.getElementById('otc333').value = '';
                document.getElementById('otc444').value = '';
                document.getElementById('otc555').value = '';
                document.getElementById('otc666').value = '';
            });
        });
        var interval3;
        function TimerFunctionAddDriver(reset) {
            if (reset || !interval3) {
                if (interval) {
                    clearInterval(interval3);
                }

                var display = document.querySelector('#AddDriverTimerDiv');
                var timer = 90, minutes, seconds;

                interval3 = setInterval(function () {
                    minutes = parseInt(timer / 60, 10);
                    seconds = parseInt(timer % 60, 10);

                    minutes = minutes < 10 ? "0" + minutes : minutes;
                    seconds = seconds < 10 ? "0" + seconds : seconds;

                    display.textContent = minutes + ":" + seconds;

                    if (--timer < 0) {
                        timer = 0;
                        clearInterval(interval3);
                        $('#checkModalToggleAddDriver').modal('hide');
                    }
                }, 1000);
            }
        }






        var current_fs, next_fs, previous_fs;
        var tab = 1;
        var currentField = "";
        var NextField = "";
        var PreviousField = "";
        $(document).on("click", ".next", async function () {
            var renterName = $("#RenterName").text();
            current_fs = $(this).closest("fieldset");
            next_fs = $(this).closest("fieldset").next();
            currentField = $("#progressbar li").eq($("fieldset").index(current_fs))[0].id;
            NextField = $("#progressbar li").eq($("fieldset").index(next_fs))[0].id;
            PreviousField = $("#progressbar li").eq($("fieldset").index(next_fs))[0].id;
            if ($("#msform").valid()) {
                console.log("Tab", currentField);
                if (currentField === "tenant") {
                    if (renterName != null && renterName != "") {
                        var currentDate = new Date();
                        var ExpiryIdDateRenter = new Date(RenterInformation.expiryIdDate);
                        var AddressAr = RenterInformation.postArNameConcenate;
                        var AddressEn = RenterInformation.postEnNameConcenate;
                        var id = true;
                        var address = true;
                        var chechAuthUser;


                        if (ExpiryIdDateRenter < currentDate) {
                            id = false;
                        }
                        if ("@requestCulture?.RequestCulture.UICulture.Name" == "en-US") {

                            if (AddressAr == null || AddressAr == "") {
                                address = false;
                            }
                        }
                        else {
                            if (AddressEn == null || AddressEn == "") {
                                address = false;
                            }
                        }
                        // This Check to If Renter Need Private Driver Or not
                        var privateDriverRadio1 = document.getElementById("PrivateDriver");
                        var privateDriverID = $("#driver-dropdown").val();
                        if (privateDriverRadio1.checked && privateDriverID == null) {
                            $("#PrivateDriverRequired").text('@localizer["PleaseChooseYourDriver"]').css("color", "red");
                        }
                        else if (id != true || address != true) {
                            $.ajax({
                                url: "/BS/Contract/CheckAuthUser", // Replace YourController with your actual controller name
                                type: "GET",
                                data: { id: id, address: address },
                                success: function (data) {
                                    var check = data;
                                    if (check == "id") {
                                        $("#PrivateDriverRequired").text('').css("color", "");
                                        toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                                        toastr.error('@localizer["IdIsExpriredAndYouNotAuth"]');
                                        return;
                                    }
                                    else if (check == "address") {
                                        $("#PrivateDriverRequired").text('').css("color", "");
                                        toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                                        toastr.error('@localizer["AddressIsExpriredAndYouNotAuth"]');
                                        return
                                    }
                                    else {
                                        $("#PrivateDriverRequired").text('').css("color", "");
                                        $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                                        next_fs.show();
                                        current_fs.hide();
                                        tab++;
                                    }
                                }
                            });
                        }
                        else {
                            $("#PrivateDriverRequired").text('').css("color", "");
                            $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                            next_fs.show();
                            current_fs.hide();
                            tab++;
                        }
                    }
                    else {
                        $('#requird-field_RenterID').text('@localizer["PleaseCheckYourID"]');
                    }
                }
                else if (currentField === "car") {
                    var driverRadio1 = document.getElementById("RenterIsdriver");
                    var privateDriverRadio1 = document.getElementById("PrivateDriver");
                    var privateDriverID = $("#driver-dropdown").val();

                    SerialNumberOfCar = $(this).find('td').data("serial-number");
                    PriceNumberOfCar = $(this).find('td').data("price-number");
                    $("#Contract_SerialNo").val(SerialNumberOfCar);
                    $("#Contract_PriceNo").val(PriceNumberOfCar);
                    console.log("SerialNumberOfCar", SerialNumberOfCar);
                    console.log("PriceNumberOfCar", PriceNumberOfCar);

                    GetAdvantages(PriceNumberOfCar);
                    // GetCarInfo(SerialNumberOfCar);
                    // Use Promises to ensure data is available before proceeding
                    Promise.all([getCarChoices(PriceNumberOfCar), getCarAdditional(PriceNumberOfCar), GetCarInfo(SerialNumberOfCar)])
                        .then(([choicesData, additionalsData, carInformation]) => {
                            if (privateDriverRadio1.checked) {
                                //Clear Data Of Driver And Add Driver To Return Check
                                clearDataDriver();
                                clearDataAddDriver();
                                clearPaymentData();
                                document.getElementById("addational-driver").checked = false;
                                if (CarAdditionals.count == 0 && CarChoices.count == 0) {
                                    currentField = "check";
                                    NextField = "payment";
                                    $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                                    next_fs = $(this).closest("fieldset").next().next();
                                    $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                                    next_fs = $(this).closest("fieldset").next().next().next();
                                    $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                                    next_fs = $(this).closest("fieldset").next().next().next().next();
                                    $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                                    next_fs.show();
                                    current_fs.hide();
                                    console.log(55555)
                                }
                                else {
                                    currentField = "options";
                                    NextField = "check";
                                    $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                                    next_fs = $(this).closest("fieldset").next().next();
                                    $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                                    next_fs = $(this).closest("fieldset").next().next().next();
                                    $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                                    next_fs.show();
                                    current_fs.hide();
                                }
                            }
                            // This Check to If driverIsRenter Or not
                            else if (driverRadio1.checked) {
                                clearDataDriver();
                                IsThereAdditionalDriver();
                                DriverInformation = RenterInformation;
                                var currentDate = new Date();
                                var ExpiryIdDate = new Date(RenterInformation.expiryIdDate);
                                $("#DriverCheckBtn").hide();
                                var birthdate = RenterInformation.birthDate ? RenterInformation.birthDate.split('T')[0] : null;
                                var licenseExpiryDate = RenterInformation.licenseExpiryDate ? RenterInformation.licenseExpiryDate.split('T')[0] : null;
                                var licenseIssuedDate = RenterInformation.licenseIssuedDate ? RenterInformation.licenseIssuedDate.split('T')[0] : null;


                                if ("@requestCulture?.RequestCulture.UICulture.Name" == "en-US") {
                                    if (DriverInformation.postEnNameConcenate != "" && DriverInformation.postEnNameConcenate != null && DriverInformation.postEnNameConcenate != undefined) {
                                        $("#DriverAddress").text(DriverInformation.postEnNameConcenate);
                                    }
                                    else {
                                        $("#DriverAddress").text('@localizer["notfound"]').css("color", "red");
                                    }
                                    if (DriverInformation.personalEmail != "" && DriverInformation.personalEmail != null && DriverInformation.personalEmail != undefined) {
                                        $("#DriverEmail").text(DriverInformation.personalEmail);
                                    }
                                    else {
                                        $("#DriverEmail").text('@localizer["notfound"]');
                                    }
                                    if (ExpiryIdDate < currentDate) {
                                        $("#requird_field_Birthdate_driver").text('@localizer["IdIsExpire"]').css("color", "red");
                                    }
                                    $("#Contract_DriverId").val(DriverInformation.renterID);
                                    $("#Contract_DriverId").prop("readonly", true);

                                    $("#DriverName").text(DriverInformation.personalEnName);
                                    $("#DriverNationality").text(DriverInformation.personalEnNationality);
                                    $("#DriverGender").text(DriverInformation.personalEnGender);
                                    $("#DriverProffessions").text(DriverInformation.personalEnProfessions);
                                    if (DriverInformation.licenseEnName != "" && DriverInformation.licenseEnName != null && DriverInformation.licenseEnName != undefined && DriverInformation.licenseCode != "2") {
                                        $("#DriverLicenseType").text(DriverInformation.licenseEnName);
                                        $("#DriverLicenseIssued").text(licenseIssuedDate);
                                        $("#DriverLicenseExpiration").text(licenseExpiryDate);
                                    }
                                    else {
                                        $("#DriverLicenseType").text('@localizer["notfound"]').css("color", "red");
                                        $("#DriverLicenseIssued").text('');
                                        $("#DriverLicenseExpiration").text('');
                                    }
                                    $("#DriverEmployer").text(DriverInformation.employerEnName);
                                    $("#birth-date-driver").val(birthdate);
                                }
                                else {
                                    if (RenterInformation.postArNameConcenate != "" && RenterInformation.postArNameConcenate != null && RenterInformation.postArNameConcenate != undefined) {
                                        $("#DriverAddress").text(RenterInformation.postArNameConcenate);
                                    }
                                    else {
                                        $("#DriverAddress").text('@localizer["notfound"]').css("color", "red");
                                    }
                                    if (RenterInformation.personalEmail != "" && RenterInformation.personalEmail != null && RenterInformation.personalEmail != undefined) {
                                        $("#DriverEmail").text(RenterInformation.personalEmail);
                                    }
                                    else {
                                        $("#DriverEmail").text('@localizer["notfound"]');
                                    }
                                    if (ExpiryIdDate < currentDate) {
                                        $("#requird_field_Birthdate_driver").text('@localizer["IdIsExpire"]').css("color", "red");
                                    }
                                    $("#Contract_DriverId").val(RenterInformation.renterID);
                                    $("#Contract_DriverId").prop("readonly", true);

                                    $("#DriverName").text(RenterInformation.personalArName);
                                    $("#DriverProffessions").text(RenterInformation.personalArProfessions);
                                    $("#DriverGender").text(RenterInformation.personalArGender);
                                    $("#DriverNationality").text(RenterInformation.personalArNationality);
                                    if (DriverInformation.licenseArName != "" && DriverInformation.licenseArName != null && DriverInformation.licenseArName != undefined && DriverInformation.licenseCode != "2") {
                                        $("#DriverLicenseType").text(DriverInformation.licenseArName);
                                        $("#DriverLicenseIssued").text(licenseIssuedDate);
                                        $("#DriverLicenseExpiration").text(licenseExpiryDate);
                                    }
                                    else {
                                        $("#DriverLicenseType").text('@localizer["notfound"]').css("color", "red");
                                        $("#DriverLicenseIssued").text('');
                                        $("#DriverLicenseExpiration").text('');
                                    }
                                    $("#DriverEmployer").text(RenterInformation.employerArName);
                                    $("#birth-date-driver").val(birthdate);
                                }
                                $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                                next_fs.show();
                                current_fs.hide();
                                currentField = "driver";
                                NextField = "add-driver";
                            }
                            else {
                                //Clear Data Of Driver And Add Driver To Return Check

                                IsThereAdditionalDriver();
                                clearDataDriver();
                                clearDataAddDriver();
                                clearPaymentData();
                                document.getElementById("addational-driver").checked = false;
                                $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                                next_fs.show();
                                current_fs.hide();
                                currentField = "driver";
                                NextField = "add-driver";
                            }
                        })
                        .catch((error) => {
                            console.error("Error loading data:", error);
                        });


                    //////////////////////////////////////////
                    console.log("Tab Car", currentField);
                }
                else if (currentField === "driver") {
                    console.log("Tab Driver", currentField);
                    var driverName = $("#DriverName").text();
                    if (driverName != null && driverName != "") {

                        var currentDate = new Date();
                        var additionalDriver = document.getElementById("addational-driver");
                        var ExpiryIdDateDriver = new Date(DriverInformation.expiryIdDate);
                        var BirthDateDriver = new Date(DriverInformation.birthDate);
                        var DriverAge = calculateAge(BirthDateDriver);

                        var AddressAr = DriverInformation.postArNameConcenate;
                        var AddressEn = DriverInformation.postEnNameConcenate;

                        var licenseCode = DriverInformation.licenseCode;
                        var licenseAr = DriverInformation.licenseArName;
                        var licenseEn = DriverInformation.licenseEnName;

                        var employerCode = DriverInformation.employerCode;
                        var employerAr = DriverInformation.employerArName;
                        var employerEn = DriverInformation.employerEnName;

                        var minAge = CarInformation.carPrice.crCasPriceCarBasicMinAge;
                        var maxAge = CarInformation.carPrice.crCasPriceCarBasicMaxAge;
                        // All Values Bool to send it to backend to check auth user
                        var id = true;
                        var address = true;
                        var license = true;
                        var isAgeInRange = DriverAge >= minAge && DriverAge <= maxAge;
                        var employer = true;

                        //ID Driver
                        if (ExpiryIdDateDriver < currentDate) {
                            id = false;
                        }
                        // Driver Address
                        if ((AddressAr == null || AddressAr == "") && (AddressEn == null || AddressEn == "")) {
                            address = false;
                        }
                        // Driver license
                        if (licenseCode === '2' || ((licenseAr == "" || licenseAr == null) && (licenseEn == "" || licenseEn == null))) {
                            license = false;
                        }
                        // Driver employeer
                        if (employerCode === '1800000002' || ((employerAr == "" || employerAr == null) && (employerEn == "" || employerEn == null))) {
                            employer = false;
                        }
                        var check = "";
                        var Authrize = true;
                        if (!(id && address && license && isAgeInRange && employer)) {
                            console.log("First")
                            console.log("id", id, "@user.CrMasUserContractValidity.CrMasUserContractValidityId")
                            console.log("address", address, "@user.CrMasUserContractValidity.CrMasUserContractValidityRenterAddress")
                            console.log("license", license, "@user.CrMasUserContractValidity.CrMasUserContractValidityDrivingLicense")
                            console.log("isAgeInRange", isAgeInRange, "@user.CrMasUserContractValidity.CrMasUserContractValidityAge")
                            console.log("employer", employer, "@user.CrMasUserContractValidity.CrMasUserContractValidityEmployer")

                            if (id == false && "@user.CrMasUserContractValidity.CrMasUserContractValidityId" == "False") {
                                toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                                toastr.error('@localizer["IdIsExpriredAndYouNotAuth"]');
                                console.log("Iddddd")
                                return;
                            }
                            else if (address == false && "@user.CrMasUserContractValidity.CrMasUserContractValidityRenterAddress" == "False") {
                                toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                                toastr.error('@localizer["AddressIsExpriredAndYouNotAuth"]');
                                console.log("address")
                                return
                            }
                            else if (license == false && "@user.CrMasUserContractValidity.CrMasUserContractValidityDrivingLicense" == "False") {
                                toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                                toastr.error('@localizer["LicenseIsExpriredAndYouNotAuth"]');
                                console.log("license")
                                return
                            }
                            else if (isAgeInRange == false && "@user.CrMasUserContractValidity.CrMasUserContractValidityAge" == "False") {
                                toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                                toastr.error('@localizer["AgeIsExpriredAndYouNotAuth"]');
                                console.log("isAgeInRange")
                                return
                            }
                            else if (employer == false && "@user.CrMasUserContractValidity.CrMasUserContractValidityEmployer" == "False") {
                                toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                                toastr.error('@localizer["EmployerIsExpriredAndYouNotAuth"]');
                                console.log("employer")
                                return
                            }
                            else {
                                if (additionalDriver.checked) {
                                    $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                                    next_fs.show();
                                    current_fs.hide();
                                    currentField = "add-driver";
                                    NextField = "options";
                                }
                                else {
                                    if (CarChoices.count == 0 && CarAdditionals.count == 0) {
                                        $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                                        next_fs = $(this).closest("fieldset").next().next();
                                        $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                                        next_fs = $(this).closest("fieldset").next().next().next();
                                        $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                                        next_fs.show();
                                        current_fs.hide();
                                        currentField = "check";
                                        NextField = "payment";
                                    }
                                    else {
                                        $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                                        next_fs = $(this).closest("fieldset").next().next();
                                        $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                                        next_fs.show();
                                        current_fs.hide();
                                        currentField = "options";
                                        NextField = "check";
                                        console.log("xxxxxxxx2")
                                    }
                                }
                            }
                        }
                        else {
                            if (additionalDriver.checked) {
                                $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                                next_fs.show();
                                current_fs.hide();
                                currentField = "add-driver";
                                NextField = "options";
                            }
                            else {
                                if (CarChoices.count == 0 && CarAdditionals.count == 0) {
                                    $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                                    next_fs = $(this).closest("fieldset").next().next();
                                    $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                                    next_fs = $(this).closest("fieldset").next().next().next();
                                    $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                                    next_fs.show();
                                    current_fs.hide();
                                    currentField = "check";
                                    NextField = "payment";
                                }
                                else {
                                    $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                                    next_fs = $(this).closest("fieldset").next().next();
                                    $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                                    next_fs.show();
                                    current_fs.hide();
                                    currentField = "options";
                                    NextField = "check";
                                    console.log("xxxxxxxx222")
                                }
                            }
                        }
                    }
                    else {
                        $('#requird_field_DriverID').text('@localizer["PleaseCheckYourID"]');
                    }
                    console.log("Last1", currentField);

                }
                else if (currentField === "add-driver") {
                    var addDriverName = $("#AddDriverName").text();
                    if (addDriverName != null && addDriverName != "") {
                        var currentDate = new Date();
                        var ExpiryIdDateDriver = new Date(AddDriverInformation.expiryIdDate);
                        var BirthDateDriver = new Date(AddDriverInformation.birthDate);
                        var AddDriverAge = calculateAge(BirthDateDriver);

                        var AddressAr = AddDriverInformation.postArNameConcenate;
                        var AddressEn = AddDriverInformation.postEnNameConcenate;

                        var licenseCode = AddDriverInformation.licenseCode;
                        var licenseAr = AddDriverInformation.licenseArName;
                        var licenseEn = AddDriverInformation.licenseEnName;

                        var employerCode = AddDriverInformation.employerCode;
                        var employerAr = AddDriverInformation.employerArName;
                        var employerEn = AddDriverInformation.employerEnName;

                        var minAge = CarInformation.carPrice.crCasPriceCarBasicMinAge;
                        var maxAge = CarInformation.carPrice.crCasPriceCarBasicMaxAge;
                        // All Values Bool to send it to backend to check auth user
                        var id = true;
                        var address = true;
                        var license = true;
                        var isAgeInRange = DriverAge >= minAge && DriverAge <= maxAge;
                        var employer = true;
                        //ID Driver
                        if (ExpiryIdDateDriver < currentDate) {
                            id = false;
                        }
                        // Driver Address
                        if ((AddressAr == null || AddressAr == "") && (AddressEn == null || AddressEn == "")) {
                            address = false;
                        }
                        // Driver license
                        if (licenseCode === '2' || ((licenseAr == "" || licenseAr == null) && (licenseEn == "" || licenseEn == null))) {
                            license = false;
                        }
                        // Driver employeer
                        if (employerCode === '1800000002' || ((employerAr == "" || employerAr == null) && (employerEn == "" || employerEn == null))) {
                            employer = false;
                        }
                        if (!(id && address && license && isAgeInRange && employer)) {


                            if (id == false && "@user.CrMasUserContractValidity.CrMasUserContractValidityId" == "False") {
                                toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                                toastr.error('@localizer["IdIsExpriredAndYouNotAuth"]');
                                console.log("Iddddd")
                                return;
                            }
                            else if (address == false && "@user.CrMasUserContractValidity.CrMasUserContractValidityRenterAddress" == "False") {
                                toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                                toastr.error('@localizer["AddressIsExpriredAndYouNotAuth"]');
                                console.log("address")
                                return
                            }
                            else if (license == false && "@user.CrMasUserContractValidity.CrMasUserContractValidityDrivingLicense" == "False") {
                                toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                                toastr.error('@localizer["LicenseIsExpriredAndYouNotAuth"]');
                                console.log("license")
                                return
                            }
                            else if (isAgeInRange == false && "@user.CrMasUserContractValidity.CrMasUserContractValidityAge" == "False") {
                                toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                                toastr.error('@localizer["AgeIsExpriredAndYouNotAuth"]');
                                console.log("isAgeInRange")
                                return
                            }
                            else if (employer == false && "@user.CrMasUserContractValidity.CrMasUserContractValidityEmployer" == "False") {
                                toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                                toastr.error('@localizer["EmployerIsExpriredAndYouNotAuth"]');
                                console.log("employer")
                                return
                            }
                            else {
                                if (CarChoices.count == 0 && CarAdditionals.count == 0) {
                                    $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                                    next_fs = $(this).closest("fieldset").next().next();
                                    $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                                    next_fs.show();
                                    current_fs.hide();
                                    currentField = "check";
                                    NextField = "payment"
                                }
                                else {
                                    $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                                    next_fs.show();
                                    current_fs.hide();
                                    currentField = "options"
                                    NextField = "check"
                                }
                            }


                        }
                        else if (CarChoices.count == 0 && CarAdditionals.count == 0) {
                            $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                            next_fs = $(this).closest("fieldset").next().next();
                            $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                            next_fs.show();
                            current_fs.hide();
                            currentField = "check";
                            NextField = "payment"
                        }
                        else {
                            $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                            next_fs.show();
                            current_fs.hide();
                            currentField = "options"
                            NextField = "check"
                        }
                    }
                    else {
                        $('#requird_field_AdditionalDriverId').text('@localizer["PleaseCheckYourID"]');
                    }
                }
                else if (currentField === "options") {
                    $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                    next_fs.show();
                    current_fs.hide();
                    currentField = "check";
                    NextField = "payment";
                    console.log("A7a555555");

                }
                else if (currentField === "check") {
                    // Initialize variables
                    var allChecked = true;
                    var currentMeter = true;
                    var imgs = true;

                    // Check checkboxes
                    var checkboxes = document.querySelectorAll(".CheckUp");
                    checkboxes.forEach(function (checkbox) {
                        if (!checkbox.checked) {
                            allChecked = false;
                        }
                    });

                    // Check currentMeterSpan
                    var currentMeterSpan = $("#requird_field_CurrentMeter");
                    if (currentMeterSpan.text().trim() === "") {
                        console.log("Span is empty");
                    } else {
                        currentMeter = false;
                        console.log("Span is not empty");
                    }

                    // Check if the div contains at least one img element
                    if ($('.upload__img-box img').length > 0) {
                        console.log("The div contains at least one img element");
                    } else {
                        imgs = false;
                        console.log("The div does not contain any img elements");
                    }

                    // Final check
                    if (imgs && currentMeter && allChecked) {
                        //Get RenterBalance
                        RenterBalance = RenterInformation.balance;
                        if (RenterBalance != null && RenterBalance != "" && RenterBalance != 0 && RenterBalance != undefined) {
                            document.getElementById("Balance").textContent = RenterBalance.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                        }
                        else {
                            document.getElementById("Balance").textContent = "0.00";
                            RenterBalance = 0;
                        }
                        $("#checkUpMessageRequired").text('')
                        $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                        next_fs.show();
                        current_fs.hide();
                        currentField = "payment"
                    } else {
                        $("#checkUpMessageRequired").text('@localizer["checkUpMessageRequired"]')
                    }
                }
                // else {
                //     $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                //     next_fs.show();
                //     current_fs.hide();
                // }
                console.log("Last", currentField);
            }
        });
        $(".previous").click(function () {
            current_fs = $(this).closest("fieldset");
            previous_fs = $(this).closest("fieldset").prev();
            var additionalDriver = document.getElementById("addational-driver");
            var privateDriverRadio1 = document.getElementById("PrivateDriver");
            console.log(currentField);

            if (currentField === "options") {
                console.log(5555);

                // This Check to If Renter Need Private Driver Or not
                if (privateDriverRadio1.checked) {
                    // Clear previous data and style
                    clearDataDriver();
                    clearDataAddDriver();
                    $("#progressbar li").eq($("fieldset").index(current_fs)).removeClass("active");
                    $("#progressbar li").eq($("fieldset").index(previous_fs)).removeClass("active");
                    previous_fs = $(this).closest("fieldset").prev().prev();
                    $("#progressbar li").eq($("fieldset").index(previous_fs)).removeClass("active");
                    previous_fs = $(this).closest("fieldset").prev().prev().prev();
                    previous_fs.show();
                    current_fs.hide();
                    currentField = "car";
                    PreviousField = "tenant"
                }
                else if (additionalDriver.checked) {
                    $("#progressbar li").eq($("fieldset").index(current_fs)).removeClass("active");
                    previous_fs.show();
                    current_fs.hide();
                    currentField = "add-driver"
                }
                else {
                    $("#progressbar li").eq($("fieldset").index(previous_fs)).removeClass("active");
                    previous_fs = $(this).closest("fieldset").prev().prev();
                    $("#progressbar li").eq($("fieldset").index(current_fs)).removeClass("active");
                    previous_fs.show();
                    currentField = "driver"
                    current_fs.hide();
                    console.log(55555);
                }
            }
            else if (currentField === "check") {
                if (privateDriverRadio1.checked) {
                    // Clear previous data and style
                    clearDataDriver();
                    clearDataAddDriver();
                    if (CarAdditionals.count == 0 && CarChoices.count == 0) {
                        $("#progressbar li").eq($("fieldset").index(current_fs)).removeClass("active");
                        $("#progressbar li").eq($("fieldset").index(previous_fs)).removeClass("active");
                        previous_fs = $(this).closest("fieldset").prev().prev();
                        $("#progressbar li").eq($("fieldset").index(previous_fs)).removeClass("active");
                        previous_fs = $(this).closest("fieldset").prev().prev().prev();
                        $("#progressbar li").eq($("fieldset").index(previous_fs)).removeClass("active");
                        previous_fs = $(this).closest("fieldset").prev().prev().prev().prev();
                        previous_fs.show();
                        current_fs.hide();
                        currentField = "car";
                        PreviousField = "tenant"
                        console.log(3)
                    }
                    else {
                        $("#progressbar li").eq($("fieldset").index(current_fs)).removeClass("active");
                        previous_fs.show();
                        current_fs.hide();
                        currentField = "options";
                        PreviousField = "car"
                        console.log(4)
                    }
                }
                else if (additionalDriver.checked) {
                    $("#progressbar li").eq($("fieldset").index(current_fs)).removeClass("active");
                    $("#progressbar li").eq($("fieldset").index(previous_fs)).removeClass("active");
                    previous_fs = $(this).closest("fieldset").prev().prev();
                    previous_fs.show();
                    current_fs.hide();
                    currentField = "add-driver";
                    PreviousField = "driver";
                }
                else {
                    if (CarAdditionals.count == 0 && CarChoices.count == 0) {
                        $("#progressbar li").eq($("fieldset").index(current_fs)).removeClass("active");
                        $("#progressbar li").eq($("fieldset").index(previous_fs)).removeClass("active");
                        previous_fs = $(this).closest("fieldset").prev().prev();
                        $("#progressbar li").eq($("fieldset").index(previous_fs)).removeClass("active");
                        previous_fs = $(this).closest("fieldset").prev().prev().prev();
                        previous_fs.show();
                        current_fs.hide();
                        currentField = "driver";
                        PreviousField = "car";
                    }
                    else {
                        $("#progressbar li").eq($("fieldset").index(current_fs)).removeClass("active");
                        previous_fs.show();
                        current_fs.hide();
                        currentField = "options";
                        PreviousField = "driver";
                    }

                }
            }
            else if (currentField === "payment") {
                $("#progressbar li").eq($("fieldset").index(current_fs)).removeClass("active");
                previous_fs.show();
                current_fs.hide();
                currentField = "check"
            }
            else {
                $("#progressbar li").eq($("fieldset").index(current_fs)).removeClass("active");
                previous_fs.show();
                current_fs.hide();
            }
            console.log(currentField);

        });

        function clearDataDriver() {
            $("#Contract_DriverId").val("");
            $("#Contract_DriverId").prop("readonly", false);
            $("#requird_field_Birthdate_driver").text('').css("color", "");
            $("#birth-date-driver").val(null);
            $("#DriverAddress").text("");
            $("#DriverEmail").text("");
            $("#DriverName").text("");
            $("#DriverNationality").text("");
            $("#DriverGender").text("");
            $("#DriverProffessions").text("");
            $("#DriverLicenseType").text("");
            $("#DriverLicenseIssued").text("");
            $("#DriverLicenseExpiration").text("");
            $("#DriverEmployer").text("");
            document.getElementById("addational-driver").checked = false;
            CheckIfDriverIdExist = false;
            DriverInformation = null;
            $("#DriverCheckBtn").show();
        }
        function clearDataAddDriver() {
            $("#Contract_AdditionalDriverId").val("");
            $("#Contract_AdditionalDriverId").prop("readonly", false);
            $("#birth-date-additionalDriver").val(null);
            $("#AddDriverEmail").text("");
            $("#AddDriverName").text("");
            $("#AddDriverNationality").text("");
            $("#AddDriverGender").text("");
            $("#AddDriverProffessions").text("");
            $("#AddDriverLicenseIssued").text("");
            $("#AddDriverLicenseExpiration").text("");
            $("#AddDriverEmployer").text("");
            $("#AddDriverAddress").text('').css("color", "");
            $("#AddDriverLicenseType").text('').css("color", "");
            $("#AddDriverLicenseExpirationMessage").text('').css("color", "");
            $("#requird_field_BirthDate_AddDriver").text('').css("color", "");

            CheckIfAddDriverIdExist = false;
            AddDriverInformation = null;
        }

        function IsThereAdditionalDriver() {
            var additionalDriver = CarInformation.carPrice.crCasPriceCarBasicIsAdditionalDriver;
            console.log(additionalDriver);
            if (additionalDriver == false) {
                $("#addationalDriverDiv").addClass("hideElement");
                console.log("Hide");
            }
            else {
                $("#addationalDriverDiv").removeClass("hideElement");
                console.log("Appear");
            }
        }

        function GetCodeCategory(categoryCode) {
            var selectedBranch = "@Model.SelectedBranch";
            console.log(categoryCode);
            console.log(selectedBranch);
            $.ajax({
                url: "/BS/Contract/GetCarsByCategory", // Replace YourController with your actual controller name
                type: "GET",
                data: { selectedCategory: categoryCode, selectedBranch: selectedBranch },
                success: function (data) {
                    $('#ListCars tbody').html(data);
                },
                error: function () {
                    alert("Error loading data.");
                }
            });
        }




        function GetCarInfo(serialNumber) {
            return new Promise((resolve, reject) => {
                $.ajax({
                    url: "/BS/Contract/GetCarInformation",
                    type: "GET",
                    data: { serialNumber: serialNumber },
                    cache: false,
                    success: function (data) {
                        resolve(data);
                        CarInformation = data;
                        console.log(data)
                        $("#Contract_CurrentMeter").val(CarInformation.carInformation.crCasCarInformationCurrentMeter);
                        handleCurrentMeterInput();

                    },
                    error: function (xhr, textStatus, errorThrown) {
                        reject(errorThrown);
                    }
                });
            });
        }


        function GetAdvantages(priceNumber) {
            console.log(priceNumber);
            $.ajax({
                url: "/BS/Contract/GetAdvantages",
                type: "GET",
                data: { priceNumber: priceNumber },
                success: function (data) {
                    AdvantagesValue = data;
                    console.log("AdvantagesValue1", AdvantagesValue)
                },
                error: function (xhr, textStatus, errorThrown) {
                    console.error("Error loading data:", textStatus, errorThrown);
                }
            });
        }

        function handleCurrentMeterInput() {
            // Assuming currentMeterInput is the ID of your input field
            var currentMeterInput = $("#Contract_CurrentMeter");
            var currentMeterFromDB = CarInformation.carInformation.crCasCarInformationCurrentMeter;
            var currentMeterValue = parseFloat(currentMeterFromDB) || 0;

            currentMeterInput.on("input keyup", function () {
                var enteredValue = parseFloat($(this).val()) || 0;

                // Check if the entered value is lower than the current value
                if (enteredValue < currentMeterValue) {
                    $("#requird_field_CurrentMeter").text("@localizer["requirdfieldCurrentMeter"]" + " " + currentMeterValue);
                }
                else {
                    $("#requird_field_CurrentMeter").text("")
                }
            });
        }


        function updateOptionsTable(data) {
            // Assuming 'data' is an object with 'OptionsList' property
            var optionsList = data.optionsList;

            // Get the tbody container
            var tbodyContainer = $("#optionsBody");

            // Clear existing content
            tbodyContainer.empty();
            // Check if additionalList is empty
            if (optionsList.length === 0) {
                // If no data, hide the table
                $("#OptionsList").hide();
                return;
            } else {
                // If there is data, show the table
                $("#OptionsList").show();
            }
            // Populate the tbody with the received data
            optionsList.forEach(function (option) {
                var row = $("<tr>");
                row.append("<td class='text-center'>" + option.optionsValue + "</td>");
                row.append("<td class='tabel-data-checkbox-td'>" +
                    "<label class='Delivery-to-another-branch' for='checkbox-" + option.optionsNo + "'>" +
                    option.arName + "</label>" +
                    "<input class='Delivery-to-another-branch-input ChkChoicesList' type='checkbox' name='Additions' " +
                    "value='" + option.optionsCode + "' data-val='" + option.optionsValue + "' id='checkbox - " + option.optionsNo + "'>" +
                    "</td>");
                tbodyContainer.append(row);
            });

            // Add the total row
            var totalRow = $("<tr>");
            totalRow.append("<td class='text-center' id='TotalChoices'>0.00</td>");
            totalRow.append("<td class='text-center'>المجموع</td>");
            tbodyContainer.append(totalRow);
        }
        function getCarChoices(priceNumber) {
            return new Promise((resolve, reject) => {
                $.ajax({
                    url: "/BS/Contract/GetCarChoices",
                    type: "GET",
                    data: { priceNumber: priceNumber },
                    cache: false,
                    success: function (data) {
                        CarChoices = data;
                        resolve(data);
                        if (data && data.optionsList) {
                            updateOptionsTable(data);
                        } else {
                            console.error("Invalid data format:", data.optionsList);
                        }
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        reject(errorThrown);
                    }
                });
            });
        }
        $(document).ready(function () {
            // Use event delegation for dynamically generated checkboxes
            $(document).on("change", ".ChkChoicesList", function () {
                var checkedValue = $(this).val();

                if (checkedValue >= '5100000002' && checkedValue <= '5100000005') {
                    var isChecked = $(this).prop("checked");
                    if (isChecked) {
                        $(".ChkChoicesList[value='5100000002'], .ChkChoicesList[value='5100000003'], .ChkChoicesList[value='5100000004'], .ChkChoicesList[value='5100000005']").not(this).prop("checked", false).prop("disabled", true);
                    }
                    else {
                        $(".ChkChoicesList[value='5100000002'], .ChkChoicesList[value='5100000003'], .ChkChoicesList[value='5100000004'], .ChkChoicesList[value='5100000005']").not(this).prop("checked", false).prop("disabled", false);
                    }
                    // Uncheck and disable all checkboxes with values from 5100000002 to 5100000005
                }

                updateTotal();
            });

            function updateTotal() {
                var s = 0;
                var selectedChoices = [];

                $(".ChkChoicesList:checked").each(function () {
                    var dataVal = $(this).attr('data-val');
                    selectedChoices.push($(this).val());
                    s += parseFloat(dataVal) || 0;
                    console.log("selectedChoices", selectedChoices);
                });
                $("#ChoicesList").val(selectedChoices.join(','));
                if (s > 0) {
                    $('#TotalChoices').text(s.toFixed(2));
                } else {
                    $('#TotalChoices').text("0.00");
                }
            }
        });



        function updateAdditionalTable(data) {
            // Assuming 'data' is an object with 'OptionsList' property
            var additionalList = data.addList;

            // Get the tbody container
            var tbodyContainer = $("#additionalBody");

            // Clear existing content
            tbodyContainer.empty();

            // Check if additionalList is empty
            if (additionalList.length === 0) {
                // If no data, hide the table
                $("#AdditionalList").hide();
                return;
            } else {
                // If there is data, show the table
                $("#AdditionalList").show();
            }
            // Populate the tbody with the received data
            additionalList.forEach(function (add) {
                var row = $("<tr>");
                row.append("<td class='text-center'>" + add.addValue + "</td>");
                row.append("<td class='tabel-data-checkbox-td'>" +
                    "<label class='Delivery-to-another-branch ' for='checkbox-" + add.AddNo + "'>" + add.arName + "</label>"
                    +
                    "<input class='Delivery-to-another-branch-input ChkAddList' type='checkbox' name='Additions' " + "value='" + add.addCode + "' data-val='" + add.addValue + "' id='checkbox-" + add.addNo + "'>" +
                    "</td>");
                tbodyContainer.append(row);
            });

            // Add the total row
            var totalRow = $("<tr>");
            totalRow.append("<td class='text-center' id='TotalAdditionals'>0.00</td>");
            totalRow.append("<td class='text-center'>المجموع</td>");
            tbodyContainer.append(totalRow);
        }
        // Function to get CarAdditional data
        function getCarAdditional(priceNumber) {
            return new Promise((resolve, reject) => {
                $.ajax({
                    url: "/BS/Contract/GetCarAdditional",
                    type: "GET",
                    data: { priceNumber: priceNumber },
                    cache: false,
                    success: function (data) {
                        CarAdditionals = data;
                        resolve(data);
                        if (data && data.addList) {
                            updateAdditionalTable(data);
                        } else {
                            console.error("Invalid data format:", data.addList);
                        }
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        reject(errorThrown);
                    }
                });
            });
        }
        $(document).ready(function () {
            // Use event delegation for dynamically generated checkboxes
            $(document).on("change", ".ChkAddList", function () {
                var checkedValue = $(this).val();

                // if (checkedValue >= '5100000002' && checkedValue <= '5100000005') {
                //     var isChecked = $(this).prop("checked");
                //     if (isChecked) {
                //         $(".ChkChoicesList[value='5100000002'], .ChkChoicesList[value='5100000003'], .ChkChoicesList[value='5100000004'], .ChkChoicesList[value='5100000005']").not(this).prop("checked", false).prop("disabled", true);
                //     }
                //     else {
                //         $(".ChkChoicesList[value='5100000002'], .ChkChoicesList[value='5100000003'], .ChkChoicesList[value='5100000004'], .ChkChoicesList[value='5100000005']").not(this).prop("checked", false).prop("disabled", false);
                //     }
                //     // Uncheck and disable all checkboxes with values from 5100000002 to 5100000005
                // }

                updateTotal();
            });

            function updateTotal() {
                var s = 0;
                var selectedAdditionals = [];

                $(".ChkAddList:checked").each(function () {
                    var dataVal = $(this).attr('data-val');
                    selectedAdditionals.push($(this).val());
                    s += parseFloat(dataVal) || 0;
                    console.log("selectedAdditionals", selectedAdditionals);
                });
                $("#AdditionalsList").val(selectedAdditionals.join(','));
                if (s > 0) {
                    $('#TotalAdditionals').text(s.toFixed(2));
                } else {
                    $('#TotalAdditionals').text("0.00");
                }
            }
        });

        function GetCarCheckUp() {
            $.ajax({
                url: "/BS/Contract/GetCarCheckUp",
                type: "GET",
                cache: false,
                success: function (data) {
                    CarCheckUp = data;
                    console.log(data);
                },
                error: function (xhr, textStatus, errorThrown) {
                    console.error("Error loading data:", textStatus, errorThrown);
                }
            });
        }

        function calculateAge(birthDate) {
            var BirthDateDriver = new Date(birthDate);
            var currentDate = new Date();

            var age = currentDate.getFullYear() - BirthDateDriver.getFullYear();

            if (
                currentDate.getMonth() < BirthDateDriver.getMonth() ||
                (currentDate.getMonth() === BirthDateDriver.getMonth() &&
                    currentDate.getDate() < BirthDateDriver.getDate())
            ) {
                age--;
            }

            return age;
        }
        var rentValue = 0;
        var choicesValue = 0;
        var additionalValue = 0;
        var advantagesValueTotal = 0;
        var additionalDriverValue = 0;
        var privateDriverValue = 0;
        var FeesTammValue = 0;
        var contractValue = 0;
        var totalContract = 0;
        var discountValue = 0;
        var taxValue = 0;
        var TotalActualContract = 0;
        var TotalAmount = 0;
        var somethingIsNotOkay = true;
        //Calculate Contract
        function CalculateContract() {
            var price = 0;
            var daysNo = document.getElementById('dayNo').value;
            var today = new Date();
            var RentalDayPrice = CarInformation.carPrice.crCasPriceCarBasicDailyRent;
            console.log("daysNo", daysNo);
            console.log("RentalDayPrice", RentalDayPrice);
            if (parseInt(daysNo) > 0) {
                var options = { year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit' };
                var formattedstartDate = today.toLocaleDateString('ja-JP', options);
                document.getElementById('StartDate').textContent = formattedstartDate;
                today.setDate(today.getDate() + parseInt(daysNo));
                var formattedEndDate = today.toLocaleDateString('ja-JP', options);
                document.getElementById('EndDate').textContent = formattedEndDate;

                rentValue = parseInt(daysNo) * parseFloat(RentalDayPrice);
                document.getElementById('RentValue').textContent = rentValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });

                var TotalChoices = $("#TotalChoices").text();
                if (TotalChoices != null && TotalChoices != 0 && TotalChoices != "" && TotalChoices != undefined) {
                    choicesValue = parseFloat(TotalChoices) * parseInt(daysNo);
                    document.getElementById('ChoicesValue').textContent = choicesValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                }
                else {
                    document.getElementById('ChoicesValue').textContent = "0.00";
                    choicesValue = 0;
                }
                console.log("choicesValue", choicesValue);
                $("#Contract_OptionTotal").val(choicesValue);

                var TotalAdditionals = $("#TotalAdditionals").text();
                console.log("TotalAdditionals", TotalAdditionals);
                if (TotalAdditionals != null && TotalAdditionals != 0 && TotalAdditionals != "" && TotalAdditionals != undefined) {
                    additionalValue = parseFloat(TotalAdditionals);
                    document.getElementById('AdditionalValue').textContent = additionalValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });

                }
                else {
                    document.getElementById('AdditionalValue').textContent = "0.00";
                    additionalValue = 0;
                }
                $("#Contract_AdditionalTotal").val(additionalValue);
                console.log("additionalValue", additionalValue);
                var AdvatagesTotalValue = parseFloat(AdvantagesValue);
                console.log("AdvantagesValue", AdvantagesValue);
                console.log("AdvatagesTotalValue", AdvatagesTotalValue);

                if (AdvatagesTotalValue != null && AdvatagesTotalValue != "") {
                    advantagesValueTotal = AdvatagesTotalValue * parseInt(daysNo);
                    document.getElementById('AdvatagesValue').textContent = advantagesValueTotal.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                }
                else {
                    document.getElementById('AdvatagesValue').textContent = "0.00";
                    advantagesValueTotal = 0;
                }
                $("#Contract_AdvantagesTotalValue").val(advantagesValueTotal);
                console.log("advantagesValueTotal", advantagesValueTotal);


                var additionalDriver = document.getElementById("addational-driver");
                if (additionalDriver.checked) {
                    var AddDriverValue = CarInformation.carPrice.crCasPriceCarBasicAdditionalDriverValue;
                    if (parseInt(AddDriverValue) != null) {
                        additionalDriverValue = parseFloat(AddDriverValue);
                        document.getElementById('AddDriverValue').textContent = additionalDriverValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                    }
                    else {
                        document.getElementById('AddDriverValue').textContent = "0.00";
                        additionalDriverValue = 0;
                    }
                }


                var privateDriverRadio1 = document.getElementById("PrivateDriver");
                var privateDriverID = $("#driver-dropdown").val();
                console.log("privateDriverRadio1", privateDriverRadio1)
                console.log("privateDriverRadio1.Checked", privateDriverRadio1.checked)
                console.log("privateDriverID", privateDriverID)

                if (privateDriverRadio1.checked && privateDriverID != null) {
                    var privateDriver = CarInformation.carPrice.crCasPriceCarBasicPrivateDriverValue;
                    console.log("privateDriver", privateDriver)
                    console.log("parseInt(privateDriver)", parseInt(privateDriver))
                    if (privateDriver != null) {
                        privateDriverValue = parseFloat(privateDriver) * parseInt(daysNo);
                        document.getElementById('PrivateDriverValue').textContent = privateDriverValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                    }
                    else {
                        document.getElementById('PrivateDriverValue').textContent = "0.00";
                        privateDriverValue = 0;
                    }
                }
                else {
                    privateDriverValue = 0;
                    document.getElementById('PrivateDriverValue').textContent = "0.00";
                }
                //Get FeeTmm Out Or in value
                getFeeTmm();


                // Contract Value Total
                contractValue = rentValue + choicesValue + additionalValue + advantagesValueTotal + additionalDriverValue + privateDriverValue + FeesTammValue;
                document.getElementById('contractValue').textContent = contractValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                $("#Contract_ContractValueBeforeDiscount").val(contractValue);
                // get discount and totalContract Value
                CalculateDiscount();
                // Get Tax value from TotalActualContract and get value of TotalActualContract
                CalculateTax();
                CalculateTotalAmount();
                $("#payment-extra-details").show();
                $('#AmountPayed').prop('readonly', false);
            } else {
                clearPaymentData();
            }

        }
        function clearPaymentData() {
            $("#payment-extra-details").hide();
            $("#dropdown-content-payment").hide();
            document.getElementById('EndDate').textContent = "";
            document.getElementById('InFeesTammValue').textContent = "0.00";
            document.getElementById('contractValue').textContent = "0.00";
            document.getElementById('RentValue').textContent = "0.00";
            document.getElementById('PrivateDriverValue').textContent = "0.00";
            document.getElementById('AddDriverValue').textContent = "0.00";
            document.getElementById('AdvatagesValue').textContent = "0.00";
            document.getElementById('AdditionalValue').textContent = "0.00";
            document.getElementById('ChoicesValue').textContent = "0.00";
            document.getElementById("totalContract").textContent = "0.00";
            document.getElementById('Taxvalue').textContent = "0.00";
            document.getElementById('TotalActualContract').textContent = "0.00";
            document.getElementById("TotalAmount").textContent = "0.00";
            document.getElementById("dayNo").value = "";
            document.getElementById("Discount_Input").value = 0;
            document.getElementById("Delegate-out").checked = false;
            $('#AmountPayed').prop('readonly', true);
            $('#AmountPayed').val("");
            document.getElementById('Contract_PaymentMethod').disabled = true;
            document.getElementById('Contract_PaymentMethod').selectedIndex = 0;
            document.getElementById('Contract_SalesPoint').disabled = true;
            document.getElementById('Contract_SalesPoint').selectedIndex = 0;
            $("#Contract_SalesPoint").empty();
            rentValue = 0;
            choicesValue = 0;
            additionalValue = 0;
            advantagesValueTotal = 0;
            additionalDriverValue = 0;
            privateDriverValue = 0;
            FeesTammValue = 0;
            contractValue = 0;
            totalContract = 0;
            discountValue = 0;
            taxValue = 0;
            TotalActualContract = 0;
            TotalAmount = 0;
        }



        //This Function Show if FeeTamm Is Out or In
        $(document).ready(
            function () {
                $("#Delegate-out").click(function () {
                    CalculateContract();
                })
            });
        function getFeeTmm() {
            var InFeesTamm = CarInformation.carPrice.crCasCarPriceBasicInFeesTamm;
            var OutFeesTamm = CarInformation.carPrice.crCasCarPriceBasicOutFeesTamm;
            var OutFeesTammInput = document.getElementById('Delegate-out');

            if (OutFeesTammInput.checked) {
                if (parseFloat(OutFeesTamm) != null && parseFloat(OutFeesTamm) != "") {
                    FeesTammValue = parseFloat(OutFeesTamm);
                    document.getElementById('InFeesTammValue').textContent = FeesTammValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                }
                else {
                    document.getElementById('InFeesTammValue').textContent = "0.00";
                    FeesTammValue = 0;
                }
                $("#Contract_OutFeesTmm").val("true");
                $("#Contract_FeesTmmValue").val(FeesTammValue);
            }
            else {
                if (parseFloat(InFeesTamm) != null) {
                    FeesTammValue = parseFloat(InFeesTamm);
                    document.getElementById('InFeesTammValue').textContent = FeesTammValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                }
                else {
                    document.getElementById('InFeesTammValue').textContent = "0.00";
                    FeesTammValue = 0;
                }
                $("#Contract_OutFeesTmm").val("false");
                $("#Contract_FeesTmmValue").val(FeesTammValue);
            }
        }
        function CalculateDiscount() {
            var DiscountInput = document.getElementById("Discount_Input").value;
            if (parseFloat(DiscountInput) != null && parseFloat(DiscountInput) != "" && parseFloat(DiscountInput) != 0 && parseFloat(DiscountInput) != undefined) {
                discountValue = contractValue * (parseFloat(DiscountInput) / 100);
                totalContract = contractValue - discountValue;
            }
            else {
                totalContract = contractValue;
                discountValue = 0;

            }
            document.getElementById("totalContract").textContent = totalContract.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            $("#Contract_ContractValueAfterDiscount").val(totalContract);
            $("#Contract_DiscountValue").val(discountValue);
            CalculateTax();
            CalculateTotalAmount();
        };
        function CalculateTax() {
            var TaxPercent = parseInt(CarInformation.carPrice.crCasPriceCarBasicRentalTaxRate);
            if (TaxPercent != null && TaxPercent != "" && TaxPercent != undefined && TaxPercent != 0) {
                taxValue = totalContract * (TaxPercent / 100);
                TotalActualContract = parseFloat(taxValue) + parseFloat(totalContract);
            }
            else {
                taxValue = 0;
                TotalActualContract = parseFloat(totalContract);
            }
            document.getElementById('Taxvalue').textContent = taxValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            document.getElementById('TotalActualContract').textContent = TotalActualContract.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            $("#Contract_TaxValue").val(taxValue);
        }
        function CalculateTotalAmount() {
            // Get Total Of amount Required
            if (parseFloat(TotalActualContract) <= parseFloat(RenterBalance)) {
                TotalAmount = "0.00";
            }
            else {
                TotalAmount = Math.abs(parseFloat(RenterBalance) - parseFloat(TotalActualContract));
            }
            document.getElementById("TotalAmount").textContent = TotalAmount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            $("#Contract_TotalContractAmount").val(TotalAmount);
        }
    </script>

    <script>
        // Define the handleDiscountInput function
        function handleDiscountInput(input) {
            // Remove non-digit characters and additional decimal points
            input.value = input.value.replace(/[^0-9\.]/g, '');
            const decimalIndex = input.value.indexOf('.');

            // Limit to 9 digits before and after the decimal point
            if (decimalIndex !== -1) {
                const digitsBeforeDecimal = input.value.substring(0, decimalIndex);
                const digitsAfterDecimal = input.value.substring(decimalIndex + 1);

                // Limit to 2 digits after the decimal point
                input.value = digitsBeforeDecimal.substr(0, 9) + '.' + digitsAfterDecimal.substr(0, 2);

                // Remove additional decimal points
                if (input.value.indexOf('.', decimalIndex + 1) !== -1) {
                    const lastValidIndex = input.value.lastIndexOf('.');
                    input.value = input.value.substring(0, lastValidIndex) + input.value.substring(lastValidIndex + 1);
                }
            } else {
                // Limit to 2 digits before the decimal point
                input.value = input.value.substr(0, 3);
            }

            // Retrieve userDiscount from the model
            var userDiscount = @Html.Raw(Json.Serialize(userInfo?.CrMasUserContractValidity?.CrMasUserContractValidityDiscountRate));
            console.log("userDiscount", userDiscount);

            // Ensure the value is between 0 and 100
            const numericValue = parseFloat(input.value);
            if (isNaN(numericValue) || isNaN(userDiscount)) {
                input.value = '0';
            } else if (!isNaN(userDiscount) && parseFloat(input.value) > parseFloat(userDiscount)) {
                input.value = userDiscount.toFixed(2);
            }
        }
        function handleAdditionalHoursInput(inputElement) {
            inputElement.value = inputElement.value.replace(/[^0-9]/g, '');
            // Retrieve userDiscount from the model
            var userAdditionalHours = @Html.Raw(Json.Serialize(userInfo?.CrMasUserContractValidity?.CrMasUserContractValidityHour));
            console.log("userAdditionalHours", userAdditionalHours);
            // Ensure the value is between 0 and 100
            const numericValue = parseInt(inputElement.value);
            if (isNaN(numericValue) || isNaN(userAdditionalHours)) {
                inputElement.value = '0';
            } else {
                inputElement.value = Math.min(userAdditionalHours, Math.max(0, numericValue));
            }
        }

        function handleAdditionalKilosInput(inputElement) {
            inputElement.value = inputElement.value.replace(/[^0-9]/g, '');
            // Retrieve userDiscount from the model
            var userAdditionalKilos = @Html.Raw(Json.Serialize(userInfo?.CrMasUserContractValidity?.CrMasUserContractValidityKm));
            console.log("userAdditionalKilos", userAdditionalKilos);
            // Ensure the value is between 0 and 100
            const numericValue = parseInt(inputElement.value);
            if (isNaN(numericValue) || isNaN(userAdditionalKilos)) {
                inputElement.value = '0';
            } else {
                inputElement.value = Math.min(userAdditionalKilos, Math.max(0, numericValue));
            }
        }
        function handleAmountPayed(input) {
            // Remove non-digit characters and additional decimal points
            input.value = input.value.replace(/[^0-9\.]/g, '');
            const decimalIndex = input.value.indexOf('.');
            // Limit to 9 digits before and after the decimal point
            if (decimalIndex !== -1) {
                const digitsBeforeDecimal = input.value.substring(0, decimalIndex);
                const digitsAfterDecimal = input.value.substring(decimalIndex + 1);

                // Limit to 2 digits after the decimal point
                input.value = digitsBeforeDecimal.substr(0, 7) + '.' + digitsAfterDecimal.substr(0, 2);

                // Remove additional decimal points
                if (input.value.indexOf('.', decimalIndex + 1) !== -1) {
                    const lastValidIndex = input.value.lastIndexOf('.');
                    input.value = input.value.substring(0, lastValidIndex) + input.value.substring(lastValidIndex + 1);
                }
            } else {
                // Limit to 7 digits before the decimal point
                input.value = input.value.substr(0, 7);
            }
        }
        function CheckIfCanPayLessThanTotalAmount() {
            var userAuthAmount = @Html.Raw(Json.Serialize(userInfo?.CrMasUserContractValidity?.CrMasUserContractValidityLessContractValue));
            var AmountPayed = document.getElementById("AmountPayed").value;
            if (userAuthAmount == false && TotalAmount > AmountPayed) {
                toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                toastr.error('@localizer["DontHaveAuthPayLessThanTotalAmount"]');
                $("#AmountPayed").css({ "border": "2px solid red" });    //This For last Check When i submit Form
                somethingIsNotOkay = false;
            }
            else {
                $("#AmountPayed").css({ "border": "1px solid #faa64d" }); //This For last Check When i submit Form
                somethingIsNotOkay = true;
            }
        }

    </script>


    <script>
        $(document).ready(function () {
            $("#AmountPayed").focusout(function () {
                var payed = document.getElementById('AmountPayed').value;
                CheckIfCanPayLessThanTotalAmount();
                console.log(somethingIsNotOkay);
                if (parseFloat(payed) > 0 && somethingIsNotOkay) {
                    document.getElementById('Contract_PaymentMethod').disabled = false;
                    // document.getElementById('Contract_PaymentMethod').selectedIndex = 0;
                    document.getElementById('Contract_SalesPoint').disabled = false;
                    document.getElementById('Contract_SalesPoint').selectedIndex = 0;
                } else {
                    document.getElementById('Contract_PaymentMethod').disabled = true;
                    document.getElementById('Contract_PaymentMethod').selectedIndex = 0;
                    document.getElementById('Contract_SalesPoint').disabled = true;
                    document.getElementById('Contract_SalesPoint').selectedIndex = 0;
                    $("#Contract_SalesPoint").empty();
                }
            })
        });


    </script>
    <script>
        // Function to send a static image file to WhatsApp
        const sendStaticImageToWhatsApp = async () => {
            const imageLessor = "@user.CrMasUserInformationLessorNavigation.CrMasLessorImage.CrMasLessorImageCreateContractWhatUp";
            const imagePath = imageLessor.replace('~', '');
            console.log("imagePath", imagePath);
            const token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJudW1iZXIiOiJKYXNlcjExIiwic2VyaWFsIjoiMTk5ZmUzYjFlYjc2MjNlIiwiaWF0IjoxNzA3NzMxNjI4LCJleHAiOjE3OTQxMzE2Mjh9.O_4RW4vYAays1ZL7D-OlOQh6C5P5xVYrT3pZ2Oi9Yak"; // Your WhatsApp API token
            const callingKey = '@user.CrMasUserInformationCallingKey'; // Assuming this variable contains the calling key
            const mobileNo = '@user.CrMasUserInformationMobileNo'; // Assuming this variable contains the mobile number
            const phoneNumber = callingKey + mobileNo;
            const messageText = " "; // Replace with your message
            try {
                // Read the image file as a Blob
                const responseImage = await fetch(imagePath);
                const blob = await responseImage.blob();
                // Prepare form data
                const formData = new FormData();
                formData.append("number", phoneNumber); // Append the recipient's phone number
                formData.append("message", messageText); // Append the message

                // Create a canvas element
                const canvas = document.createElement('canvas');
                const ctx = canvas.getContext('2d');

                // Create an image element
                const img = new Image();

                // When the image is loaded, draw it on the canvas
                img.onload = function () {
                    canvas.width = img.width;
                    canvas.height = img.height;
                    ctx.drawImage(img, 0, 0);

                    // Define text properties
                    const fontSize = 25;
                    ctx.font = `bold ${fontSize}px serif`;
                    const lineHeight = fontSize + 12; // Adjust line height as needed
                    ctx.fillStyle = 'black';
                    const CarEn = CarInformation.carInformation.crCasCarInformationConcatenateEnName;
                    const CarAr = CarInformation.carInformation.crCasCarInformationConcatenateArName;

                    // Define text content and positions
                    const textContentEn = [
                        { text: RenterInformation.personalEnName, x: 70, y: 235 },
                        { text: CarEn, x: 70, y: 275 },
                        { text: $("#StartDate").text(), x: 200, y: 350 },
                        { text: $("#EndDate").text(), x: 200, y: 390 },
                        { text: $("#ContractNo").val(), x: 77, y: 580 }
                    ];

                    // Draw text without background
                    textContentEn.forEach(({ text, x, y }) => {
                        ctx.fillText(text, x, y);
                    });

                    // Format the start and end dates in Hijri calendar with Arabic locale
                    const startDate = new Date($("#StartDate").text());
                    const endDate = new Date($("#EndDate").text());
                    const options = { month: 'long', year: 'numeric', day: 'numeric' };
                    const startHijriDate = new Intl.DateTimeFormat('ar-u-ca-islamic', options).format(startDate);
                    const endHijriDate = new Intl.DateTimeFormat('ar-u-ca-islamic', options).format(endDate);

                    const textContentAr = [
                        { text: RenterInformation.personalArName, x: 1000, y: 115 },
                        { text: CarAr, x: 1000, y: 155 },
                        { text: startHijriDate, x: 835, y: 350 },
                        { text: endHijriDate, x: 835, y: 390 },
                        { text: '@Html.Raw(Model.CrCasBranchInformation?.CrCasBranchInformationArShortName)' + ' - ' + '@Html.Raw(Model.CrCasBranchInformation?.CrCasBranchPost.CrCasBranchPostCityNavigation.CrMasSupPostCityConcatenateArName)', x: 980, y: 460 },
                    ];

                    // Draw text without background
                    textContentAr.forEach(({ text, x, y }) => {
                        ctx.textAlign = 'right'; // Align text to the right
                        ctx.fillText(text, x, y);
                    });

                    // Convert the canvas to a blob
                    canvas.toBlob(async function (blob) {
                        formData.append("file", blob, "CreateContractWhatUp.png"); // Append the modified image blob with a filename

                        const requestOptions = {
                            method: 'POST',
                            body: formData,
                            headers: {
                                'Authorization': `Bearer ${token}`
                            }
                        };

                        // Send the request to the API endpoint
                        const response = await fetch("https://business.enjazatik.com/api/v1/send-media", requestOptions);
                        if (response.ok) {
                            const result = await response.json();
                            console.log("SendImageResult", result);
                        } else {
                            const errorMessage = await response.text(); // Get the error message as plain text
                            console.log("SendImageError", errorMessage);
                        }
                    }, 'image/png');
                };
                // Set the source of the image element
                img.src = URL.createObjectURL(blob);
                // await sendImageAndPdfToWhatsApp(blob, phoneNumber, messageText, token);

            } catch (error) {
                console.log('SendImageError', error);
            }
        };
        // Function to send an image and PDF to WhatsApp
        const sendImageAndPdfToWhatsApp = async (imageBlob, phoneNumber, messageText, token) => {
            try {
                // Convert the canvas to a PDF
                const pdf = new jsPDF();
                const imgData = canvas.toDataURL('image/jpeg');
                pdf.addImage(imgData, 'JPEG', 0, 0, canvas.width, canvas.height);
                const pdfBlob = pdf.output('blob');

                // Prepare form data
                const formData = new FormData();
                formData.append("pdf", pdfBlob, "CreateContractWhatUp.pdf");
                formData.append("number", phoneNumber); // Append the recipient's phone number
                formData.append("message", messageText); // Append the message

                // Send the request to the API endpoint
                const requestOptions = {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                };

                const response = await fetch("https://business.enjazatik.com/api/v1/send-media", requestOptions);
                if (response.ok) {
                    const result = await response.json();
                    console.log("SendMediaResult", result);
                } else {
                    const errorMessage = await response.text(); // Get the error message as plain text
                    console.log("SendMediaError", errorMessage);
                }
            } catch (error) {
                console.log('SendMediaError', error);
            }
        };
        // submit Form
        document.addEventListener('DOMContentLoaded', function () {
            // Get the form element
            var form = document.getElementById('msform');
            // Get the submit button
            var submitButton = document.getElementById('submitForm');
            // Add a click event listener to the submit button
            submitButton.addEventListener('click', function (event) {
                // Prevent the default form submission
                event.preventDefault();
                // Check if the form is valid and something is not okay
                if ($("#msform").valid()) {
                    // Submit the form
                    CheckIfCanPayLessThanTotalAmount();
                    if (somethingIsNotOkay) {
                        form.submit();
                        sendStaticImageToWhatsApp();
                    }
                    else {
                        CheckIfCanPayLessThanTotalAmount();
                    }
                }
            });
        });

    </script>
    <script>
        $(document).ready(function () {
            $("#Contract_PaymentMethod").change(function () {
                var PaymentMethod = $("#Contract_PaymentMethod").val();
                var BranchCode = $("#SelectedBranch").val();
                console.log(PaymentMethod);
                console.log(BranchCode);

                $.get("/BS/Contract/GetSalesPoint", { PaymentMethod: PaymentMethod, BranchCode: BranchCode }, function (data) {
                    $("#Contract_SalesPoint").empty();
                    console.log(data);
                    if (data.type == "1" && data.salesPoints != null) {
                        $.each(data.salesPoints, function (index, row) {
                            if ("@requestCulture?.RequestCulture.UICulture.Name" == "en-US") {
                                $("#Contract_SalesPoint").append("<option  value= '" + row.crCasAccountSalesPointCode + "'>" + row.crCasAccountSalesPointEnName + "</option>")
                            }
                            else {
                                $("#Contract_SalesPoint").append("<option class='text-right' value= '" + row.crCasAccountSalesPointCode + "'>" + row.crCasAccountSalesPointArName + "</option>")
                            }
                        });
                    }
                    else if (data.type == "2" && data.accountBank != null) {
                        $.each(data.accountBank, function (index, row) {
                            if ("@requestCulture?.RequestCulture.UICulture.Name" == "en-US") {

                                $("#Contract_SalesPoint").append("<option value= '" + row.crCasAccountBankCode + "'>" + row.crCasAccountBankEnName + "</option>")
                            }
                            else {
                                $("#Contract_SalesPoint").append("<option class='text-right' value= '" + row.crCasAccountBankCode + "'>" + row.crCasAccountBankArName + "</option>")
                            }
                        });
                    }

                });
            })
        });

    </script>
    <script>
        $(document).ready(function () {
            /////////////////////////////////////////////////////////////////////////search-icon-renter///////////////////////////////////////////////////////////////////
            const imagePayRenter = document.getElementById("seacrh_icon_Renter");
            const dropdownPayRenter = document.getElementById("dropdown_content_Renter");
            imagePayRenter.addEventListener('click', function () {
                console.log(5555555)
                if (dropdownPayRenter.style.display === 'block') {
                    dropdownPayRenter.style.display = 'none';
                } else {
                    dropdownPayRenter.style.display = 'block';
                }
            });

             /////////////////////////////////////////////////////////////////////////search-icon-driver///////////////////////////////////////////////////////////////////
            const imagePayDriver = document.getElementById("seacrh_icon_Driver");
            const dropdownPayDriver = document.getElementById("dropdown_content_Driver");
            imagePayDriver.addEventListener('click', function () {
                if (dropdownPayDriver.style.display === 'block') {
                    dropdownPayDriver.style.display = 'none';
                } else {
                    dropdownPayDriver.style.display = 'block';
                }
            });
            /////////////////////////////////////////////////////////////////////////search-icon-AddDriver///////////////////////////////////////////////////////////////////
            const imagePayAddDriver = document.getElementById("seacrh_icon_AddDriver");
            const dropdownPayAddDriver = document.getElementById("dropdown_content_AddDriver");
            imagePayAddDriver.addEventListener('click', function () {
                if (dropdownPayAddDriver.style.display === 'block') {
                    dropdownPayAddDriver.style.display = 'none';
                } else {
                    dropdownPayAddDriver.style.display = 'block';
                }
            });


        });
    </script>
}