@using Bnan.Core.Extensions;
@using Bnan.Ui.ViewModels.BS;
@using Microsoft.AspNetCore.Identity;
@using Newtonsoft.Json;
﻿@using Microsoft.AspNetCore.Builder;
@using Microsoft.AspNetCore.Localization;
@using Microsoft.AspNetCore.Http.Features;
@using Microsoft.AspNetCore.Mvc.Localization;
@using Microsoft.EntityFrameworkCore;
@using Microsoft.Extensions.Options;
@using System.Globalization;
@model BSLayoutVM
@inject IViewLocalizer localizer
@inject UserManager<CrMasUserInformation> userManager
@inject SignInManager<CrMasUserInformation> signinManager


@{
    var user = await userManager.GetUserAsync(User);
    var userInfo = await userManager.Users
      .Include(l => l.CrMasUserMainValidations)
      .Include(l => l.CrMasUserSubValidations)
      .Include(x => x.CrMasUserBranchValidities)
      .Include(x => x.CrMasUserContractValidity)
      .Include(l => l.CrMasUserInformationLessorNavigation)
      .FirstOrDefaultAsync(l => l.UserName == user.UserName);
    var requestCulture = Context.Features.Get<IRequestCultureFeature>();
    ViewData["returnUrl"] = string.IsNullOrEmpty(Context.Request.Path) ? "~/" : $"~{Context.Request.Path.Value}";
}
<style>
    .legend-item {
        font-size: .7rem;
        color: #000000;
        font-weight: bold;
    }
</style>
<!--  Chart -->
<div class=" col-lg-9 col-xl-9">

    <div class="card shadow mb-4">

        <div class="card-body" id="cardBody">

            <div class="main-carousel-item active" id="carouselItem1">
                <div class="row" id="first-row-of-charts">
                    <div class="col-md-6 card-col Branch-car-col">
                        <div class="row Branch-car-canvas-row" style="margin-top: 3%">
                            <div class=" col-md-9 col-lg-9 col-xl-9 ">
                                <canvas id="horizontal_bar" aria-label="chart"></canvas>
                            </div>
                            <div class=" ps-0 col-sm-3 col-md-3 col-lg-3 col-xl-3 pr-0"
                                 style="display: flex;justify-content: flex-end ;">
                                <p class="chart-p" style="margin-right:20px">@localizer["BranchCars"] : <span>@ViewBag.carCount</span></p>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6 card-col pieChart-col">
                        <div class="row " style="height: 240px">
                            <div class="col-sm-8 col-md-8 col-lg-7 col-xl-8 ">
                                <canvas id="pieChart" aria-label="chart" height="155px"></canvas>
                            </div>

                            <div class="col-sm-4 col-md-4 col-lg-5 col-xl-4 pieChart-data">
                                <div class="chart-legend">
                                    <div class="chart-p" style="margin-top: 14%;">
                                        <div>
                                            <p class="mb-2">@localizer["ExecutedContracts"] : <span>@Model.AlertContract.Count()</span></p>
                                        </div>
                                        <div>
                                            <p class="mb-2">@localizer["ClosedContracts"] : <span>@Model.AlertContract.FindAll(x=>x.CrCasRenterContractAlertContractStatus==Status.Closed).Count()</span></p>
                                        </div>
                                        <div>
                                            <p class="mb-2">@localizer["CanceledContracts"] : <span>@Model.AlertContract.FindAll(x=>x.CrCasRenterContractAlertContractStatus==Status.Cancel).Count()</span></p>
                                        </div>
                                    </div>
                                    <br>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>

                <!-- <hr color="#FF9626"> -->

                <div class="row" id="second-row-of-charts">

                    <div class="col-md-6 card-col branch-col">
                        <div class="row branch-row" style="margin-top:3%">
                            <div class="col-sm-8 col-md-8 col-lg-8 col-xl-8 ">
                                <canvas id="barChart2" aria-label="chart"></canvas>
                            </div>
                            <div class="col-sm-4 col-md-4 col-xl-4 col-lg-4 branch-chart-data">
                                <div class="data chart-p">
                                    <p class="mb-2">
                                        @localizer["BranchCustody"] : <span id="brunch-custody">@((Model.CrCasBranchInformation?.CrCasBranchInformationTotalBalance ?? 0).ToString("N2", CultureInfo.InvariantCulture))</span>
                                    </p>
                                    <p class="mb-2">
                                        @localizer["AvailableBalance"] : <span id="Available-balance-brunch">@((Model.CrCasBranchInformation?.CrCasBranchInformationAvailableBalance ?? 0).ToString("N2", CultureInfo.InvariantCulture))</span>
                                    </p>
                                    <p class="mb-2">
                                        @localizer["ReservedBalance"] : <span id="used-balance-brunch">@((Model.CrCasBranchInformation?.CrCasBranchInformationReservedBalance ?? 0).ToString("N2", CultureInfo.InvariantCulture))</span>
                                    </p>
                                    <!--  -->
                                </div>

                            </div>
                        </div>
                    </div>

                    <div class="col-md-6 card-col employee-col">
                        <div class="row employee-row" style="height: 240px;margin-top:3%">
                            <div class="col-sm-8 col-md-8 col-lg-8 col-xl-8  ">
                                <canvas id="chartId" aria-label="chart"></canvas>
                            </div>
                            <div class="col-sm-4 col-md-4 col-xl-4 col-lg-4 employee-chart-data">
                                <div class="data chart-p">
                                    @{
                                        var branchValidity = Model.CrMasUserBranchValidity;
                                        var totalAvaliableBalanceInBranch = branchValidity?.CrMasUserBranchValidityBranchCashAvailable +
                                        branchValidity?.CrMasUserBranchValidityBranchSalesPointAvailable +
                                        branchValidity?.CrMasUserBranchValidityBranchTransferAvailable;

                                        var totalResevedBalanceInBranch = branchValidity?.CrMasUserBranchValidityBranchCashReserved +
                                        branchValidity?.CrMasUserBranchValidityBranchSalesPointReserved +
                                        branchValidity?.CrMasUserBranchValidityBranchTransferReserved;

                                        var totalBalanceInBranch = branchValidity?.CrMasUserBranchValidityBranchSalesPointBalance +
                                        branchValidity?.CrMasUserBranchValidityBranchCashBalance +
                                        branchValidity?.CrMasUserBranchValidityBranchTransferBalance;

                                    }
                                    <p class="mb-2">
                                        @localizer["EmployeeCustody"] : <span id="employee-custody">@((totalBalanceInBranch ?? 0).ToString("N2", CultureInfo.InvariantCulture))</span>
                                    </p>
                                    <p class="mb-2">
                                        @localizer["AvailableBalance"] : <span id="Available-balance-employee">@((totalAvaliableBalanceInBranch ?? 0).ToString("N2", CultureInfo.InvariantCulture))</span>
                                    </p>
                                    <p class="mb-2">
                                        @localizer["ReservedBalance"] : <span id="used-balance-employee">@((totalResevedBalanceInBranch ?? 0).ToString("N2", CultureInfo.InvariantCulture))</span>
                                    </p>
                                    <!--  -->
                                </div>

                            </div>
                        </div>
                    </div>

                </div>
            </div>
            <div class="main-carousel-item" id="carouselItem2">
                <partial name="_RentedCars" />
            </div>
            <div class="main-carousel-item" id="carouselItem3">
                <partial name="_AvaliableCar" />
            </div>
            <div class="main-carousel-item" id="carouselItem4">
                <partial name="_UnAvailableCar" />
            </div>
        </div>

    </div>

</div>
<div class="col-lg-3 col-xl-2  bg-transparent " id="button-on-mobile">
    <!-- Updated width and added new classes for the second card -->
    <!-- Card Body -->
    <div class="card-body p-0 mt-2">
        @if (requestCulture?.RequestCulture.UICulture.Name == "en-US")
        {
            @Html.DropDownListFor(model => model.SelectedBranch, new SelectList(Model.CrCasBranchInformations, "CrCasBranchInformationCode", "CrCasBranchInformationEnShortName", Model.SelectedBranch),new { id = "branchList", @class = "text-left" })
        }
        else
        {
            @Html.DropDownListFor(model => model.SelectedBranch, new SelectList(Model.CrCasBranchInformations, "CrCasBranchInformationCode", "CrCasBranchInformationArShortName", Model.SelectedBranch),new { id = "branchList", @class = "text-right" })
        }
        <label for="brunch_name" style="color: black;">@localizer["Branch"]</label>
        <br>
        <button type="button" class="btn btn-secondary1  mt-2 active1" id="chart"
                onclick="showCarouselItem(1) , setActiveButton(0)">
            <img src="~/BranchSys/img/Rectangle 74.png"
                 class="chart-buttons-img">@localizer["Statistics"]
        </button>
        <button type="button" class="btn btn-secondary1" id="toggleCarousel">
            <img src="~/BranchSys/img/Rectangle 75 .png"
                 class="chart-buttons-img">@localizer["Rented"]
        </button>
        <button type="button" class="btn btn-secondary1 " id="toggleCarousel2">
            <img src="~/BranchSys/img/Rectangle 76.png"
                 class="chart-buttons-img">@localizer["Avaliable"]
        </button>
        <button type="button" class="btn btn-secondary1 " id="toggleCarousel3">
            <img src="~/BranchSys/img/Rectangle 77.png"
                 class="chart-buttons-img">@localizer["UnAvaliable"]
        </button>
        <button type="button" class="btn btn-secondary1" onclick="setActiveButton(4)">
            <img src="~/BranchSys/img/Rectangle 78.png"
                 class="chart-buttons-img">@localizer["Messages"]
        </button>
    </div>

</div>
<footer class="fixed-bottom-xl" style="margin-top:1.95%">
    <div class="before-footer-widget">
        <svg width: 100%; height:auto viewbox="0 0 2444 132">
            <path fill="rgba(254, 248, 232, 1)" fill-rule="evenodd"
                  d="M1222 0h1222c-444.13 88-852.127 132-1223.993 132C849.253 132 442.585 88.263 0 .789V0h1222z">
            </path>
        </svg>
    </div>
    <div class="container footer-buttons justify-content-center pt-1 " style="box-sizing: border-box; ">
        <div class="row justify-content-center">
            <!-- First row of buttons -->
            <div class="col-sm-6 col-md-6 col-lg-3 ">
                <button type="button" class="btn btn-secondary mb-2">
                    <img src="~/BranchSys/img/Rectangle 35.png">
                    @localizer["CancelContract"]
                </button>
            </div>
            <div class="col-sm-6 col-md-6 col-lg-3  ">
                <a class="btn btn-secondary mb-2" id="ExtensionContract">
                    <img src="~/BranchSys/img/Rectangle 31.png">
                    @localizer["ContractExtension"]
                </a>
            </div>
            <div class="col-sm-6 col-md-6 col-lg-3  ">
                <button type="button" class="btn btn-secondary mb-2" id="ContractSettlement">
                    <img src="~/BranchSys/img/Rectangle 30.png">
                    @localizer["ContractSettlement"]
                </button>
            </div>
            <div class="col-sm-6 col-md-6 col-lg-3  ">
                <a id="CreateContract" class="btn btn-secondary mb-2">
                    <img src="~/BranchSys/img/Rectangle 29.png">
                    @localizer["CreateContract"]
                </a>
            </div>
        </div>
        <div class="row justify-content-center  ">
            <!-- Second row of buttons -->
            <div class="col-sm-6 col-md-6 col-lg-3 mb-1 ">
                <button type="button" class="btn btn-secondary" id="CustodyBtn">
                    <img src="~/BranchSys/img/Rectangle 36.png" id="anmCustody">
                    @localizer["TheCovenant"]
                </button>
            </div>
            <div class="col-sm-6 col-md-6 col-lg-3 mb-1">
                <a class="btn btn-secondary" id="pulse-button-employee">
                    <img src="~/BranchSys/img/Rectangle 33.png" id="anmFeedBox">
                    @localizer["Feedbox"]
                </a>
            </div>
            <div class="col-sm-6 col-md-6 col-lg-3  mb-1  ">
                <a class="btn btn-secondary " id="ReportBtn">
                    <img src="~/BranchSys/img/Rectangle 32.png">
                    @localizer["FinancialReport"]
                </a>
            </div>
            <div class="col-sm-6 col-md-6 col-lg-3  mb-1 ">
                <a class="btn btn-secondary" id="RenterBtn">
                    <img src="~/BranchSys/img/Rectangle 34.png">
                    @localizer["Tenants"]
                </a>
            </div>
        </div>
    </div>
</footer>

@section Scripts {
    <!--Charts-->
    <script src="~/js/toastr.js"></script>
    <script>
        $(document).ready(function () {
            ////////////////////////charts////////////////////////////////
            //Cars

            var available_cars = "@ViewBag.AvaliableCars";
            var not_available_cars = "@ViewBag.UnAvaliableCars";
            var rented_cars = "@ViewBag.RentedCars";
            console.log(available_cars.length)
            var barChart1 = document.getElementById("horizontal_bar").getContext("2d");
            var myChart1 = new Chart(barChart1, {
                type: "bar",
                data: {
                    labels: ['@localizer["Avaliable"]', '@localizer["Rented"]', '@localizer["UnAvaliable"]'],
                    datasets: [
                        {
                            data: [available_cars, rented_cars, not_available_cars],
                            backgroundColor: [
                                "rgba(255, 150, 38, 1)",
                                "rgba(151, 71, 255, 1)",
                                "rgba(255, 38, 38, 1)",
                            ],

                        }
                    ]
                },
                options: {
                    indexAxis: 'y',
                    plugins: {
                        legend: {
                            display: false
                        },
                        // tooltip: {
                        //     callbacks: {
                        //         label: function (context) {
                        //             var label = [];
                        //             label = getCountByVersion(context.dataIndex);
                        //             return label;
                        //         }
                        //     }
                        // }
                    },
                    scales: {
                        x: {
                            grid: {
                                display: false // Remove vertical lines
                            },
                            ticks: {
                                font: {
                                    family: 'Cairo, sans-serif', // Change the font family
                                    size: 12,
                                    weight: 'bold' // Change the font weight (e.g., 'normal', 'bold', 'bolder', 'lighter', or numeric value)
                                    // Change the font size
                                }
                            }
                        },
                        y: {
                            grid: {
                                display: false // Remove horizontal lines
                            },
                            ticks: {
                                font: {
                                    family: 'Cairo, sans-serif', // Change the font family
                                    size: 12,
                                    weight: 'bold' // Change the font weight (e.g., 'normal', 'bold', 'bolder', 'lighter', or numeric value)
                                    // Change the font size
                                }
                            },
                            beginAtZero: true,
                        }
                    },
                    layout: {
                        padding: {
                            left: 10,
                            right: 10,
                            top: 10,
                            bottom: 10
                        }
                    },
                    responsive: true,
                    maintainAspectRatio: false,
                    barPercentage: 0.6, // Adjust the width of the bars
                    categoryPercentage: 0.8 // Adjust the width of the bars
                }
            });
            // function getCountByVersion(dataIndex) {
            //     var versions = {};
            //     var cars;

            //     switch (dataIndex) {
            //         case 0:
            //             cars = available_cars;
            //             break;
            //         case 1:
            //             cars = rented_cars;
            //             break;
            //         case 2:
            //             cars = not_available_cars;
            //             break;
            //         default:
            //             cars = [];
            //     }

            //     cars.forEach(function (version) {
            //         if (!versions[version]) {
            //             versions[version] = 1;
            //         } else {
            //             versions[version]++;
            //         }
            //     });

            //     var countByVersion = [];
            //     Object.keys(versions).forEach(function (version) {
            //         countByVersion.push(versions[version] + ':' + version + "\n\r");
            //     });

            //     return countByVersion;
            // }
        });


    </script>

    <script>

        $(document).ready(function () {
            // Bar Chart 2
            //Branch
            var paymentMethodsBranchData = @Html.Raw(Json.Serialize(Model.PaymentMethodsBranch));
            console.log(paymentMethodsBranchData);
            var labelsBranch;
            if ('@requestCulture?.RequestCulture.UICulture.Name' == "en-US") {

                labelsBranch = paymentMethodsBranchData.map(function (paymentMethod) {
                    return paymentMethod.enName;
                });
            }
            else{
                labelsBranch = paymentMethodsBranchData.map(function (paymentMethod) {
                    return paymentMethod.arName;
                });
            }


            var data = paymentMethodsBranchData.map(function (paymentMethod) {
                return paymentMethod.value;
            });

            var barChart2 = document.getElementById("barChart2").getContext("2d");
            var myChart = new Chart(barChart2, {
                type: "bar",
                data: {
                    labels: labelsBranch,
                    datasets: [
                        {
                            data: data,
                            backgroundColor: [
                                "rgba(255, 99, 132, 1)",
                                "rgba(54, 162, 235, 1)",
                                "rgba(255, 206, 86, 1)",
                                "rgba(75, 192, 192, 1)",
                                "rgba(153, 102, 255, 1)"
                            ],

                        }
                    ]
                },
                options: {
                    plugins: {

                        legend: {
                            display: false
                        }

                    },
                    scales: {
                        x: {
                            grid: {
                                display: false // Remove vertical lines
                            },
                            ticks: {
                                font: {
                                    family: 'Cairo, sans-serif', // Change the font family
                                    size: 12,
                                    weight: 'bold' // Change the font weight (e.g., 'normal', 'bold', 'bolder', 'lighter', or numeric value)
                                    // Change the font size
                                }
                            }
                        },
                        y: {
                            grid: {
                                display: false // Remove horizontal lines
                            },
                            beginAtZero: true,
                            ticks: {
                                font: {
                                    family: 'Cairo, sans-serif', // Change the font family
                                    size: 12,
                                    weight: 'bold' // Change the font weight (e.g., 'normal', 'bold', 'bolder', 'lighter', or numeric value)
                                    // Change the font size
                                }
                            }
                        }

                    }
                }
            });
        });

    </script>
    <script>
        $(document).ready(function () {
            //Employee Balance
            var paymentMethodsUserData = @Html.Raw(Json.Serialize(Model.PaymentMethodsUser));
            console.log(paymentMethodsUserData);
            var labelsUser;
            if ('@requestCulture?.RequestCulture.UICulture.Name' == "en-US") {

                labelsUser = paymentMethodsUserData.map(function (paymentMethod) {
                    return paymentMethod.enName;
                });
            }
            else {
                labelsUser = paymentMethodsUserData.map(function (paymentMethod) {
                    return paymentMethod.arName;
                });
            }
            var dataUser = paymentMethodsUserData.map(function (paymentMethod) {
                return paymentMethod.value;
            });
            var chrt = document.getElementById("chartId").getContext("2d");
            var chartId = new Chart(chrt, {
                type: "bar",
                data: {
                    labels: labelsUser,
                    datasets: [
                        {
                            data: dataUser,
                            backgroundColor: [
                                "rgba(255, 99, 132, 1)",
                                "rgba(54, 162, 235, 1)",
                                "rgba(255, 206, 86, 1)",
                                "rgba(75, 192, 192, 1)",
                                "rgba(153, 102, 255, 1)"
                            ],


                        }
                    ]
                },
                options: {
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        x: {
                            grid: {
                                display: false // Remove vertical lines
                            },
                            ticks: {
                                font: {
                                    family: 'Cairo, sans-serif', // Change the font family
                                    size: 12,
                                    weight: 'bold' // Change the font weight (e.g., 'normal', 'bold', 'bolder', 'lighter', or numeric value)
                                    // Change the font size
                                }
                            }
                        },
                        y: {
                            grid: {
                                display: false // Remove horizontal lines
                            },
                            beginAtZero: true,
                            ticks: {
                                font: {
                                    family: 'Cairo, sans-serif', // Change the font family
                                    size: 12,
                                    weight: 'bold' // Change the font weight (e.g., 'normal', 'bold', 'bolder', 'lighter', or numeric value)
                                    // Change the font size
                                }
                            }
                        }

                    }
                }
            });
        });

    </script>

    <script>
        $(document).ready(function () {
            const pieChartEl = document.getElementById('pieChart');
            const pieChartData = {
                labels: ['@localizer["ExpiredContract"]', '@localizer["ExpiresToday"]', '@localizer["ExpiresTomorrow"]', '@localizer["ExpiresLater"]'],
                datasets: [{
                    data: [@Model.AlertContract?.FindAll(x=>x.CrCasRenterContractAlertContractActiviteStatus=="3").Count(),
                            @Model.AlertContract?.FindAll(x=>x.CrCasRenterContractAlertContractActiviteStatus=="0").Count(),
                            @Model.AlertContract?.FindAll(x=>x.CrCasRenterContractAlertContractActiviteStatus=="1").Count(),
                            @Model.AlertContract?.FindAll(x=>x.CrCasRenterContractAlertContractActiviteStatus=="2").Count()],
                    backgroundColor: ['rgba(242, 36, 36, 1)', '#9966FF', 'rgba(242, 143, 36, 1)', 'rgba(54, 162, 235, 1)']
                }]
            };

            const pieChart = new Chart(pieChartEl, {
                type: 'doughnut',
                data: pieChartData,
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: function (context) {
                                    return context.dataset.data[context.dataIndex];
                                }
                            }
                        },
                        legend: {
                            display: false
                        }
                    }
                }
            });


            const legendContainer = document.querySelector('.chart-legend');
            const legendItems = pieChartData.labels.map((label, index) => {
                const dataset = pieChartData.datasets[0];
                const backgroundColor = dataset.backgroundColor[index];
                const legendItem = document.createElement('div');
                legendItem.classList.add('legend-item');
                legendItem.innerHTML = `${label}<span style="background-color:${backgroundColor}"></span>`;
                return legendItem;
            });

            legendItems.forEach(item => {
                legendContainer.appendChild(item);
            });

        });


    </script>


    <script>

        function loadRentedCars() {
            $.ajax({
                url: "/BS/Home/GetRentedCars", // Replace YourController with your actual controller name
                type: "GET",
                success: function (data) {
                    $("#carouselItem2").html(data);
                },
                error: function () {
                    alert("Error loading data.");
                }
            });
        }
        $("#toggleCarousel").on("click", function () {
            var RentedCars = "@ViewBag.RentedCars"
            if (parseInt(RentedCars) > 0) {
                setActiveButton(1);
                showCarouselItem(2);
                loadRentedCars();
                setTimeout(function () {
                    initCarousel();
                }, 1000);
            }
            else {
                toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                toastr.error('@localizer["RentedCarsIsEmptyTab"]');
            }

        });

        function loadAvaliableCars() {
            $.ajax({
                url: "/BS/Home/GetAvaliableCars", // Replace YourController with your actual controller name
                type: "GET",
                success: function (data) {
                    $("#carouselItem3").html(data);
                },
                error: function () {
                    alert("Error loading data.");
                }
            });
        }
        $("#toggleCarousel2").on("click", function () {
            var AvaliableCars = "@ViewBag.AvaliableCars"
            console.log("AvaliableCars:", AvaliableCars)

            if (parseInt(AvaliableCars) > 0) {
                showCarouselItem(3);
                setActiveButton(2);
                loadAvaliableCars();
                setTimeout(function () {
                    initCarousel2();
                }, 1000);
            }
            else {
                toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                toastr.error('@localizer["AvaliableCarsIsEmptyTab"]');
            }

        });

        function loadUnAvaliableCars() {
            $.ajax({
                url: "/BS/Home/GetUnAvaliableCars", // Replace YourController with your actual controller name
                type: "GET",
                success: function (data) {
                    $("#carouselItem4").html(data);
                },
                error: function () {
                    alert("Error loading data.");
                }
            });
        }
        $("#toggleCarousel3").on("click", function () {
            var UnAvaliableCars = "@ViewBag.UnAvaliableCars"
            if (parseInt(UnAvaliableCars) > 0) {
                showCarouselItem(4);
                setActiveButton(3);
                loadUnAvaliableCars();
                setTimeout(function () {
                    initCarousel3();
                }, 1000);
            }
            else {
                toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                toastr.error('@localizer["UnAvaliableCarsIsEmptyTab"]');
            }
        });

    </script>

    <script>
        $(document).ready(function () {
            // Attach a change event handler to the dropdown
            $("#branchList").change(function () {
                var selectedBranch = $(this).val();

                // Make an AJAX call
                $.ajax({
                    url: "/BS/Home/ChangeBranch", // Update with your controller and action
                    type: "GET",
                    data: { selectedBranch: selectedBranch },
                    success: function (result) {
                        window.location.href = "/BS/Home/Index";
                    },
                    error: function () {
                        // Handle errors if necessary
                        console.log("Error occurred");
                    }
                });
            });
        });
    </script>
    <script>
        $(document).ready(function () {
            var model1 = '@ViewBag.Adminstritive';
            // Check the value of the model variable
            if (model1 === '0') {
                // If model is 0, remove the class neonShadow
                $('#pulse-button-employee').removeClass('neonShadow');
                $('#anmFeedBox').removeClass('anm');
            } else {
                // If model is not 0, add the class neonShadow
                $('#pulse-button-employee').addClass('neonShadow');
                $('#anmFeedBox').addClass('anm');
            }
        });
    </script>
    <script>
        $(document).ready(function () {
            var Limit = '@user.CrMasUserInformationCreditLimit';
            var TotalBalance = '@user.CrMasUserInformationAvailableBalance';
            console.log("Limit", Limit)
            console.log("TotalBalance", TotalBalance)
            // Check the value of the model variable
            if (parseFloat(TotalBalance) <= parseFloat(Limit)) {
                // If model is 0, remove the class neonShadow
                $('#CustodyBtn').removeClass('neonShadow');
                $('#anmCustody').removeClass('anm');
            } else {
                // If model is not 0, add the class neonShadow
                $('#CustodyBtn').addClass('neonShadow');
                $('#anmCustody').addClass('anm');
            }
        });
    </script>

    <script>
        var model2 = '@ViewBag.Adminstritive';
        document.getElementById('pulse-button-employee').addEventListener('click', function () {
            console.log("Adminstritive", model2)
            if (model2 == '0') {
                toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                toastr.error('@localizer["toastMessageExistFeedBox"]');
                return; // Prevent further execution
            } else {
                window.location.href = "/BS/FeedBox/Index";
            }
        });
    </script>
    <script>
        var RenterLessorCount = '@ViewBag.RenterLessorCount';
        document.getElementById('RenterBtn').addEventListener('click', function () {
            console.log(RenterLessorCount)
            if (RenterLessorCount == '0') {
                toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                toastr.error('@localizer["toastMessageExistRenters"]');
                return; // Prevent further execution
            } else {
                window.location.href = "/BS/Renters/Index";
            }
        });
    </script>
    <script>
        var AcccountReceiptCount = '@ViewBag.AcccountReceiptCount';
        document.getElementById('ReportBtn').addEventListener('click', function () {
            console.log(AcccountReceiptCount)
            if (AcccountReceiptCount == '0') {
                toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                toastr.error('@localizer["toastMessageExistReceipts"]');
                return; // Prevent further execution
            } else {
                window.location.href = "/BS/Report/Index";
            }
        });
    </script>
    <!--Custody Auth-->
    <script>
        var CashAvailable = '@user.CrMasUserBranchValidities.FirstOrDefault(x=>x.CrMasUserBranchValidityBranch==Model.SelectedBranch)?.CrMasUserBranchValidityBranchCashAvailable';
        var SalesPointAvailable = '@user.CrMasUserBranchValidities.FirstOrDefault(x=>x.CrMasUserBranchValidityBranch==Model.SelectedBranch)?.CrMasUserBranchValidityBranchSalesPointAvailable';
        // var TransferAvailable = '@user.CrMasUserBranchValidities.FirstOrDefault(x=>x.CrMasUserBranchValidityBranch==Model.SelectedBranch)?.CrMasUserBranchValidityBranchTransferAvailable';
        var total = parseFloat(CashAvailable) + parseFloat(SalesPointAvailable);
        document.getElementById('CustodyBtn').addEventListener('click', function () {
            console.log(total)
            if (total > 0) {
                window.location.href = "/BS/Custody/Index";
            } else {
                toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                toastr.error('@localizer["toastMessageExistCustody"]');
                return; // Prevent further execution
            }
        });
    </script>
    <!--Authrization-->
    <script>
        document.getElementById("CreateContract").addEventListener('click', function () {
            var createAuth = "@userInfo?.CrMasUserContractValidity?.CrMasUserContractValidityCreate";
            var userStatus = "@userInfo?.CrMasUserInformationStatus";
            var userMobile = "@userInfo?.CrMasUserInformationMobileNo";
            var lessorStatus = "@userInfo?.CrMasUserInformationLessorNavigation?.CrMasLessorInformationStatus";
            var BranchStatus = "@Model?.CrCasBranchInformation?.CrCasBranchInformationStatus";
            var CarsAvaliableNo = "@ViewBag.AvaliableCars";
            var CompanyContract = "@userInfo?.CrMasUserInformationLessorNavigation?.CrMasContractCompanies.Where(x=>x.CrMasContractCompanyStatus==Status.Expire||x.CrMasContractCompanyStatus==Status.Renewed).Count()";
            var CompanyDocuments = "@userInfo?.CrMasUserInformationLessorNavigation?.CrCasBranchDocuments.Where(x=>x.CrCasBranchDocumentsStatus==Status.Expire || x.CrCasBranchDocumentsStatus==Status.Renewed).Count()";
            var checkContractValidity = "";
            var selectedBranch = "@Model?.SelectedBranch";
            if (createAuth.toLowerCase() === "false" || createAuth == null || createAuth == "") {
                toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                toastr.error('@localizer["toastMessage"]');
                return
            }
            else if (userStatus !== "@Status.Active") {
                toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                toastr.error('@localizer["toastMessageUserHold"]');
                return
            }
            else if (BranchStatus !== "@Status.Active") {
                toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                toastr.error('@localizer["toastMessageBranchHold"]');
                return
            }
            else if (lessorStatus !== "@Status.Active") {
                toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                toastr.error('@localizer["toastMessageLessorHold"]');
                return
            }
            else if (parseInt(CarsAvaliableNo) == 0) {
                toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                toastr.error('@localizer["AvaliableCarsIsEmptyTab"]');
                return
            }
            else if (CompanyContract > 0) {
                toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                toastr.error('@localizer["toastMessageCompanyContractExpired"]');
                return
            }
            else if (CompanyDocuments > 0) {
                $.ajax({
                    url: "/BS/Home/CheckCompanyDocuments", // Replace YourController with your actual controller name
                    type: "GET",
                    data: { selectedBranch: selectedBranch },
                    success: function (data) {
                        var checkContract = data;
                        if (checkContract == "100") {
                            toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                            toastr.error('@localizer["toastMessageCompanyDocumentRegister"]');
                            return
                        }
                        else if (checkContract == "101") {
                            toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                            toastr.error('@localizer["toastMessageCompanyDocumentChamber"]');
                            return
                        }
                        else if (checkContract == "102") {
                            toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                            toastr.error('@localizer["toastMessageCompanyDocumentTransferPermission"]');
                            return
                        }
                        else if (checkContract == "103") {
                            toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                            toastr.error('@localizer["toastMessageCompanyDocumentLicenceMunicipale"]');
                            return
                        }
                        else if (checkContract == "104") {
                            toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                            toastr.error('@localizer["toastMessageCompanyDocumentLicenceAddress"]');
                            return
                        }
                        else {
                            window.location.href = "/BS/Contract/CreateContract";
                        }
                    }
                });

            }
            else if (userMobile == null || userMobile == "") {
                toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                toastr.error('@localizer["PleaseEnterMobile"]');
                return
            }
            else {
                window.location.href = "/BS/Contract/CreateContract";
            }
        })

    </script>
    <script>
        document.getElementById("ExtensionContract").addEventListener('click', function () {
            var ExtensionAuth = "@userInfo?.CrMasUserContractValidity?.CrMasUserContractValidityExtension";
            var userStatus = "@userInfo?.CrMasUserInformationStatus";
            var lessorStatus = "@userInfo?.CrMasUserInformationLessorNavigation?.CrMasLessorInformationStatus";
            var BranchStatus = "@Model?.CrCasBranchInformation?.CrCasBranchInformationStatus";
            var CompanyContract = "@userInfo?.CrMasUserInformationLessorNavigation?.CrMasContractCompanies.Where(x=>x.CrMasContractCompanyStatus==Status.Expire||x.CrMasContractCompanyStatus==Status.Renewed).Count()";
            var CompanyDocuments = "@userInfo?.CrMasUserInformationLessorNavigation?.CrCasBranchDocuments.Where(x=>x.CrCasBranchDocumentsStatus==Status.Expire || x.CrCasBranchDocumentsStatus==Status.Renewed).Count()";
            var checkContractValidity = "";
            var selectedBranch = "@Model?.SelectedBranch";
            if (ExtensionAuth.toLowerCase() === "false" || ExtensionAuth == null || ExtensionAuth == "") {
                toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                toastr.error('@localizer["toastMessage"]');
                return
            }
            else if (userStatus !== "@Status.Active") {
                toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                toastr.error('@localizer["toastMessageUserHold"]');
                return
            }
            else if (BranchStatus !== "@Status.Active") {
                toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                toastr.error('@localizer["toastMessageBranchHold"]');
                return
            }
            else if (lessorStatus !== "@Status.Active") {
                toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                toastr.error('@localizer["toastMessageLessorHold"]');
                return
            }
            else if (CompanyContract > 0) {
                toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                toastr.error('@localizer["toastMessageCompanyContractExpired"]');
                return
            }
            else if (CompanyDocuments > 0) {
                $.ajax({
                    url: "/BS/Home/CheckCompanyDocuments", // Replace YourController with your actual controller name
                    type: "GET",
                    data: { selectedBranch: selectedBranch },
                    success: function (data) {
                        var checkContract = data;
                        if (checkContract == "100") {
                            toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                            toastr.error('@localizer["toastMessageCompanyDocumentRegister"]');
                            return
                        }
                        else if (checkContract == "101") {
                            toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                            toastr.error('@localizer["toastMessageCompanyDocumentChamber"]');
                            return
                        }
                        else if (checkContract == "102") {
                            toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                            toastr.error('@localizer["toastMessageCompanyDocumentTransferPermission"]');
                            return
                        }
                        else if (checkContract == "103") {
                            toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                            toastr.error('@localizer["toastMessageCompanyDocumentLicenceMunicipale"]');
                            return
                        }
                        else if (checkContract == "104") {
                            toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                            toastr.error('@localizer["toastMessageCompanyDocumentLicenceAddress"]');
                            return
                        }
                        else {
                            window.location.href = "/BS/ContractExtension/Index";
                        }
                    }
                });

            }
            else {
                window.location.href = "/BS/ContractExtension/Index";
            }
        })

    </script>
}

