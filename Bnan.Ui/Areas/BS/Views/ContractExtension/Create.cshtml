@using Bnan.Core.Extensions;
@using Bnan.Ui.ViewModels.BS;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.EntityFrameworkCore;
@using Newtonsoft.Json;
@using System.Globalization;
@model BSLayoutVM
@inject UserManager<CrMasUserInformation> userManager
@inject SignInManager<CrMasUserInformation> signinManager
@inject IViewLocalizer localizer
@{
    var user = await userManager.GetUserAsync(User);
    var requestCulture = Context.Features.Get<IRequestCultureFeature>();
    ViewData["returnUrl"] = string.IsNullOrEmpty(Context.Request.Path) ? "~/" : $"~{Context.Request.Path.Value}";
    var userInfo = await userManager.Users
          .Include(l => l.CrMasUserMainValidations)
          .Include(l => l.CrMasUserSubValidations)
          .Include(l => l.CrMasUserInformationLessorNavigation)
          .Include(l => l.CrMasUserContractValidity)
          .FirstOrDefaultAsync(l => l.UserName == user.UserName);
    var lessorInfo = await userManager.Users.Include(l => l.CrMasUserInformationLessorNavigation).ThenInclude(l => l.CrMasLessorImage).FirstOrDefaultAsync(x => x.UserName == user.UserName);
}



<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" integrity="sha384-..." crossorigin="anonymous">
<link rel="stylesheet" href="~/css/toastr.css" />
<link href="~/BranchSys/css/loader.css" rel="styleSheet">
<link href="~/BranchSys/Pages/css/style.css" rel="styleSheet">
@if (requestCulture?.RequestCulture.UICulture.Name != "ar-EG")
{
    <link href="~/BranchSys/Pages/css/English_style.css" rel="styleSheet">
}
<style>
    .form-control[readonly] {
        background-color: white;
    }
</style>
<div class="container-fluid ">
    <section class="section-mainCard">
        <div class="row justify-content-center w-100 h-100">
            <div class="col-11 col-sm-10 col-md-11 col-lg-11 col-xl-10 text-center p-0 ">
                <div class="card main-card ">
                    <div class="row pt-2">
                        <a asp-action="Index" asp-area="BS" asp-controller="Home" style="width: fit-content;">
                            <img src="~/BranchSys/Pages/img/cancel.png" alt="cancle_icon" class="cancle-icon">
                        </a>
                    </div>
                    <div class="row layout-row">

                        <div class="row" style="flex-direction: row-reverse;">
                            <div class="col justify-content-center d-flex title-row">
                                <h1 class="card-title">
                                    @localizer["ContractExtension"]
                                </h1>
                            </div>

                        </div>
                        <div class="row justify-content-center h-100 content-row">

                            <div class="col-md-11 mx-0 h-100">

                                <form id="msform" class="needs-validation" asp-area="BS" asp-action="Create" asp-controller="ContractExtension" novalidate>
                                    <input hidden asp-for="SelectedBranch" />
                                    <input hidden asp-for="ExtensionContract.CrCasRenterContractBasicNo" />
                                    <!-- i send values here to input -->
                                    <input hidden asp-for="ExtensionContract.TotalAmount" />
                                    <input hidden asp-for="ExtensionContract.TotalContract" />
                                    <input hidden asp-for="ExtensionContract.TaxValue" />
                                    <input hidden asp-for="ExtensionContract.DiscountValue" />
                                    <input hidden asp-for="ExtensionContract.RentValue" />
                                    <input hidden asp-for="ExtensionContract.DaysNo" />
                                    <input hidden id="ExtensionValue" name="ExtensionValue" />
                                    <input hidden id="SavePdfArInvoice" name="SavePdfArInvoice" />
                                    <input hidden id="SavePdfEnInvoice" name="SavePdfEnInvoice" />
                                    <input hidden id="SavePdfArReceipt" name="SavePdfArReceipt" />
                                    <input hidden id="SavePdfEnReceipt" name="SavePdfEnReceipt" />
                                    <input hidden asp-for="ExtensionContract.AccountReceiptNo" />
                                    <input hidden asp-for="ExtensionContract.InitialInvoiceNo" />
                                    <input hidden id="language" name="language" />
                                    <fieldset>
                                        <div class="form-card extension2-card">
                                            <a href="https://drive.google.com/file/d/1q2Mb1uLGjLIvRphej_9X4zHhc9OuCcyB/view" target="_blank" class="pdf-anchor"><img src="~/BranchSys/Pages/img/pdf.png" alt="pdf for contract details" class="pdf_img"></a>
                                            <div class="row g-0 " style="flex-direction: row-reverse;align-items: flex-start;">
                                                <div class=" col-md-7 col-lg-7 d-flex " style="flex-direction:row-reverse;flex-wrap:wrap">
                                                    <div class="col-auto ">
                                                        <P>@localizer["ContractNo"]</P>
                                                    </div>
                                                    <div class="col-auto personal-data">
                                                        <P>@Model.ExtensionContract.CrCasRenterContractBasicNo</P>
                                                    </div>
                                                    <div class="col-lg-6 col-md-12 seacrh-icon-col">
                                                        <div class="col-sm-12  d-flex justify-content-end">

                                                            <img src="~/BranchSys/Pages/img/seacrh-icon.png"
                                                                 alt="seacrh-icon Image" id="hover-image-extension2">
                                                        </div>
                                                        <div class="dropdown-content  dropdown-content-extension" id="dropdown-content-extension2">
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-4 ">
                                                                    <p>@localizer["ExpectedEndDate"]</p>
                                                                </div>
                                                                <div class="col personal-data">
                                                                    <p>@Model.ExtensionContract.CrCasRenterContractBasicExpectedEndDate?.ToString("yyyy/MM/dd", CultureInfo.InvariantCulture)</p>
                                                                </div>
                                                            </div>
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-4 ">
                                                                    <p>@localizer["DaysRemaining"]</p>
                                                                </div>
                                                                <div class="col personal-data">
                                                                    <p>@((Model.ExtensionContract.CrCasRenterContractBasicExpectedEndDate - DateTime.Now)?.Days)</p>
                                                                </div>

                                                            </div>
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-4 ">
                                                                    <p>@localizer["AuthType"]</p>
                                                                </div>
                                                                <div class="col personal-data">
                                                                    <p>
                                                                        @if (Model.ExtensionContract.AuthType == true)
                                                                        {
                                                                            @localizer["OutFees"]
                                                                        }
                                                                        else
                                                                        {
                                                                            @localizer["InFees"]
                                                                        }
                                                                    </p>
                                                                </div>

                                                            </div>
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-4 ">
                                                                    <p>@localizer["Renterr"]</p>
                                                                </div>
                                                                <div class="col personal-data">
                                                                    @if (requestCulture?.RequestCulture.UICulture.Name != "ar-EG")
                                                                    {
                                                                        <p>@Model.ExtensionContract.CrCasRenterContractBasic5?.CrCasRenterLessorNavigation.CrMasRenterInformationEnName</p>
                                                                    }
                                                                    else
                                                                    {
                                                                        <p>@Model.ExtensionContract.CrCasRenterContractBasic5?.CrCasRenterLessorNavigation.CrMasRenterInformationArName</p>
                                                                    }
                                                                </div>

                                                            </div>
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-4 ">
                                                                    <p> @localizer["Car"]</p>
                                                                </div>
                                                                <div class="col personal-data">
                                                                    @if (requestCulture?.RequestCulture.UICulture.Name != "ar-EG")
                                                                    {
                                                                        <p>@Model.ExtensionContract.CrCasRenterContractBasicCarSerailNoNavigation?.CrCasCarInformationConcatenateEnName</p>
                                                                    }
                                                                    else
                                                                    {
                                                                        <p>@Model.ExtensionContract.CrCasRenterContractBasicCarSerailNoNavigation?.CrCasCarInformationConcatenateArName</p>
                                                                    }
                                                                </div>

                                                            </div>
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-4 ">
                                                                    <p>@localizer["DiscountRate"]</p>
                                                                </div>
                                                                <div class="col personal-data">
                                                                    <p>@Model.ExtensionContract.CrCasRenterContractBasicUserDiscountRate %</p>
                                                                </div>
                                                            </div>
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-4 ">
                                                                    <p>@localizer["TaxValue"]</p>
                                                                </div>
                                                                <div class="col personal-data">
                                                                    <p>@Model.ExtensionContract.CrCasRenterContractBasicExpectedTaxValue</p>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="col-md-auto col-lg-3 d-flex "
                                                     style="flex-direction:row-reverse;align-items: center;">
                                                    <div class="col-auto">
                                                        <P>@localizer["EndAuth"]</P>
                                                    </div>
                                                    <div class="col-auto personal-data">
                                                        <P>@Model.ExtensionContract.AuthEndDate?.ToString("yyyy/MM/dd", CultureInfo.InvariantCulture)</P>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="row " style="flex-direction: row-reverse;">
                                                <div class=" col-md-auto col-lg-4 d-flex "
                                                     style="flex-direction:row-reverse;align-items: center;">
                                                    <div class="col-auto">
                                                        <P> @localizer["Netcontract"]</P>
                                                    </div>
                                                    <div class="col-auto personal-data">
                                                        <P>@Model.ExtensionContract.CrCasRenterContractBasicExpectedTotal?.ToString("N2", CultureInfo.InvariantCulture)</P>
                                                    </div>
                                                </div>
                                                <div class="col-md-auto col-lg-4 d-flex "
                                                     style="flex-direction:row-reverse;align-items: center;">
                                                    <div class="col-auto">
                                                        <P>@localizer["AmountPaid"]</P>
                                                    </div>
                                                    <div class="col-auto personal-data">
                                                        <P>@Model.ExtensionContract.CrCasRenterContractBasicAmountPaidAdvance?.ToString("N2", CultureInfo.InvariantCulture)</P>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="row flex-row-reverse">
                                                <div class="col-md-auto col-lg-4 d-flex " style="flex-direction:row-reverse;align-items: baseline;">
                                                    <div class="col-auto">
                                                        <label id="days-number" for="days-number-input">
                                                            @localizer["ExtensionDays"]
                                                        </label>
                                                    </div>
                                                    <div class="col-auto ps-0">
                                                        <input type="text" class="form-control form-control1"
                                                               id="dayNo" asp-for="ExtensionContract.DaysNo" aria-describedby="inputGroupPrepend" autocomplete="off"
                                                               oninput="this.value=this.value.replace(/[^0-9]/g,'');if(parseInt(this.value)> 365) this.value = '365';" onfocusout="CalculateContract()" maxlength="3" autofocus required>
                                                        <span class="requird-field" id="requird_field_PaymentMethod" asp-validation-for="@Model.ExtensionContract.DaysNo"></span>
                                                    </div>
                                                </div>
                                                <div class=" col-md-auto col-lg-3  d-flex "
                                                     style="flex-direction:row-reverse;align-items: center;">
                                                    <div class="col-auto">
                                                        <P>@localizer["EndDate"]</P>
                                                    </div>
                                                    <div class="col-auto personal-data">
                                                        <P id="EndDate"></P>
                                                    </div>
                                                </div>
                                                <div class="col-md-auto col-lg-4 d-flex "
                                                     style="flex-direction:row-reverse;align-items: center;">
                                                    <div class="col-auto">
                                                        <P>@localizer["TotalContractDays"]</P>
                                                    </div>
                                                    <div class="col-auto personal-data">
                                                        <P id="ExpectedDaysNo"></P>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="row " style="flex-direction: row-reverse;">
                                                <div class="col-md-auto col-lg-4 d-flex "
                                                     style="flex-direction:row-reverse;align-items: center;">
                                                    <div class="col-auto">
                                                        <P>@localizer["TotalContract"]</P>
                                                    </div>
                                                    <div class="col-auto personal-data">
                                                        <P id="RentValue">0.00</P>
                                                    </div>
                                                </div>

                                                <div class="col-md-auto col-lg-3 d-flex "
                                                     style="flex-direction:row-reverse;align-items: center;">
                                                    <div class="col-auto">
                                                        <P>@localizer["DiscountValue"]</P>
                                                    </div>
                                                    <div class="col-auto personal-data">
                                                        <P id="DiscountValue">0.00</P>
                                                    </div>
                                                </div>
                                                <div class="col-md-auto col-lg-4 d-flex "
                                                     style="flex-direction:row-reverse;align-items: center;">
                                                    <div class="col-auto">
                                                        <P>@localizer["TaxValue"]</P>
                                                    </div>
                                                    <div class="col-auto personal-data">
                                                        <P id="TaxValue">0.00</P>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="row" style="flex-direction: row-reverse;">
                                                <div class="col-md-auto col-lg-4 d-flex "
                                                     style="flex-direction:row-reverse;align-items: center;">
                                                    <div class="col-auto">
                                                        <P>@localizer["NetContract"]</P>
                                                    </div>
                                                    <div class="col-auto personal-data">
                                                        <P id="TotalContract">0.00</P>

                                                    </div>
                                                </div>

                                                <div class="col-md-auto col-lg-3 d-flex "
                                                     style="flex-direction:row-reverse;align-items: center;">
                                                    <div class="col-auto">
                                                        <P>@localizer["PreviousBalance"]</P>
                                                    </div>
                                                    <div class="col-auto personal-data">
                                                        <P>@Model.ExtensionContract.CasRenterPreviousBalance?.ToString("N2", CultureInfo.InvariantCulture)</P>
                                                    </div>
                                                </div>
                                                <div class="col-md-auto col-lg-4 d-flex "
                                                     style="flex-direction:row-reverse;align-items: center;">
                                                    <div class="col-auto">
                                                        <P>@localizer["AmountRequired"]</P>
                                                    </div>
                                                    <div class="col-auto personal-data">
                                                        <P id="TotalAmount">0.00</P>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="row" style="flex-direction: row-reverse;">
                                                <div class="col-md-auto col-lg-4 d-flex "
                                                     style="flex-direction:row-reverse;">
                                                    <div class="col-auto">
                                                        <label id="amount-paid" for="amount-paid-input">
                                                            @localizer["AmountPaid"]
                                                        </label>
                                                    </div>
                                                    <div class="col-auto">
                                                        <input type="text" class="form-control form-control2" asp-for="ExtensionContract.AmountPayed" autocomplete="off" oninput="handleAmountPayed(this)" autocomplete="off" readonly>
                                                        <div class="row requird-field-row-last">
                                                            <div class="row requird-field-row-last">
                                                                <p class="requird_field_AmountPayed"></p>
                                                            </div>
                                                        </div>
                                                    </div>

                                                </div>
                                                @{
                                                    if (Model?.AccountBanks?.FindAll(x => x.CrCasAccountBankNo != "00").Count() == 0)
                                                    {
                                                        Model.PaymentMethods = Model?.PaymentMethods?.FindAll(x => x.CrMasSupAccountPaymentMethodClassification == "1");
                                                    }
                                                    else if (Model?.AccountBanks?.FindAll(x => x.CrCasAccountBankNo != "00").Count() > 0 && Model?.SalesPoint?.FindAll(x => x.CrCasAccountSalesPointBank != "00").Count() == 0)
                                                    {
                                                        Model.PaymentMethods = Model?.PaymentMethods?.FindAll(x => x.CrMasSupAccountPaymentMethodClassification == "3" || x.CrMasSupAccountPaymentMethodClassification == "1");
                                                    }
                                                    else if (Model?.AccountBanks?.FindAll(x => x.CrCasAccountBankNo != "00").Count() > 0 && Model?.SalesPoint?.FindAll(x => x.CrCasAccountSalesPointBank != "00").Count() > 0)
                                                    {
                                                        Model.PaymentMethods = Model?.PaymentMethods?.FindAll(x => x.CrMasSupAccountPaymentMethodClassification == "2" || x.CrMasSupAccountPaymentMethodClassification == "3" || x.CrMasSupAccountPaymentMethodClassification == "1");
                                                    }
                                                }
                                                <div class="col-md-4 col-xl-4 d-flex " style="flex-direction:row-reverse;flex-wrap: nowrap;">
                                                    <div class="col-auto d-flex ps-0" style="justify-content: flex-end;">
                                                        <label id="payment-method" for="payment-method-select">@localizer["PaymentMethod"]</label>
                                                    </div>
                                                    <div class="col-auto">
                                                        <div class="offset">
                                                            <select class="form-select-last" asp-for="ExtensionContract.PaymentMethod" style="font-size:14px;" disabled>
                                                                <option selected disabled></option>
                                                                @foreach (var payment in Model.PaymentMethods)
                                                                {
                                                                    if (requestCulture?.RequestCulture.UICulture.Name == "ar-EG")
                                                                    {
                                                                        <option value="@payment.CrMasSupAccountPaymentMethodCode" data-ar="@payment.CrMasSupAccountPaymentMethodArName" data-en="@payment.CrMasSupAccountPaymentMethodEnName" class="text-right">@payment.CrMasSupAccountPaymentMethodArName</option>
                                                                    }
                                                                    else
                                                                    {
                                                                        <option value="@payment.CrMasSupAccountPaymentMethodCode" data-ar="@payment.CrMasSupAccountPaymentMethodArName" data-en="@payment.CrMasSupAccountPaymentMethodEnName" class="text-left">@payment.CrMasSupAccountPaymentMethodEnName</option>
                                                                    }
                                                                }
                                                            </select>
                                                        </div>
                                                        <span class="requird-field" id="requird_field_PaymentMethod" asp-validation-for="@Model.Contract.PaymentMethod"></span>
                                                    </div>
                                                </div>
                                                <div class="col-md-auto col-lg-4 d-flex " style="flex-direction:row-reverse;">

                                                    <div class="col-auto d-flex ps-0 " style="justify-content: flex-end;">
                                                        <label id="selling-point" for="selling-point-dropdown">@localizer["SalesPoint"]</label>

                                                    </div>

                                                    <div class="col-auto">
                                                        <div class="offset">
                                                            <select class="form-select-last" asp-for="ExtensionContract.SalesPoint" style="font-size:14px;width:240px!important" disabled>
                                                            </select>
                                                        </div>
                                                        <span class="requird-field" id="requird_field_SalesPoint" asp-validation-for="@Model.ExtensionContract.SalesPoint"></span>
                                                    </div>


                                                </div>
                                            </div>
                                            <div class="row p-2" style="flex-direction:row-reverse">
                                                <div class="col-auto">
                                                    <label id="notes" for="FormControl-last-Textarea">@localizer["reasons"]</label>
                                                </div>
                                                <div class="col-sm-10 col-md-7 col-lg-7">
                                                    <input class="form-control textarea-inputs" maxlength="100" id="reasons" name="reasons">
                                                </div>

                                            </div>
                                        </div>
                                        <div class="row button-row pt-3 pb-2 ps-4" style=" justify-content: space-between;">
                                            <div class="button-card gap-4 ">
                                                <a class="btn btn-custom" asp-action="Index" asp-area="BS" asp-controller="ContractExtension">@localizer["Backk"]</a>
                                                <a class="btn btn-custom" id="submitForm">@localizer["Save"]</a>
                                            </div>
                                            <div class="button-card"></div>
                                        </div>

                                    </fieldset>

                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <div class="main" style="display:none">
        <div class="container1">
            <div>   <img src="@Url.Content(lessorInfo?.CrMasUserInformationLessorNavigation?.CrMasLessorImage?.CrMasLessorImageLogo)" class="logo"></div>
            <br>
            <div class="container2">
                <div class="dash uno"></div>
                <div class="dash dos"></div>
                <div class="dash tres"></div>
                <div class="dash cuatro"></div>
            </div>
        </div>
    </div>
</div>
<footer class="fixed-bottom-xl">
    <div class="before-footer-widget">
        <svg width: 100%; height:auto viewbox="0 0 2444 132">
            <path fill="rgba(254, 248, 232, 1)" fill-rule="evenodd"
                  d="M1222 0h1222c-444.13 88-852.127 132-1223.993 132C849.253 132 442.585 88.263 0 .789V0h1222z">
            </path>
        </svg>
    </div>

</footer>
@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <!--makes bootsrab animation works-->
    @*     <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
     *@    <script src="https://cdn.jsdelivr.net/npm/@@popperjs/core@2.9.2/dist/umd/popper.min.js"
                       integrity="sha384-IQsoLXl5PILFhosVNubq5LC7Qb9DXgDA9i+tQ8Zj3iwWAwPtgFTxbJ8NT4GN1R8p"
                       crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.min.js"
            integrity="sha384-cVKIPhGWiC2Al4u+LWgxfKTRIcfu0JTxR+EQDz/bgldoEyl4H0zUF0QKbrJ0EcQF"
            crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.3/jspdf.umd.min.js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.5.3/jspdf.min.js"></script>
    <script>
        const image = document.getElementById('hover-image-extension2');
        const dropdown = document.getElementById('dropdown-content-extension2');

        image.addEventListener('click', function () {
            if (dropdown.style.display === 'block') {
                dropdown.style.display = 'none';
            } else {
                dropdown.style.display = 'block';
            }
        });
    </script>
    <script>
        var rentValue = 0;
        var choicesValue = 0;
        var additionalValue = 0;
        var advantagesValueTotal = 0;
        var additionalDriverValue = 0;
        var privateDriverValue = 0;
        var FeesTammValue = 0;
        var contractValue = 0;
        var totalContract = 0;
        var discountValue = 0;
        var taxValue = 0;
        var TotalAmount = 0;
        var somethingIsNotOkay = true;
        function CalculateContract() {
            var price = 0;
            var daysNo = document.getElementById('dayNo').value;
            var oldDaysNo = '@Model.ExtensionContract.CrCasRenterContractBasicExpectedRentalDays';
            var ExpectedDaysNo = parseInt(daysNo) + parseInt(oldDaysNo);
            var today = new Date();
            var RentalDayPrice = "@Model.ExtensionContract.CrCasRenterContractBasicDailyRent";
            console.log("daysNo", daysNo);
            console.log("RentalDayPrice", RentalDayPrice);
            console.log("oldDaysNo", oldDaysNo);
            if (parseInt(daysNo) > 0) {
                $("#ExtensionContract_DaysNo").val(ExpectedDaysNo);
                var options = { year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit' };
                var formattedstartDate = "@Model.ExtensionContract.CrCasRenterContractBasicExpectedStartDate?.ToString("yyyy/MM/dd HH:mm:ss", CultureInfo.InvariantCulture)";
                var StartDate = new Date(formattedstartDate);
                StartDate.setDate(StartDate.getDate() + parseInt(ExpectedDaysNo));
                var formattedEndDate = StartDate.toLocaleDateString('ja-JP', options);
                console.log("formattedEndDate", formattedEndDate);

                document.getElementById('EndDate').textContent = formattedEndDate;
                document.getElementById('ExpectedDaysNo').textContent = ExpectedDaysNo.toString();
                var choicesPerDay = "@Model.ExtensionContract.ChoicesValue"
                choicesValue = parseFloat(choicesPerDay) * parseInt(ExpectedDaysNo);
                additionalValue = parseFloat("@Model.ExtensionContract.CrCasRenterContractBasicAdditionalValue");
                var privateDriverValueForDay = '@Model.ExtensionContract.CrCasRenterContractBasicPrivateDriverValue';
                privateDriverValue = parseFloat(privateDriverValueForDay) * parseInt(ExpectedDaysNo);
                additionalDriverValue = parseFloat('@Model.ExtensionContract.CrCasRenterContractBasicAdditionalDriverValue');
                FeesTammValue = parseFloat('@Model.ExtensionContract.CrCasRenterContractBasicAuthorizationValue');
                var advantages = parseFloat('@Model.ExtensionContract.AdvatagesValue');
                advantagesValueTotal = advantages * parseInt(ExpectedDaysNo);
                var totalRental = parseInt(ExpectedDaysNo) * parseFloat(RentalDayPrice);
                rentValue = parseFloat(totalRental) + parseFloat(choicesValue) + parseFloat(privateDriverValue) + parseFloat(advantagesValueTotal) + parseFloat(additionalDriverValue) + parseFloat(FeesTammValue) + parseFloat(additionalValue);



                console.log("rentValue", rentValue);
                console.log("totalRental", totalRental);
                document.getElementById('RentValue').textContent = rentValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });


                // // Contract Value Total
                // // get discount and totalContract Value
                CalculateDiscount();
                // // Get Tax value from TotalActualContract and get value of TotalActualContract
                CalculateTax();
                CalculateTotalAmount();
                $('#ExtensionContract_AmountPayed').prop('readonly', false);
            }
            else {
                clearPaymentData();
            }

        }

        function clearPaymentData() {
            document.getElementById('EndDate').textContent = "";
            document.getElementById('ExpectedDaysNo').textContent = "";
            document.getElementById('TotalAmount').textContent = "0.00";
            document.getElementById('TotalContract').textContent = "0.00";
            document.getElementById('TaxValue').textContent = "0.00";
            document.getElementById('DiscountValue').textContent = "0.00";
            document.getElementById('RentValue').textContent = "0.00";
            document.getElementById("dayNo").textContent = "";
            $('#ExtensionContract_AmountPayed').prop('readonly', true);
            $('#ExtensionContract_AmountPayed').val("");
            document.getElementById('ExtensionContract_PaymentMethod').disabled = true;
            document.getElementById('ExtensionContract_PaymentMethod').selectedIndex = 0;
            document.getElementById('ExtensionContract_SalesPoint').disabled = true;
            document.getElementById('ExtensionContract_SalesPoint').selectedIndex = 0;
            $("#ExtensionContract_SalesPoint").empty();
            rentValue = 0;
            choicesValue = 0;
            additionalValue = 0;
            advantagesValueTotal = 0;
            additionalDriverValue = 0;
            privateDriverValue = 0;
            FeesTammValue = 0;
            contractValue = 0;
            totalContract = 0;
            discountValue = 0;
            taxValue = 0;
            TotalAmount = 0;
            $("#ExtensionContract_AmountPayed").css({ "border": "2px solid #faa64d" }); //This For last Check When i submit Form
            somethingIsNotOkay = true;
        }

        function CalculateDiscount() {
            var DiscountInput = "@Model.ExtensionContract.CrCasRenterContractBasicUserDiscountRate";
            console.log("RateDis", DiscountInput);

            if (parseFloat(DiscountInput) != null && parseFloat(DiscountInput) != "" && parseFloat(DiscountInput) != 0 && parseFloat(DiscountInput) != undefined) {
                discountValue = rentValue * (parseFloat(DiscountInput) / 100);
            }
            else {
                discountValue = 0;
            }
            console.log("discountValue", discountValue);

            document.getElementById('DiscountValue').textContent = discountValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            $("#ExtensionContract_DiscountValue").val(discountValue);
            CalculateTax();
            CalculateTotalAmount();
        };
        function CalculateTax() {
            var TaxPercent = parseFloat("@Model.ExtensionContract.CrCasRenterContractBasicTaxRate");
            console.log("TaxPercent", TaxPercent);

            if (TaxPercent != null && TaxPercent != "" && TaxPercent != undefined && TaxPercent != 0) {
                taxValue = (rentValue - discountValue) * (TaxPercent / 100);
            }
            else {
                taxValue = 0;
            }
            console.log("taxValue", taxValue);
            document.getElementById('TaxValue').textContent = taxValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            $("#ExtensionContract_TaxValue").val(taxValue);

        }
        function CalculateTotalAmount() {
            // Get Total Of amount Required
            var RenterBalance = '@Model.ExtensionContract.CasRenterPreviousBalance?.ToString("N2", CultureInfo.InvariantCulture)'
            var PreviousTotalContract = '@Model.ExtensionContract.CrCasRenterContractBasicExpectedTotal?.ToString("N2", CultureInfo.InvariantCulture)'
            RenterBalance = RenterBalance.replace(/,/g, '');
            PreviousTotalContract = PreviousTotalContract.replace(/,/g, '');
            totalContract = parseFloat(rentValue) - parseFloat(discountValue) + parseFloat(taxValue);
            console.log("totalContract", totalContract);
            console.log("RenterBalance", RenterBalance);
            console.log("rentValue", rentValue);
            console.log("PreviousTotalContract", PreviousTotalContract);
            document.getElementById('TotalContract').textContent = totalContract.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            TotalAmount = (parseFloat(totalContract) - parseFloat(PreviousTotalContract)) - parseFloat(RenterBalance);
            $("#ExtensionValue").val(parseFloat(totalContract) - parseFloat(PreviousTotalContract));
            if (TotalAmount < 0) {
                TotalAmount = 0;
            }
            document.getElementById("TotalAmount").textContent = TotalAmount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            $("#ExtensionContract_TotalAmount").val(TotalAmount);
            $("#ExtensionContract_TotalContract").val(totalContract);

        }
    </script>
    <script>
        $(document).ready(function () {
            $("#ExtensionContract_AmountPayed").focusout(function () {
                var payed = document.getElementById('ExtensionContract_AmountPayed').value;
                CheckIfCanPayLessThanTotalAmount();
                console.log(somethingIsNotOkay);
                if (parseFloat(payed) > 0 && somethingIsNotOkay) {
                    document.getElementById('ExtensionContract_PaymentMethod').disabled = false;
                    // document.getElementById('ExtensionContract_PaymentMethod').selectedIndex = 0;
                    document.getElementById('ExtensionContract_SalesPoint').disabled = false;
                    document.getElementById('ExtensionContract_SalesPoint').selectedIndex = 0;
                } else {
                    document.getElementById('ExtensionContract_PaymentMethod').disabled = true;
                    document.getElementById('ExtensionContract_PaymentMethod').selectedIndex = 0;
                    document.getElementById('ExtensionContract_SalesPoint').disabled = true;
                    document.getElementById('ExtensionContract_SalesPoint').selectedIndex = 0;
                    $("#ExtensionContract_SalesPoint").empty();
                }
            })
        });

        function handleAmountPayed(input) {
            // Remove non-digit characters and additional decimal points
            input.value = input.value.replace(/[^0-9\.]/g, '');
            const decimalIndex = input.value.indexOf('.');
            // Limit to 9 digits before and after the decimal point
            if (decimalIndex !== -1) {
                const digitsBeforeDecimal = input.value.substring(0, decimalIndex);
                const digitsAfterDecimal = input.value.substring(decimalIndex + 1);

                // Limit to 2 digits after the decimal point
                input.value = digitsBeforeDecimal.substr(0, 7) + '.' + digitsAfterDecimal.substr(0, 2);

                // Remove additional decimal points
                if (input.value.indexOf('.', decimalIndex + 1) !== -1) {
                    const lastValidIndex = input.value.lastIndexOf('.');
                    input.value = input.value.substring(0, lastValidIndex) + input.value.substring(lastValidIndex + 1);
                }
            } else {
                // Limit to 7 digits before the decimal point
                input.value = input.value.substr(0, 7);
            }
        }
        function CheckIfCanPayLessThanTotalAmount() {
            var userAuthAmount = @Html.Raw(Json.Serialize(userInfo?.CrMasUserContractValidity?.CrMasUserContractValidityLessContractValue));
            var AmountPayed = document.getElementById("ExtensionContract_AmountPayed").value;
            if (userAuthAmount == false && TotalAmount > AmountPayed) {
                toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                toastr.error('@localizer["DontHaveAuthPayLessThanTotalAmount"]');
                $("#ExtensionContract_AmountPayed").css({ "border": "2px solid red" });    //This For last Check When i submit Form
                somethingIsNotOkay = false;
            }
            else {
                $("#ExtensionContract_AmountPayed").css({ "border": "2px solid #faa64d" }); //This For last Check When i submit Form
                somethingIsNotOkay = true;
            }
        }

    </script>
    <script>
        $(document).ready(function () {
            $("#ExtensionContract_PaymentMethod").change(function () {
                var PaymentMethod = $("#ExtensionContract_PaymentMethod").val();
                var BranchCode = $("#SelectedBranch").val();
                console.log(PaymentMethod);
                console.log(BranchCode);

                $.get("/BS/ContractExtension/GetSalesPoint", { PaymentMethod: PaymentMethod, BranchCode: BranchCode }, function (data) {
                    $("#ExtensionContract_SalesPoint").empty();
                    console.log(data);
                    if (data.type == "1" && data.salesPoints != null) {
                        $.each(data.salesPoints, function (index, row) {
                            if ("@requestCulture?.RequestCulture.UICulture.Name" == "en-US") {
                                $("#ExtensionContract_SalesPoint").append("<option  value= '" + row.crCasAccountSalesPointCode + "'>" + row.crCasAccountSalesPointEnName + "</option>")
                            }
                            else {
                                $("#ExtensionContract_SalesPoint").append("<option class='text-right' value= '" + row.crCasAccountSalesPointCode + "'>" + row.crCasAccountSalesPointArName + "</option>")
                            }
                        });
                    }
                    else if (data.type == "2" && data.accountBank != null) {
                        $.each(data.accountBank, function (index, row) {
                            if ("@requestCulture?.RequestCulture.UICulture.Name" == "en-US") {

                                $("#ExtensionContract_SalesPoint").append("<option class='text-left' value= '" + row.crCasAccountBankCode + "'>" + row.crCasAccountBankEnName + "</option>")
                            }
                            else {
                                $("#ExtensionContract_SalesPoint").append("<option class='text-right' value= '" + row.crCasAccountBankCode + "'>" + row.crCasAccountBankArName + "</option>")
                            }
                        });
                    }

                });
            })
        });
    </script>
    <script>
        // Function to send a static image file to WhatsApp
        const sendStaticImageToWhatsApp = async () => {
            const imageLessor = "@user.CrMasUserInformationLessorNavigation.CrMasLessorImage.CrMasLessorImageContractExtensionCard";
            const imagePath = imageLessor.replace('~', '');
            const token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJudW1iZXIiOiJKYXNlcjExIiwic2VyaWFsIjoiMTk5ZmUzYjFlYjc2MjNlIiwiaWF0IjoxNzA3NzMxNjI4LCJleHAiOjE3OTQxMzE2Mjh9.O_4RW4vYAays1ZL7D-OlOQh6C5P5xVYrT3pZ2Oi9Yak"; // Your WhatsApp API token
            const callingKey = '@user.CrMasUserInformationCallingKey'; // Assuming this variable contains the calling key
            const mobileNo = '@user.CrMasUserInformationMobileNo'; // Assuming this variable contains the mobile number
            const phoneNumber = callingKey + mobileNo;
            const messageText = " "; // Replace with your message
            const contractNo = '@Html.Raw(Model.ExtensionContract?.CrCasRenterContractBasicNo)';

            try {
                // Read the image file as a Blob
                const responseImage = await fetch(imagePath);
                const blob = await responseImage.blob();
                // Prepare form data
                const formData = new FormData();
                formData.append("number", phoneNumber); // Append the recipient's phone number
                formData.append("message", messageText); // Append the message

                // Create a canvas element
                const canvas = document.createElement('canvas');
                const ctx = canvas.getContext('2d');

                // Create an image element
                const img = new Image();

                // When the image is loaded, draw it on the canvas
                img.onload = function () {
                    canvas.width = img.width;
                    canvas.height = img.height;
                    ctx.drawImage(img, 0, 0);

                    const CarEn = '@Html.Raw(Model.ExtensionContract?.CrCasRenterContractBasicCarSerailNoNavigation?.CrCasCarInformationDistributionNavigation?.CrMasSupCarDistributionConcatenateEnName)';
                    const CarAr = '@Html.Raw(Model.ExtensionContract?.CrCasRenterContractBasicCarSerailNoNavigation?.CrCasCarInformationDistributionNavigation?.CrMasSupCarDistributionConcatenateArName)';
                    const RenterArName = '@Html.Raw(Model.ExtensionContract?.CrCasRenterContractBasic5?.CrCasRenterLessorNavigation?.CrMasRenterInformationArName)';
                    const RenterEnName = '@Html.Raw(Model.ExtensionContract?.CrCasRenterContractBasic5?.CrCasRenterLessorNavigation?.CrMasRenterInformationEnName)';
                    var options = { year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit' };
                    var formattedstartDate = "@Model.ExtensionContract.CrCasRenterContractBasicExpectedStartDate?.ToString("yyyy/MM/dd HH:mm", CultureInfo.InvariantCulture)";
                    var StartDate = new Date(formattedstartDate);
                    const startHijriDate = formatHijriDate(StartDate);
                    console.log("formattedstartDate", formattedstartDate);
                    console.log("startHijriDate", startHijriDate);

                    var endDateInput = $("#EndDate").text();
                    var EndDate = new Date(endDateInput);
                    var formattedEndDate = EndDate.toLocaleDateString('ja-JP', options);
                    const endHijriDate = formatHijriDate(EndDate);
                    console.log("formattedEndDate", formattedEndDate);
                    console.log("endHijriDate", endHijriDate);


                    const branch = '@Html.Raw(Model.CrCasBranchInformation?.CrCasBranchPost?.CrCasBranchPostCityNavigation?.CrMasSupPostCityConcatenateArName)' + ' - ' + '@Html.Raw(Model.CrCasBranchInformation?.CrCasBranchInformationArShortName)';
                    // Define text properties
                    ctx.font = "bold 25px serif";
                    ctx.textAlign = "right";
                    ctx.fillStyle = "black";
                    ctx.fillText(RenterArName, canvas.width - 75, 170);
                    ctx.fillText(CarAr, canvas.width - 75, 205);
                    ctx.fillText(startHijriDate, canvas.width - 190, 358);
                    ctx.fillText(endHijriDate, canvas.width - 190, 395);
                    ctx.fillText(branch, canvas.width - 75, 450);

                    ctx.textAlign = "left";
                    ctx.fillText(RenterEnName, canvas.width - 960, 270);
                    ctx.fillText(CarEn, canvas.width - 960, 305);
                    ctx.fillText(formattedstartDate, canvas.width - 850, 358);
                    ctx.fillText(formattedEndDate, canvas.width - 850, 395);
                    ctx.fillText(contractNo, canvas.width - 960, 585);
                    canvas.toBlob(async function (blob) {
                        formData.append("file", blob, "ExtensionContractWhatUp.png"); // Append the modified image blob with a filename
                        const requestOptions = {
                            method: 'POST',
                            body: formData,
                            headers: {
                                'Authorization': `Bearer ${token}`
                            }
                        };
                        // Send the request to the API endpoint
                        const response = await fetch("https://business.enjazatik.com/api/v1/send-media", requestOptions);
                        if (response.ok) {
                            const result = await response.json();
                            console.log("SendImageResult", result);
                        } else {
                            const errorMessage = await response.text(); // Get the error message as plain text
                            console.log("SendImageError", errorMessage);
                        }
                        // createPdfAndSendToWhatsApp(contractNo, phoneNumber, token, blob);
                    }, 'image/png');
                };
                // Set the source of the image element
                img.src = URL.createObjectURL(blob);
            } catch (error) {
                console.log('SendImageError', error);
            }
        };

        // Function to send an image and Ar PDF to WhatsApp
        const sendArInvoiceToWhatsApp = async () => {
            const imageLessor = "@lessorInfo?.CrMasUserInformationLessorNavigation?.CrMasLessorImage.CrMasLessorImageArInitialInvoice";
            const imagePath = imageLessor.replace('~', '');
            const token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJudW1iZXIiOiJKYXNlcjExIiwic2VyaWFsIjoiMTk5ZmUzYjFlYjc2MjNlIiwiaWF0IjoxNzA3NzMxNjI4LCJleHAiOjE3OTQxMzE2Mjh9.O_4RW4vYAays1ZL7D-OlOQh6C5P5xVYrT3pZ2Oi9Yak"; // Your WhatsApp API token
            const callingKey = '@user.CrMasUserInformationCallingKey'; // Assuming this variable contains the calling key.
            const mobileNo = '@user.CrMasUserInformationMobileNo';     // Assuming this variable contains the mobile number.
            const phoneNumber = callingKey + mobileNo;
            //Data Receipt
            // Gregorian (Miladi) Date
            const miladiDate = new Date();
            const miladiOptions = { year: 'numeric', month: '2-digit', day: '2-digit' };
            const miladiDateString = miladiDate.toLocaleDateString('en-US', miladiOptions).split('/').join('/');
            console.log("miladiDateString", miladiDateString)

            // Hijri Date
            // const hijriOptions = { day: 'numeric', month: 'long', year: 'numeric' };
            const hijriDateString = formatHijriDate(miladiDate);

            // First In Page
            const contractNo = "@Model.ExtensionContract.CrCasRenterContractBasicNo";
            const AccountReceiptNo = "@ViewBag.AccountReceiptNo";
            const InvoiceAccountNo = "@ViewBag.InvoiceAccount";
            const referenceType = "تمديد عقد";
            const RenterName = '@Html.Raw(Model.ExtensionContract?.CrCasRenterContractBasic5?.CrCasRenterLessorNavigation?.CrMasRenterInformationArName)';
            const CarName = '@Html.Raw(Model.ExtensionContract?.CrCasRenterContractBasicCarSerailNoNavigation?.CrCasCarInformationDistributionNavigation?.CrMasSupCarDistributionConcatenateArName)';

            // last in page
            const balanceR = '@Html.Raw(Model.ExtensionContract?.CrCasRenterContractBasic5?.CrCasRenterLessorAvailableBalance)';
            const balance = parseFloat(balanceR);
            var DiscountInput = '@Html.Raw(Model.ExtensionContract?.CrCasRenterContractBasicUserDiscountRate)';
            var TaxRateInput = '@Html.Raw(Model.ExtensionContract?.CrCasRenterContractBasicTaxRate)';
            var AmountPayedInput = document.getElementById("ExtensionContract_AmountPayed").value;
            const discountRate = parseFloat(DiscountInput).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            const TaxPercent = parseFloat(TaxRateInput).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });

            const AmountRequired = $("#TotalAmount").text().toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            var AmountPayed = parseFloat(AmountPayedInput).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            if (AmountPayed == "" || AmountPayed == undefined || AmountPayed || NaN) {
                AmountPayed = "0.00";
            }
           
            var selectElement = document.getElementById("ExtensionContract_PaymentMethod");
            var selectedOption = selectElement.options[selectElement.selectedIndex];
            // Get the text of the selected option
            var selectedText = selectedOption.textContent || selectedOption.innerText;
            if (selectedText == "" || selectedText == undefined || selectedText || NaN) {
                selectedText = "";
            }
            //get Data Director lessor and branch and get renter and user
            var userName = decodeHTMLEntities("@user.CrMasUserInformationArName");
            var directorOfLessor = decodeHTMLEntities("@user.CrMasUserInformationLessorNavigation.CrMasLessorInformationDirectorArName");
            var directorOfBranch = decodeHTMLEntities("@Model.CrCasBranchInformation.CrCasBranchInformationDirectorArName");
            var reasonPayment = document.getElementById("reasons").value;
            // Signture Image
            var signture = "@user.CrMasUserInformationSignature";
            const signturePath = signture.replace('~', '');
            var signatureImg = new Image();
            signatureImg.src = signturePath;
            //////////////////////////////////////////////////////////////////////////////////////////////////////////


            // Get Image And Text On
            // Read the image file as a Blob
            const responseImage = await fetch(imagePath);
            const blob = await responseImage.blob();
            // Prepare form data
            const formData = new FormData();
            formData.append("number", phoneNumber); // Append the recipient's phone number
            formData.append("message", " "); // Append the message
            var canvas = document.createElement("canvas");
            var ctx = canvas.getContext("2d");
            var img = new Image();
            img.crossOrigin = "Anonymous";
            img.onload = function () {
                canvas.width = img.width;
                canvas.height = img.height;

                ctx.drawImage(img, 0, 0);
                ctx.font = "bold 50px serif";
                ctx.textAlign = "right";
                ctx.fillStyle = "black";
                // Receipt and type and renter and car name
                ctx.fillText(InvoiceAccountNo, canvas.width - 110, 610);
                ctx.fillText(RenterName, canvas.width - 125, 1075);
                ctx.fillText(CarName, canvas.width - 125, 1175);

                ctx.font = "bold 42px serif";
                ctx.fillText(referenceType, canvas.width - 250, 895);
                ctx.fillText(contractNo, canvas.width - 320, 985);
                // The Table
                var YHeight = 1380;
                var daysNo = document.getElementById('dayNo').value;
                // The payed Information
                const discountText = '%' + discountRate.toString();
                const taxText = '%' + TaxPercent.toString();

                ctx.fillText(balanceR.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), canvas.width - 330, 2392);
                ctx.fillText(discountText, canvas.width - 360, 2485);
                ctx.fillText(taxText, canvas.width - 367, 2573);
                ctx.fillText(AmountRequired, canvas.width - 360, 2660);
                ctx.fillText(AmountPayed, canvas.width - 360, 2750);
                ctx.fillText(selectedText, canvas.width - 360, 2840);
                ctx.fillText(reasonPayment, canvas.width - 360, 2930);
                ctx.font = "bold 35px serif";
                //Date and contract no
                ctx.fillText(hijriDateString, canvas.width - 228, 668);
                ctx.fillText(miladiDateString, canvas.width - 228, 722);
                /////////////////////////ForTest/////////////////
                const hours = miladiDate.getHours().toString().padStart(2, '0');
                const minutes = miladiDate.getMinutes().toString().padStart(2, '0');
                const seconds = miladiDate.getSeconds().toString().padStart(2, '0');
                const timeString = `${hours}:${minutes}:${seconds}`;
                ctx.fillText(timeString, canvas.width - 228, 760);
                ///////////////////////////

                var Rent = '@Html.Raw(Model.ExtensionContract?.CrCasRenterContractBasicDailyRent)'
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Rent
                if (parseFloat(Rent) > 0) {
                    console.log("Rent", Rent)
                    YHeight = calculateAndDrawAr(ctx, canvas, "الايجار", Rent, daysNo, DiscountInput, TaxPercent, YHeight);
                }
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Rent
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Advantages
                var AdvantagesValue = parseFloat('@Model.ExtensionContract.AdvatagesValue');
                if (AdvantagesValue > 0) {
                    YHeight = calculateAndDrawAr(ctx, canvas, "المميزات الاضافية", AdvantagesValue, daysNo, DiscountInput, TaxPercent, YHeight);
                }

                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Private Driver
                var privateDriverValue = 0;
                var privateDriver = '@Model.ExtensionContract.CrCasRenterContractBasicPrivateDriverValue';
                if (parseFloat(privateDriver) != null) {
                    privateDriverValue = parseFloat(privateDriver);
                }
                else {
                    privateDriverValue = 0;
                }

                if (privateDriverValue > 0) {
                    YHeight = calculateAndDrawAr(ctx, canvas, "سائق خاص", privateDriverValue, daysNo, DiscountInput, TaxPercent, YHeight);
                }
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Private Driver

                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////// TotalChoices
                var TotalChoices = parseFloat('@Model.ExtensionContract.ChoicesValue');
                var choicesValue = 0;
                if (TotalChoices != null && TotalChoices != 0 && TotalChoices != "" && TotalChoices != undefined) {
                    choicesValue = parseFloat(TotalChoices);
                }
                else {
                    choicesValue = 0;
                }
                if (choicesValue > 0) {
                    YHeight = calculateAndDrawAr(ctx, canvas, "الخيارات", choicesValue, daysNo, DiscountInput, TaxPercent, YHeight);
                }
                ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////TotalChoices

                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Total
                var tTotal = calculateTotalAmountPerDay(parseFloat('@Model.ExtensionContract.CrCasRenterContractBasicDailyRent'), parseFloat(AdvantagesValue), parseFloat(privateDriverValue), parseFloat(choicesValue), daysNo);
                var tTotalDiscount = calculateTotalDiscountAmount(tTotal, DiscountInput);
                var tTotalAfterDiscount = tTotal - tTotalDiscount;
                var tTotalTax = (tTotalAfterDiscount) * (TaxPercent / 100);
                var TotalAmountMinisPerviousBalance = tTotalTax + tTotalAfterDiscount;
                // // الاجمالي
                ctx.fillText(tTotal.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), canvas.width - 970, 2250);
                ctx.fillText(tTotalDiscount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), canvas.width - 1270, 2250);
                ctx.fillText(tTotalAfterDiscount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), canvas.width - 1560, 2250);
                ctx.fillText(tTotalTax.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), canvas.width - 1880, 2250);
                ctx.fillText(TotalAmountMinisPerviousBalance.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), canvas.width - 2180, 2250);
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Total

                // director and renter and user
                ctx.fillText(directorOfLessor, canvas.width - 340, 3050);
                ctx.fillText(userName, canvas.width - 1140, 3050);
                ctx.fillText(directorOfBranch, canvas.width - 340, 3190);
                ctx.drawImage(signatureImg, canvas.width - 1350, 3125, 200, 100);
                canvas.toBlob(async function (blob) {
                    formData.append("file", blob, "Ar_Invoice_Receipt.png"); // Append the modified image blob with a filename
                    var message = ` عزيزي / ${RenterName} , يمكنك مراجعة الفاتورة عن طريق تحميل الملف المرفق `
                    createPdfAndSendToWhatsApp(null, InvoiceAccountNo, phoneNumber, token, blob, message, "SavePdfArInvoice", "ar");
                }, 'image/png');
            };
            img.src = URL.createObjectURL(blob);
        };
        function calculateAndDrawAr(ctx, canvas, itemName, itemValue, days, discountInput, taxPercent, yHeight) {
            var itemTotal = parseFloat(itemValue) * parseInt(days);
            var discountValue = itemTotal * (parseFloat(discountInput) / 100);
            var totalAfterDiscount = itemTotal - discountValue;
            var taxValue = totalAfterDiscount * (taxPercent / 100);
            var totalActual = parseFloat(totalAfterDiscount) + parseFloat(taxValue);
            ctx.fillText(itemName, canvas.width - 230, yHeight);
            ctx.fillText(itemValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), canvas.width - 540, yHeight);
            ctx.fillText(days, canvas.width - 775, yHeight);
            ctx.fillText(itemTotal.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), canvas.width - 970, yHeight);
            ctx.fillText(discountValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), canvas.width - 1270, yHeight);
            ctx.fillText(totalAfterDiscount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), canvas.width - 1560, yHeight);
            ctx.fillText(taxValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), canvas.width - 1880, yHeight);
            ctx.fillText(totalActual.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), canvas.width - 2180, yHeight);

            return yHeight + 88; // Update yHeight for the next item
        }
        // Function to send an image and En PDF to WhatsApp
        const sendEnInvoiceToWhatsApp = async () => {
            const imageLessor = "@lessorInfo?.CrMasUserInformationLessorNavigation?.CrMasLessorImage.CrMasLessorImageEnInitialInvoice";
            const imagePath = imageLessor.replace('~', '');
            const token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJudW1iZXIiOiJKYXNlcjExIiwic2VyaWFsIjoiMTk5ZmUzYjFlYjc2MjNlIiwiaWF0IjoxNzA3NzMxNjI4LCJleHAiOjE3OTQxMzE2Mjh9.O_4RW4vYAays1ZL7D-OlOQh6C5P5xVYrT3pZ2Oi9Yak"; // Your WhatsApp API token
            const callingKey = '@user.CrMasUserInformationCallingKey'; // Assuming this variable contains the calling key.
            const mobileNo = '@user.CrMasUserInformationMobileNo';     // Assuming this variable contains the mobile number.
            const phoneNumber = callingKey + mobileNo;
            //Data Receipt
            // Gregorian (Miladi) Date
            const miladiDate = new Date();
            const miladiOptions = { year: 'numeric', month: '2-digit', day: '2-digit' };
            const miladiDateString = miladiDate.toLocaleDateString('en-US', miladiOptions).split('/').join('/');
            console.log("miladiDateString", miladiDateString)

            // Hijri Date
            // const hijriOptions = { day: 'numeric', month: 'long', year: 'numeric' };
            const hijriDateString = formatHijriEnDate(miladiDate);

            // First In Page
            const contractNo = "@Model.ExtensionContract.CrCasRenterContractBasicNo";
            const AccountReceiptNo = "@ViewBag.AccountReceiptNo";
            const InvoiceAccountNo = "@ViewBag.InvoiceAccount";
            const referenceType = "Extension Contract";
            const RenterName = '@Html.Raw(Model.ExtensionContract?.CrCasRenterContractBasic5?.CrCasRenterLessorNavigation?.CrMasRenterInformationEnName)';
            const CarName = '@Html.Raw(Model.ExtensionContract?.CrCasRenterContractBasicCarSerailNoNavigation?.CrCasCarInformationDistributionNavigation?.CrMasSupCarDistributionConcatenateEnName)';

            // last in page
            const balanceR = '@Html.Raw(Model.ExtensionContract?.CrCasRenterContractBasic5?.CrCasRenterLessorAvailableBalance)';
            const balance = parseFloat(balanceR);
            var DiscountInput = '@Html.Raw(Model.ExtensionContract?.CrCasRenterContractBasicUserDiscountRate)';
            var TaxRateInput = '@Html.Raw(Model.ExtensionContract?.CrCasRenterContractBasicTaxRate)';
            var AmountPayedInput = document.getElementById("ExtensionContract_AmountPayed").value;
            const discountRate = parseFloat(DiscountInput).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            const TaxPercent = parseFloat(TaxRateInput).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            const AmountRequired = $("#TotalAmount").text().toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });

            var AmountPayed = parseFloat(AmountPayedInput).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            if (AmountPayed == "" || AmountPayed == undefined || AmountPayed || NaN) {
                AmountPayed = "0.00";
            }

            var selectElement = document.getElementById("ExtensionContract_PaymentMethod");
            var selectedOption = selectElement.options[selectElement.selectedIndex];
            // Get the text of the selected option
            var selectedText = selectedOption.textContent || selectedOption.innerText;
            if (selectedText == "" || selectedText == undefined || selectedText || NaN) {
                selectedText = "";
            }
            //get Data Director lessor and branch and get renter and user
            var userName = decodeHTMLEntities("@user.CrMasUserInformationEnName");
            var directorOfLessor = decodeHTMLEntities("@user.CrMasUserInformationLessorNavigation.CrMasLessorInformationDirectorEnName");
            var directorOfBranch = decodeHTMLEntities("@Model.CrCasBranchInformation.CrCasBranchInformationDirectorEnName");
            var reasonPayment = document.getElementById("reasons").value;
            // Signture Image
            var signture = "@user.CrMasUserInformationSignature";
            const signturePath = signture.replace('~', '');
            var signatureImg = new Image();
            signatureImg.src = signturePath;
            // Get Image And Text On
            // Read the image file as a Blob
            const responseImage = await fetch(imagePath);
            const blob = await responseImage.blob();
            // Prepare form data
            const formData = new FormData();
            formData.append("number", phoneNumber); // Append the recipient's phone number
            formData.append("message", " "); // Append the message
            var canvas = document.createElement("canvas");
            var ctx = canvas.getContext("2d");
            var img = new Image();
            img.crossOrigin = "Anonymous";
            img.onload = function () {
                canvas.width = img.width;
                canvas.height = img.height;

                ctx.drawImage(img, 0, 0);
                ctx.font = "bold 50px serif";
                ctx.textAlign = "left";
                ctx.fillStyle = "black";
                // Receipt and type and renter and car name
                ctx.fillText(InvoiceAccountNo, canvas.width - 2370, 610);
                ctx.fillText(RenterName, canvas.width - 2360, 1070);
                ctx.fillText(CarName, canvas.width - 2360, 1180);

                ctx.font = "bold 42px serif";
                ctx.fillText(referenceType, canvas.width - 2160, 895);
                ctx.fillText(contractNo, canvas.width - 2000, 980);


                // The Table
                var YHeight = 1380;
                var daysNo = document.getElementById('dayNo').value;
                // The payed Information
                const discountText = '%' + discountRate.toString();
                const taxText = '%' + TaxPercent.toString();

                ctx.fillText(balanceR.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), canvas.width - 2040, 2392);
                ctx.fillText(discountText, canvas.width - 2090, 2485);
                ctx.fillText(taxText, canvas.width - 2180, 2573);
                ctx.fillText(AmountRequired, canvas.width - 2020, 2660);
                ctx.fillText(AmountPayed, canvas.width - 2100, 2750);
                ctx.fillText(selectedText, canvas.width - 2010, 2840);
                ctx.fillText(reasonPayment, canvas.width - 2170, 2930);
                ctx.font = "bold 35px serif";
                //Date and contract no
                ctx.fillText(hijriDateString, canvas.width - 2300, 668);
                ctx.fillText(miladiDateString, canvas.width - 2270, 722);
                /////////////////////////ForTest/////////////////
                const hours = miladiDate.getHours().toString().padStart(2, '0');
                const minutes = miladiDate.getMinutes().toString().padStart(2, '0');
                const seconds = miladiDate.getSeconds().toString().padStart(2, '0');
                const timeString = `${hours}:${minutes}:${seconds}`;
                ctx.fillText(timeString, canvas.width - 2270, 760);
                //////////////////////////////////////////////////////
                var Rent = '@Html.Raw(Model.ExtensionContract?.CrCasRenterContractBasicDailyRent)'
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Rent
                if (parseFloat(Rent) > 0) {
                    console.log("Rent", Rent)
                    YHeight = calculateAndDrawEn(ctx, canvas, "Rent", Rent, daysNo, DiscountInput, TaxPercent, YHeight);
                }
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Rent
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Advantages
                var AdvantagesValue = parseFloat('@Model.ExtensionContract.AdvatagesValue');
                if (AdvantagesValue > 0) {
                    YHeight = calculateAndDrawEn(ctx, canvas, "Features", AdvantagesValue, daysNo, DiscountInput, TaxPercent, YHeight);
                }

                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Private Driver
                var privateDriverValue = 0;
                var privateDriver = '@Model.ExtensionContract.CrCasRenterContractBasicPrivateDriverValue';
                if (parseFloat(privateDriver) != null) {
                    privateDriverValue = parseFloat(privateDriver);
                }
                else {
                    privateDriverValue = 0;
                }

                if (privateDriverValue > 0) {
                    YHeight = calculateAndDrawEn(ctx, canvas, "Private Driver", privateDriverValue, daysNo, DiscountInput, TaxPercent, YHeight);
                }
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Private Driver

                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////// TotalChoices
                var TotalChoices = parseFloat('@Model.ExtensionContract.ChoicesValue');
                var choicesValue = 0;
                if (TotalChoices != null && TotalChoices != 0 && TotalChoices != "" && TotalChoices != undefined) {
                    choicesValue = parseFloat(TotalChoices);
                }
                else {
                    choicesValue = 0;
                }
                if (choicesValue > 0) {
                    YHeight = calculateAndDrawEn(ctx, canvas, "Options", choicesValue, daysNo, DiscountInput, TaxPercent, YHeight);
                }
                ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////TotalChoices

                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Total
                var tTotal = calculateTotalAmountPerDay(parseFloat('@Model.ExtensionContract.CrCasRenterContractBasicDailyRent'), parseFloat(AdvantagesValue), parseFloat(privateDriverValue), parseFloat(choicesValue), daysNo);
                var tTotalDiscount = calculateTotalDiscountAmount(tTotal, DiscountInput);
                var tTotalAfterDiscount = tTotal - tTotalDiscount;
                var tTotalTax = (tTotalAfterDiscount) * (TaxPercent / 100);
                var TotalAmountMinisPerviousBalance = tTotalTax + tTotalAfterDiscount;
                // // الاجمالي
                ctx.fillText(tTotal.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), canvas.width - 1510, 2250);
                ctx.fillText(tTotalDiscount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), canvas.width - 1200, 2250);
                ctx.fillText(tTotalAfterDiscount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), canvas.width - 910, 2250);
                ctx.fillText(tTotalTax.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), canvas.width - 620, 2250);
                ctx.fillText(TotalAmountMinisPerviousBalance.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), canvas.width - 310, 2250);
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Total





                // director and renter and user
                ctx.fillText(directorOfLessor, canvas.width - 1980, 3050);
                ctx.fillText(directorOfBranch, canvas.width - 2020, 3180);

                ctx.fillText(userName, canvas.width - 1275, 3050);
                ctx.drawImage(signatureImg, canvas.width - 1250, 3125, 200, 100);
                canvas.toBlob(async function (blob) {
                    formData.append("file", blob, "En_Invoice_Receipt.png"); // Append the modified image blob with a filename
                    var message = `Dear / ${RenterName}, you can review the invoice by downloading the attached file.`
                    createPdfAndSendToWhatsApp(null, InvoiceAccountNo, phoneNumber, token, blob, message, "SavePdfEnInvoice", "en");
                }, 'image/png');
            };
            img.src = URL.createObjectURL(blob);
        };
        function calculateAndDrawEn(ctx, canvas, itemName, itemValue, days, discountInput, taxPercent, yHeight) {
            var itemTotal = parseFloat(itemValue) * parseInt(days);
            var discountValue = itemTotal * (parseFloat(discountInput) / 100);
            var totalAfterDiscount = itemTotal - discountValue;
            var taxValue = totalAfterDiscount * (taxPercent / 100);
            var totalActual = parseFloat(totalAfterDiscount) + parseFloat(taxValue);
            ctx.fillText(itemName, canvas.width - 2300, yHeight);
            ctx.fillText(itemValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), canvas.width - 1950, yHeight);
            ctx.fillText(days, canvas.width - 1700, yHeight);
            ctx.fillText(itemTotal.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), canvas.width - 1510, yHeight);
            ctx.fillText(discountValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), canvas.width - 1200, yHeight);
            ctx.fillText(totalAfterDiscount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), canvas.width - 910, yHeight);
            ctx.fillText(taxValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), canvas.width - 620, yHeight);
            ctx.fillText(totalActual.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), canvas.width - 310, yHeight);

            return yHeight + 88; // Update yHeight for the next item
        }
        function calculateTotalAmountPerDay(rent, feature, privateDriver, choices, days) {
            var daysNo = parseInt(days);
            var total = (rent * daysNo) + (feature * daysNo) + (privateDriver * daysNo) + (choices * daysNo);
            return total;
        }
        function calculateTotalDiscountAmount(total, discount) {
            var discountValue = parseFloat(discount) / 100;
            var totalDiscount = total * discountValue;
            return totalDiscount;
        }

        const sendArReceiptToWhatsApp = async () => {
            const imageLessor = "@lessorInfo?.CrMasUserInformationLessorNavigation?.CrMasLessorImage.CrMasLessorImageArExternalCatchReceipt";
            const imagePath = imageLessor.replace('~', '');
            const token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJudW1iZXIiOiJKYXNlcjExIiwic2VyaWFsIjoiMTk5ZmUzYjFlYjc2MjNlIiwiaWF0IjoxNzA3NzMxNjI4LCJleHAiOjE3OTQxMzE2Mjh9.O_4RW4vYAays1ZL7D-OlOQh6C5P5xVYrT3pZ2Oi9Yak"; // Your WhatsApp API token
            const callingKey = '@user.CrMasUserInformationCallingKey'; // Assuming this variable contains the calling key.
            const mobileNo = '@user.CrMasUserInformationMobileNo';     // Assuming this variable contains the mobile number.
            const phoneNumber = callingKey + mobileNo;
            //Data Receipt
            // Gregorian (Miladi) Date
            const miladiDate = new Date();
            const miladiOptions = { year: 'numeric', month: '2-digit', day: '2-digit' };
            const miladiDateString = miladiDate.toLocaleDateString('en-US', miladiOptions).split('/').join('/');

            // Hijri Date
            // const hijriOptions = { day: 'numeric', month: 'long', year: 'numeric' };
            const hijriDateString = formatHijriDate(miladiDate);

            // First In Page
            const contractNo = "@Model.ExtensionContract.CrCasRenterContractBasicNo";
            const accountReceiptNo = "@ViewBag.AccountReceiptNo";
            const RenterName = '@Html.Raw(Model.ExtensionContract?.CrCasRenterContractBasic5?.CrCasRenterLessorNavigation?.CrMasRenterInformationArName)';

            var selectElement = document.getElementById("ExtensionContract_PaymentMethod");
            var selectedOption = selectElement.options[selectElement.selectedIndex];
            // Get the text of the selected option
            const selectedText = selectedOption.textContent || selectedOption.innerText;
            var selectedArabicName = selectedOption.dataset.ar;
            //get Data Director lessor and branch and get renter and user
            var userName = decodeHTMLEntities("@user.CrMasUserInformationArName");
            var directorOfLessor = decodeHTMLEntities("@user.CrMasUserInformationLessorNavigation.CrMasLessorInformationDirectorArName");
            var directorOfBranch = decodeHTMLEntities("@Model.CrCasBranchInformation.CrCasBranchInformationDirectorArName");
            var reasonPayment = document.getElementById("reasons").value;
            var AmountPayedInput = document.getElementById("ExtensionContract_AmountPayed").value;
            const AmountPayed = parseFloat(AmountPayedInput).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });

            // Signture Image
            var signture = "@user.CrMasUserInformationSignature";
            const signturePath = signture.replace('~', '');
            var signatureImg = new Image();
            signatureImg.src = signturePath;
            //////////////////////////////////////////////////////////////////////////////////////////////////////////


            // Get Image And Text On
            // Read the image file as a Blob
            const responseImage = await fetch(imagePath);
            const blob = await responseImage.blob();
            // Prepare form data
            const formData = new FormData();
            formData.append("number", phoneNumber); // Append the recipient's phone number
            formData.append("message", " "); // Append the message
            var canvas = document.createElement("canvas");
            var ctx = canvas.getContext("2d");
            var img = new Image();
            img.crossOrigin = "Anonymous";
            img.onload = function () {
                canvas.width = img.width;
                canvas.height = img.height;

                ctx.drawImage(img, 0, 0);
                ctx.font = "bold 35px serif";
                ctx.textAlign = "right";
                ctx.fillStyle = "black";
                ctx.fillText(hijriDateString, canvas.width - 260, 712);
                ctx.fillText(miladiDateString, canvas.width - 250, 646);

                ctx.font = "bold 50px serif";


                ctx.fillText(accountReceiptNo, canvas.width - 1840, 620);



                let cleanedValueString = AmountPayed.replace(/,/g, "");

                // Split the cleaned string by the decimal point
                let parts = cleanedValueString.split('.');

                // Extract the number before the decimal point
                let beforeDecimal = parts[0];

                // Extract the number after the decimal point
                let afterDecimal = parts.length > 1 ? parts[1] : "0";

                // Convert the extracted strings back to integers if needed
                let beforeDecimalNumber = parseInt(beforeDecimal);
                let afterDecimalNumber = parseInt(afterDecimal);
                // Assuming `ctx` is your canvas context
                ctx.fillText(afterDecimalNumber, canvas.width - 1925, 720);
                ctx.fillText(beforeDecimalNumber, canvas.width - 2030, 720);

                ctx.fillText(RenterName, canvas.width - 530, 912);
                ctx.fillText(AmountPayed, canvas.width - 400, 1040);
                ctx.fillText(selectedArabicName, canvas.width - 415, 1165);

                // //Total
                //
                var phaseFor = ` ${contractNo} دفعة تحت الحساب لتمديد عقد ايجار سيارة لعقد`;
                ctx.fillText(phaseFor, canvas.width - 390, 1305);

                ctx.font = "bold 40px serif";
                ctx.fillText(directorOfLessor, canvas.width - 320, 1550);
                ctx.drawImage(signatureImg, canvas.width - 1380, 1620, 200, 100);
                ctx.fillText(userName, canvas.width - 1130, 1550);
                ctx.fillText(directorOfBranch, canvas.width - 310, 1685);


                canvas.toBlob(async function (blob) {
                    formData.append("file", blob, "Ar_Catch_Receipt.png"); // Append the modified image blob with a filename
                    var message = ` عزيزي / ${RenterName} , يمكنك مراجعة سند القبض عن طريق تحميل الملف المرفق `
                    createPdfAndSendToWhatsApp(accountReceiptNo, null, phoneNumber, token, blob, message, "SavePdfArReceipt", "ar");
                }, 'image/png');
            };
            img.src = URL.createObjectURL(blob);
        };

        const sendEnReceiptToWhatsApp = async () => {
            const imageLessor = "@lessorInfo?.CrMasUserInformationLessorNavigation?.CrMasLessorImage.CrMasLessorImageEnExternalCatchReceipt";
            const imagePath = imageLessor.replace('~', '');
            const token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJudW1iZXIiOiJKYXNlcjExIiwic2VyaWFsIjoiMTk5ZmUzYjFlYjc2MjNlIiwiaWF0IjoxNzA3NzMxNjI4LCJleHAiOjE3OTQxMzE2Mjh9.O_4RW4vYAays1ZL7D-OlOQh6C5P5xVYrT3pZ2Oi9Yak"; // Your WhatsApp API token
            const callingKey = '@user.CrMasUserInformationCallingKey'; // Assuming this variable contains the calling key.
            const mobileNo = '@user.CrMasUserInformationMobileNo';     // Assuming this variable contains the mobile number.
            const phoneNumber = callingKey + mobileNo;
            //Data Receipt
            // Gregorian (Miladi) Date
            const miladiDate = new Date();
            const miladiOptions = { year: 'numeric', month: '2-digit', day: '2-digit' };
            const miladiDateString = miladiDate.toLocaleDateString('en-US', miladiOptions).split('/').join('/');
            console.log("miladiDateString", miladiDateString)

            // Hijri Date
            // const hijriOptions = { day: 'numeric', month: 'long', year: 'numeric' };
            const hijriDateString = formatHijriEnDate(miladiDate);

            // First In Page
            const contractNo = "@ViewBag.ContractNo";
            const accountReceiptNo = "@ViewBag.AccountReceiptNo";
            const RenterName = '@Html.Raw(Model.ExtensionContract?.CrCasRenterContractBasic5?.CrCasRenterLessorNavigation?.CrMasRenterInformationEnName)';

            var selectElement = document.getElementById("ExtensionContract_PaymentMethod");
            var selectedOption = selectElement.options[selectElement.selectedIndex];
            // Get the text of the selected option
            const selectedText = selectedOption.textContent || selectedOption.innerText;
            var selectedArabicName = selectedOption.dataset.en;
            //get Data Director lessor and branch and get renter and user
            var userName = decodeHTMLEntities("@user.CrMasUserInformationEnName");
            var directorOfLessor = decodeHTMLEntities("@user.CrMasUserInformationLessorNavigation.CrMasLessorInformationDirectorEnName");
            var directorOfBranch = decodeHTMLEntities("@Model.CrCasBranchInformation.CrCasBranchInformationDirectorEnName");
            var reasonPayment = document.getElementById("reasons").value;
            var AmountPayedInput = document.getElementById("ExtensionContract_AmountPayed").value;
            const AmountPayed = parseFloat(AmountPayedInput).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });

            // Signture Image
            var signture = "@user.CrMasUserInformationSignature";
            const signturePath = signture.replace('~', '');
            var signatureImg = new Image();
            signatureImg.src = signturePath;
            //////////////////////////////////////////////////////////////////////////////////////////////////////////


            // Get Image And Text On
            // Read the image file as a Blob
            const responseImage = await fetch(imagePath);
            const blob = await responseImage.blob();
            // Prepare form data
            const formData = new FormData();
            formData.append("number", phoneNumber); // Append the recipient's phone number
            formData.append("message", " "); // Append the message
            var canvas = document.createElement("canvas");
            var ctx = canvas.getContext("2d");
            var img = new Image();
            img.crossOrigin = "Anonymous";
            img.onload = function () {
                canvas.width = img.width;
                canvas.height = img.height;
                ctx.drawImage(img, 0, 0);
                ctx.font = "bold 35px serif";
                ctx.textAlign = "left";
                ctx.fillStyle = "black";
                ctx.fillText(hijriDateString, canvas.width - 2250, 700);
                ctx.fillText(miladiDateString, canvas.width - 2270, 630);
                ctx.font = "bold 50px serif";
                ctx.fillText(accountReceiptNo, canvas.width - 620, 625);
                let cleanedValueString = AmountPayed.replace(/,/g, "");
                // Split the cleaned string by the decimal point
                let parts = cleanedValueString.split('.');
                // Extract the number before the decimal point
                let beforeDecimal = parts[0];
                // Extract the number after the decimal point
                let afterDecimal = parts.length > 1 ? parts[1] : "0";
                // Convert the extracted strings back to integers if needed
                let beforeDecimalNumber = parseInt(beforeDecimal);
                let afterDecimalNumber = parseInt(afterDecimal);
                // Assuming `ctx` is your canvas context
                ctx.fillText(beforeDecimalNumber, canvas.width - 450, 720);
                ctx.fillText(afterDecimalNumber, canvas.width - 270, 720);

                ctx.fillText(RenterName, canvas.width - 2050, 900);
                ctx.fillText(AmountPayed, canvas.width - 2100, 1030);
                ctx.fillText(selectedArabicName, canvas.width - 2000, 1160);

                // //Total
                var phaseFor = `Payment for the car rental contract (${contractNo})`;
                ctx.fillText(phaseFor, canvas.width - 2250, 1290);

                ctx.font = "bold 40px serif";
                ctx.fillText(directorOfLessor, canvas.width - 1990, 1525);
                ctx.drawImage(signatureImg, canvas.width - 1360, 1580, 200, 100);
                ctx.fillText(userName, canvas.width - 1300, 1525);
                ctx.fillText(directorOfBranch, canvas.width - 2020, 1655);


                canvas.toBlob(async function (blob) {
                    formData.append("file", blob, "En_Catch_Receipt.png"); // Append the modified image blob with a filename
                    var message = `Dear / ${RenterName}, you can review the catch receipt by downloading the attached file.`
                    createPdfAndSendToWhatsApp(accountReceiptNo, null, phoneNumber, token, blob, message, "SavePdfEnReceipt", "en");
                }, 'image/png');
            };
            img.src = URL.createObjectURL(blob);
        };

        // submit Form
        document.addEventListener('DOMContentLoaded', function () {
            // Get the form element
            var form = document.getElementById('msform');
            // Get the submit button
            var submitButton = document.getElementById('submitForm');
            // Add a click event listener to the submit button
            submitButton.addEventListener('click', function (event) {
                // Prevent the default form submission
                var AmountPayed = document.getElementById("ExtensionContract_AmountPayed").value;

                event.preventDefault();

                // Check if the form is valid and something is not okay
                if ($("#msform").valid()) {
                    // Submit the form
                    CheckIfCanPayLessThanTotalAmount();
                    if (somethingIsNotOkay) {
                        $('.main').show(); // Show the main container with fade effect
                        sendStaticImageToWhatsApp();
                        sendArInvoiceToWhatsApp();
                        sendEnInvoiceToWhatsApp();
                        if (parseFloat(AmountPayed) > 0) {
                            sendArReceiptToWhatsApp();
                            sendEnReceiptToWhatsApp();
                        }
                        setTimeout(function () {
                            form.submit();
                        }, 10000); // Adjust delay as needed (2000 milliseconds = 2 seconds)
                    }
                    else {
                        CheckIfCanPayLessThanTotalAmount();
                    }
                }
            });
        });

    </script>
    <script type="text/javascript">
        function createPdfAndSendToWhatsApp(receiptNo, invoiceNo, phoneNumber, token, imageBlob, message, InputPdf, language) {
            var doc = new jsPDF('p', 'pt', 'a4', true);
            const pageWidth = doc.internal.pageSize.getWidth();
            const pageHeight = doc.internal.pageSize.getHeight();
            try {
                // Convert the image blob to a base64 DataURL
                const reader = new FileReader();
                reader.onload = function () {
                    const imageDataUrl = reader.result;
                    // Add the image to the PDF
                    const imgWidth = pageWidth; // Width of the image in the PDF
                    const imgHeight = pageHeight; // Height of the image in the PDF
                    const imgXPos = 0; // X position of the image (left edge)
                    const imgYPos = 0; // Y position of the image (top edge)
                    doc.addImage(imageDataUrl, 'PNG', imgXPos, imgYPos, imgWidth, imgHeight, '', 'FAST');
                    // Convert the PDF to a blob
                    const pdfBlob = doc.output('blob');
                    const blobUrl = URL.createObjectURL(pdfBlob);
                    const pdfBase64 = doc.output('datauristring');
                    // Set the base64-encoded PDF to the hidden input field
                    document.getElementById(InputPdf).value = pdfBase64;
                    // Prepare form data with PDF
                    if ("@requestCulture?.RequestCulture.UICulture.Name" == "en-US" && InputPdf != "" && InputPdf != null && language == "en") {
                        const formData = new FormData();
                        formData.append("number", phoneNumber); // Append the recipient's phone number
                        formData.append("message", message); // Append the message
                        if (InputPdf == "SavePdfEnInvoice") {
                            formData.append("file", pdfBlob, `${invoiceNo}.pdf`); // Append the PDF blob with a filename
                            document.getElementById('ExtensionContract_InitialInvoiceNo').value = invoiceNo;
                        }
                        else {
                            document.getElementById('ExtensionContract_AccountReceiptNo').value = receiptNo;
                            formData.append("file", pdfBlob, `${receiptNo}.pdf`); // Append the PDF blob with a filename
                        }
                        // Convert the PDF to a base64-encoded string
                        const requestOptions = {
                            method: 'POST',
                            body: formData,
                            headers: {
                                'Authorization': `Bearer ${token}`
                            }
                        };
                        console.log("pdfBlob", pdfBlob);
                        // Send the request to the API endpoint
                        fetch("https://business.enjazatik.com/api/v1/send-media", requestOptions)
                            .then(response => {
                                if (response.ok) {
                                    return response.json();
                                } else {
                                    return response.text().then(error => Promise.reject(error));
                                }
                            })
                            .then(result => {
                                console.log("SendPDFResult", result);
                            })
                            .catch(error => {
                                console.log("SendPDFError", error);
                            });

                    }
                    else if ("@requestCulture?.RequestCulture.UICulture.Name" == "ar-EG" && InputPdf != "" && InputPdf != null && language == "ar") {
                        const formData = new FormData();
                        formData.append("number", phoneNumber); // Append the recipient's phone number
                        formData.append("message", message); // Append the message
                        if (InputPdf == "SavePdfArInvoice") {
                            document.getElementById('ExtensionContract_InitialInvoiceNo').value = invoiceNo;
                            formData.append("file", pdfBlob, `${invoiceNo}.pdf`); // Append the PDF blob with a filename
                        }
                        else {
                            document.getElementById('ExtensionContract_AccountReceiptNo').value = receiptNo;
                            formData.append("file", pdfBlob, `${receiptNo}.pdf`); // Append the PDF blob with a filename
                        }

                        // Convert the PDF to a base64-encoded string
                        const requestOptions = {
                            method: 'POST',
                            body: formData,
                            headers: {
                                'Authorization': `Bearer ${token}`
                            }
                        };
                        // Send the request to the API endpoint
                        fetch("https://business.enjazatik.com/api/v1/send-media", requestOptions)
                            .then(response => {
                                if (response.ok) {
                                    return response.json();
                                } else {
                                    return response.text().then(error => Promise.reject(error));
                                }
                            })
                            .then(result => {
                                console.log("SendPDFResult", result);
                            })
                            .catch(error => {
                                console.log("SendPDFError", error);
                            });
                    }
                };

                reader.readAsDataURL(imageBlob); // Start reading the image blob
            } catch (error) {
                console.error('Error adding image to PDF:', error);
            }
        }
    </script>
    <script>
        // Function to format Hijri date
        function formatHijriDate(date) {
            const options = { weekday: 'long', day: 'numeric', year: 'numeric', month: 'long', calendar: 'islamic-umalqura' };
            return date.toLocaleDateString('ar-SA', options).replace(/هـ/g, ''); // Remove "هـ" suffix
        }
        // To decode some string
        function decodeHTMLEntities(text) {
            var textArea = document.createElement("textarea");
            textArea.innerHTML = text;
            return textArea.value;
        }
        function formatHijriEnDate(date) {
            const options = { weekday: 'long', day: 'numeric', year: 'numeric', month: 'long', calendar: 'islamic-umalqura' };
            return date.toLocaleDateString('en-US-u-ca-islamic-umalqura', options).replace(/AH/g, ''); // Remove "AH" suffix
        }
    </script>
}