

@using Bnan.Core.Extensions
@model IEnumerable<CrCasRenterContractBasic>
@inject IViewLocalizer localizer
@inject IOptions<RequestLocalizationOptions> options
@{
    var requestCulture = Context.Features.Get<IRequestCultureFeature>();
    ViewData["returnUrl"] = string.IsNullOrEmpty(Context.Request.Path) ? "~/" : $"~{Context.Request.Path.Value}";
}

@if (requestCulture?.RequestCulture.UICulture.Name == "en-US")
{
    
       <div class="col-sm-12">
        @* For-scrolling *@
        <table id="basic-datatable" class="table table-bordered dt-responsive nowrap w-100 dataTable no-footer dtr-inline table-hover" role="grid" aria-describedby="basic-datatable_info" style="position: relative; width: 1166px; ">

            <thead>
                <tr role="row">
                    <th id="_Nc" aria-sort="ascending" aria-label="Name: activate to sort column descending">@localizer["No"]</th>
                    <th id="_Nc" aria-sort="ascending" aria-label="Name: activate to sort column descending">@localizer["RenterContractId"]</th>
                    <th aria-label="Position: activate to sort column ascending">@localizer["Start_Contract"]</th>
                    <th aria-label="Position: activate to sort column ascending">@localizer["End_Contract"]</th>
                    <th aria-label="Position: activate to sort column ascending">@localizer["Renter_Name"]</th>
                    <th aria-label="Position: activate to sort column ascending">@localizer["Contract_Value"]</th>
                    <th aria-label="Position: activate to sort column ascending">@localizer["Status"]</th>
                    <th aria-label="Position: activate to sort column ascending">@localizer["Contract"]</th>
                </tr>
            </thead>
            <tbody>

                @{
                    int no = 1;
                }
                @foreach (var item in Model)
                {
                        @*<tr onclick="location.href='@Url.Action("Edit", "RenterContract", new { id = item.CrCasRenterLessorId })'">*@
                        <tr  >
                        <td id="_Nc">@no</td>

                        <td id="_Nc" style="display:flex">
                            <div style="display:flex;-webkit-align-items:0; gap:5px;"> 
                            <div style="">@item.CrCasRenterContractBasicNo</div>
                            <div style="color:red;">(@item.CrCasRenterContractBasicCopy)</div>
                            </div>
                        </td>
                        <td>@item.CrCasRenterContractBasicExpectedStartDate?.ToString("dd/MM/yyyy")</td>
                            <td>@item.CrCasRenterContractBasicExpectedEndDate?.ToString("dd/MM/yyyy")</td>
                            <td>
                                @item.CrCasRenterContractBasic5.CrCasRenterLessorNavigation.CrMasRenterInformationEnName
                            </td>

                            <td id="_Nc">
                                @{
                                    var n = @item.CrCasRenterContractBasicExpectedTotal?.ToString();
                                    if (n != null && n?.Length > 0)
                                    {
                                        var s = n.Length;
                                        if (Convert.ToInt32(item.CrCasRenterContractBasicExpectedTotal) < 0)
                                        {
                                            n = n.Replace('٫', '.');
                                            @n
                                        }
                                        else if (n.Length < 7)
                                        {
                                            n = n.Replace('٫', '.');
                                            var all = $"{n}";
                                            @all
                                        }
                                        else if (n.Length == 7)
                                        {
                                            n = n.Replace('٫', '.');
                                            var f1 = n.Substring(0, 1);
                                            var f2 = n.Remove(0, 1);
                                            var all = $"{f1},{f2}";
                                            @all
                                        }
                                        else if (n.Length > 7 && n.Length < 10)
                                        {
                                            n = n.Replace('٫', '.');
                                            var f1 = n.Substring(0, s - 6);
                                            var f2 = n.Remove(0, s - 6);
                                            var all = $"{f1},{f2}";
                                            @all
                                        }
                                        else if (n.Length > 9)
                                        {
                                            n = n.Replace('٫', '.');
                                            var f0 = n.Substring(0, s - 9);
                                            var f1 = n.Substring(0, s - 6);
                                            var f2 = n.Remove(0, s - 6);
                                            var all = $"{f0},{f1},{f2}";
                                            @all
                                        }
                                        else
                                        {
                                            n = n.Replace('٫', '.');
                                            @n
                                        }
                                    }
                                }


                            </td>
                            <td>

                                @if (@item.CrCasRenterContractBasicStatus == Status.Active)
                                {
                                    @localizer["Standing"]
                                }
                                else if (@item.CrCasRenterContractBasicStatus == Status.Extension)
                                {
                                    @localizer["Extension"]
                                }
                                else if (@item.CrCasRenterContractBasicStatus == Status.Rented)
                                {
                                @localizer["Rented_n"]
                                }
                                else if (@item.CrCasRenterContractBasicStatus == Status.Hold)
                                {
                                    @localizer["Hold"]
                                }
                                else if (@item.CrCasRenterContractBasicStatus == Status.Deleted)
                                {
                                    @localizer["Deleted"]
                                }
                                else
                                {

                                }
                            </td>

                            <td id="_Nc">@localizer["Contract"]</td>

                        </tr>
                    
                    no++;
                }
            </tbody>
        </table>
    </div>
}
else
{
    <div class="col-sm-12">
        @* For-scrolling *@
        <table id="basic-datatable" class="table table-bordered dt-responsive nowrap w-100 dataTable no-footer dtr-inline table-hover" role="grid" aria-describedby="basic-datatable_info" style="position: relative; width: 1166px; ">
            <thead>
                <tr role="row">
                    <th id="_Nc" aria-sort="ascending" aria-label="Name: activate to sort column descending">@localizer["No"]</th>
                    <th id="_Nc" aria-sort="ascending" aria-label="Name: activate to sort column descending">@localizer["RenterContractId"]</th>
                    <th aria-label="Position: activate to sort column ascending">@localizer["Start_Contract"]</th>
                    <th aria-label="Position: activate to sort column ascending">@localizer["End_Contract"]</th>
                    <th aria-label="Position: activate to sort column ascending">@localizer["Renter_Name"]</th>
                    <th aria-label="Position: activate to sort column ascending">@localizer["Contract_Value"]</th>
                    <th aria-label="Position: activate to sort column ascending">@localizer["Status"]</th>
                    <th aria-label="Position: activate to sort column ascending">@localizer["Contract"]</th>
                </tr>
            </thead>
            <tbody>

                @{
                    int no = 1;
                }

                    
                
                @foreach (var item in Model)
                {
                        @*<tr onclick="location.href='@Url.Action("Edit", "RenterContract", new { id = item.CrCasRenterLessorId })'">*@
                        <tr>
                        <td id="_Nc">@no</td>

                        <td id="_Nc" style="display:flex">
                            <div style="display:flex;-webkit-align-items:0; gap:5px;">
                                <div style="">@item.CrCasRenterContractBasicNo</div>
                                <div style="color:red;">(@item.CrCasRenterContractBasicCopy)</div>
                            </div>
                        </td>

                        <td>@item.CrCasRenterContractBasicExpectedStartDate?.ToString("dd/MM/yyyy")</td>
                        <td>@item.CrCasRenterContractBasicExpectedEndDate?.ToString("dd/MM/yyyy")</td>
                        <td>
                            @item.CrCasRenterContractBasic5.CrCasRenterLessorNavigation.CrMasRenterInformationArName
                        </td>

                            <td id="_Nc">
                                @{
                                    var n = @item.CrCasRenterContractBasicExpectedTotal?.ToString();
                                    if(n != null && n?.Length > 0)
                                    {
                                        var s = n.Length;
                                        if (Convert.ToInt32(item.CrCasRenterContractBasicExpectedTotal) < 0)
                                        {
                                            n = n.Replace('٫', '.');
                                            @n
                                        }
                                        else if (n.Length < 7)
                                        {
                                            n = n.Replace('٫', '.');
                                            var all = $"{n}";
                                            @all
                                        }
                                        else if (n.Length == 7)
                                        {
                                            n = n.Replace('٫', '.');
                                            var f1 = n.Substring(0, 1);
                                            var f2 = n.Remove(0, 1);
                                            var all = $"{f1},{f2}";
                                            @all
                                        }
                                        else if (n.Length > 7 && n.Length < 10)
                                        {
                                            n = n.Replace('٫', '.');
                                            var f1 = n.Substring(0, s-6);
                                            var f2 = n.Remove(0, s-6);
                                            var all = $"{f1},{f2}";
                                            @all
                                        }
                                        else if (n.Length > 9)
                                        {
                                            n = n.Replace('٫', '.');
                                            var f0 = n.Substring(0, s - 9);
                                            var f1 = n.Substring(0, s - 6);
                                            var f2 = n.Remove(0, s - 6);
                                            var all = $"{f0},{f1},{f2}";
                                            @all
                                        }
                                        else
                                        {
                                            n = n.Replace('٫', '.');
                                            @n
                                        }
                                    }
                                }
                                
                                
                            </td>

                            <td>

                                @if (@item.CrCasRenterContractBasicStatus == Status.Active)
                                {
                                    @localizer["Standing"]
                                }
                                else if (@item.CrCasRenterContractBasicStatus == Status.Extension)
                                {
                                    @localizer["Extension"]
                                }
                                else if (@item.CrCasRenterContractBasicStatus == Status.Rented)
                                {
                                @localizer["Rented_n"]
                                }
                                else if (@item.CrCasRenterContractBasicStatus == Status.Hold)
                                {
                                    @localizer["Hold"]
                                }
                                else if (@item.CrCasRenterContractBasicStatus == Status.Deleted)
                                {
                                    @localizer["Deleted"]
                                }
                                else
                                {

                                }
                            </td>

                            <td id="_Nc">@localizer["Contract"]</td>
                            @*<td id="_Nc">@item.CrCasRenterContractBasicExpectedTotal</td>*@
                        </tr>
                    
                    no++;
                }

            </tbody>
        </table>
    </div>
}

@section scripts {

    <script>
        new DataTable('#basic-datatable', {
            scrollX: true
        });
    </script>
    <script>
        function GetUpdatedValues(status) {
            //var code = document.getElementById("CrMasContractCompanyNo").value;
            var _max = document.getElementById("endDateInput").value;
            var _mini = document.getElementById("startDateInput").value;
            if (status == "All") {
                const yesBtn = document.getElementById('customRadioAll');

                // ✅ Set the radio button to checked
                yesBtn.checked = true;
            }
            //var status = $("input[name='customRadio']").val();
            $.ajax({
                type: "GET",
                data: { _max: _max, _mini: _mini, status: status },
                // url: "@Url.Action("GetAllContractsByDate_status", "ReportContract", new { Area = "CAS" })",
                url: '/CAS/ReportContract/GetAllContractsByDate_status',

                success: function (result) {
                    console.log(result);
                    $('#dataTableR1').html(result);
                    set_basic_datatable();
                }
            });
        }

        document.addEventListener("DOMContentLoaded", function () {
            var startDate = document.getElementById('startDateInput');
            var endDate = document.getElementById('endDateInput');

            startDate.addEventListener('change', function () {
                console.log('Start date changed');
                GetUpdatedValues("All");
                // Handle logic for start date change here
            });

            endDate.addEventListener('change', function () {
                console.log('End date changed');
                GetUpdatedValues("All");
                // Handle logic for end date change here
            });
        });
    </script>
    @*Get Renter contract Using filter*@
    <script>
        //get Renter contract By Status function
        function GetRenterContractFitler(status) {
            $.ajax({
                type: "GET",
                data: {
                    status: status
                },
                url: "@Url.Action("GetRenterContractsByStatus", "ReportContract", new { Area = "CAS" })",
                success: function (response) {
                    $("#dataTableR1").html(response);
                    set_basic_datatable();
                },
            })
        }

        //on Click Filter Radio Button GetLessorsByStatus
        $("input[name='customRadio']").on("click", function () {
            // Clear the value from the search input
            $("#top-search").val("");
            //GetRenterContractFitler($(this).val())
            GetUpdatedValues($(this).val());
        })
    </script>
    }