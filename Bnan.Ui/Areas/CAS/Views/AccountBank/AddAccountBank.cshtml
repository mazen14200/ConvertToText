@using Bnan.Ui.ViewModels.CAS
@model Bnan.Ui.ViewModels.CAS.AccountBankVM
@inject IViewLocalizer localizer

@{
    var requestCulture = Context.Features.Get<IRequestCultureFeature>();
       ViewData["returnUrl"] = string.IsNullOrEmpty(Context.Request.Path) ? "~/" : $"~{Context.Request.Path.Value}";
    ViewData["Page-title"] = localizer["Add AccountBank Data"];
    ViewData["Page-Hint"] = localizer["Add AccountBank Hint"];
}
<style>

    .row {
        align-items: center;
    }
</style>
<title>@ViewData["Title"]</title>



<div class="sub-container-form">
    <form class="needs-validation" novalidate asp-area="CAS" asp-controller="AccountBank" asp-action="AddAccountBank" enctype="multipart/form-data">
        <div class="form-contain">

            <input type="text" class="form-control" asp-for="CrCasAccountBankNo" id="CrCasAccountBankNo" maxlength="100" width="80%" value="@ViewBag.AccountBankCode" readonly hidden/>
            <input type="text" class="form-control" asp-for="CrCasAccountBankLessor" id="CrCasAccountBankLessor" maxlength="100" width="80%" value="@ViewBag.LessorCode" readonly hidden />
            <input type="text" class="form-control" asp-for="CrCasAccountBankSerail" id="CrCasAccountBankSerail" maxlength="100" width="80%" value="@ViewBag.SerialCode" readonly hidden />

        <div class="row mt-2">

            @*AccountBank code*@
           
            <div class="col-md-1">
               <label class="form-label" for="LessorClass">@localizer["BankName"]</label>
            </div>
            <div class="col-md-2">
                @if (requestCulture?.RequestCulture.UICulture.Name == "ar-EG")
                {
                        <select class="form-select" asp-for="@Model.CrCasBankArName" style="width: 100%;" dir="rtl">
                            <option value="" selected></option> <!-- Add an empty option as the first option -->
                            @foreach (var BankName in (List<SelectListItem>)ViewData["BanksDataAr"])
                        {
                            <option value="@BankName.Value" selected="@(BankName.Value.Trim() == "" ? "selected" : null)">@BankName.Text</option>
                        }
                    </select>

                        <div style="margin-top:2px">
                            <div style="height: 1.35em">
                                <span asp-validation-for="@Model.CrCasBankArName" class="text-danger"></span>
                            </div>
                        </div>
                }
                else
                {
                        <select class="form-select" asp-for="@Model.CrCasBankEnName" style="width: 100%;">
                            <option value="" selected></option> <!-- Add an empty option as the first option -->
                            @foreach (var BankName in (List<SelectListItem>)ViewData["BanksDataEn"])
                        {
                            <option value="@BankName.Value" selected="@(BankName.Value.Trim() == ""  ? "selected" : null)">@BankName.Text</option>
                        }
                    </select>
                        <div style="margin-top:2px">
                            <div style="height: 1.35em">
                                <span asp-validation-for="@Model.CrCasBankEnName" class="text-danger"></span>
                            </div>
                        </div>
                }
                
            </div>
         </div>
            @*IBank *@
            <div class="row mt-2">
                <div class="col-md-1">
                    <label class="form-label" for="AccountBankCode">@localizer["AccountBankCode"]</label>
                </div>
                <div class="col-md-4">
                    <input type="text" class="form-control" asp-for="CrCasAccountBankIban" id="AccountBankCode" maxlength="50" width="80%"  required />
                    <div style="margin-top:2px">
                        <div style="height: 1.0em">
                            <span asp-validation-for="@Model.CrCasAccountBankIban" class="text-danger"></span>
                             @if (requestCulture?.RequestCulture.UICulture.Name == "ar-EG")
                                 {
                                @Html.ValidationMessage("ExistCodeAr", null, new { @class = "text-danger" })
                            }
                            else
                            {
                                @Html.ValidationMessage("ExistCodeEn", null, new { @class = "text-danger" })

                            }
                        </div>
                    </div>
                </div>
            </div>  
            @*AccountBank name arabic*@
            <div class="row mt-2">
                <div class="col-md-1">
                    <label class="form-label" for="AccountBankNameAr">@localizer["AccountBankNameAr"]</label>
                </div>
                <div class="col-md-4">
                    <input type="text" class="form-control" asp-for="CrCasAccountBankArName" id="AccountBankNameAr" maxlength="50" width="80%" oninput="this.value=this.value.replace(/[^\u0600-\u06FF\ufb50-\ufdff\ufe70-\ufeff\s]/g, '')" required />
                    <div style="margin-top:2px">
                        <div style="height: 1.0em">
                            <span asp-validation-for="@Model.CrCasAccountBankArName" class="text-danger"></span>
                            @Html.ValidationMessage("ExistAr", null, new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
            @*AccountBank name English*@
            <div class="row mt-2">
                <div class="col-md-1">
                    <label class="form-label" for="AccountBankNameEn">@localizer["AccountBankNameEn"]</label>
                </div>
                <div class="col-md-4">
                    <input type="text" class="form-control" asp-for="CrCasAccountBankEnName" maxlength="50" id="AccountBankNameEn" width="80%" oninput="this.value = this.value.replace(/[^a-zA-Z ]/g, '')">
                    <div style="margin-top:2px">
                        <div style="height: 1.0em">
                            <span asp-validation-for="@Model.CrCasAccountBankEnName" class="text-danger"></span>
                            @Html.ValidationMessage("ExistEn", null, new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
            @*AccountBank reasons*@
            <div class="row mt-2">
                <div class="col-md-1">
                    <label class="form-label" for="AccountBankReasons">@localizer["reasons"]</label>
                </div>
                <div class="col-md-7">
                    <input type="text" class="form-control" asp-for="CrCasAccountBankReasons" maxlength="100" id="AccountBankReasons" width="80%" />
                    <div style="margin-top:2px">
                        <div style="height: 1.0em">
                            <span asp-validation-for="@Model.CrCasAccountBankReasons" class="text-danger"></span>
                        </div>
                    </div>
                </div>
            </div>

         

            @Html.ValidationMessage("NoCHanged", null, new { @class = "text-danger" })
        </div>
        <div class="mt-3">
            <button class="btn btn-primary" type="submit">@localizer["Save"]</button>
            <a type="button" class="btn btn-danger ms-2" title="@localizer["Back"]" asp-area="CAS" asp-controller="AccountBank" asp-action="Index">
                @localizer["Back"]
            </a>
        </div>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        function validateInput(event, inId, InEr, No) {
            event.target.value = event.target.value.replace(/[^0-9]/g, '');

            const inputElement = document.getElementById(inId);
            const errorMessageElement = document.getElementById(InEr);

            const inputValue = inputElement.value;
            const isValid = inputValue.startsWith(No);

            if (!isValid) {
                errorMessageElement.textContent = errorMessageElement.getAttribute('data-val-err');
                inputElement.value = "";
            } else {
                errorMessageElement.textContent = '';
            }


        }
       

    </script>
}